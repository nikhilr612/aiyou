{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get",
				"getFromIndexedDB"
			],
			[
				"ge",
				"getFromIndexedDB"
			],
			[
				"me",
				"meta_object"
			],
			[
				"ch",
				"chunk_source"
			],
			[
				"met",
				"method"
			],
			[
				"re",
				"result"
			],
			[
				"newRe",
				"newResponse"
			],
			[
				"meta",
				"meta_object"
			],
			[
				"new",
				"newResponse"
			],
			[
				"refre",
				"refreshToken"
			],
			[
				"refresh",
				"auto_refresh"
			],
			[
				"stri",
				"string"
			],
			[
				"res",
				"results"
			],
			[
				"err",
				"errorMessage"
			],
			[
				"valida",
				"validateMetaObject"
			],
			[
				"case",
				"caseValidateUser"
			],
			[
				"che",
				"caseAuthenticateUser"
			],
			[
				"e",
				"existingUser"
			],
			[
				"con",
				"console"
			],
			[
				"pa",
				"parse"
			],
			[
				"val",
				"validateUserToken"
			],
			[
				"va",
				"validateUserToken"
			],
			[
				"v",
				"validateUserToken"
			],
			[
				"vali",
				"validateUserToken"
			],
			[
				"w-",
				"w-full"
			],
			[
				"j",
				"justify-between"
			],
			[
				"w",
				"w-full"
			],
			[
				"max",
				"max-height"
			],
			[
				"f",
				"function"
			],
			[
				"sc",
				"section"
			],
			[
				"s",
				"stroke"
			],
			[
				"node",
				"node_empty"
			],
			[
				"Tree",
				"TreeComparator_t"
			],
			[
				"Com",
				"TreeComparator_t"
			],
			[
				"Binar",
				"BinarySearchTreeVisitor"
			],
			[
				"Bina",
				"BinarySearchTreeVisitor"
			],
			[
				"Binary",
				"BinarySearchTreeVisitor"
			],
			[
				"Walk",
				"WalkRight"
			],
			[
				"Unit",
				"UnitState"
			],
			[
				"Uni",
				"UnitState::WalkUp"
			],
			[
				"c",
				"component_diff_cmp(…)"
			],
			[
				"Orde",
				"Ordering::Less"
			],
			[
				"Or",
				"Ordering::Greater"
			],
			[
				"V",
				"Vector2"
			],
			[
				"W",
				"WalkRight"
			],
			[
				"UnitState",
				"UnitState (use crate::unit::UnitState)"
			],
			[
				"UnitS",
				"UnitState::WalkRight"
			],
			[
				"in",
				"into() (as Into)"
			],
			[
				"p",
				"pathpoints"
			],
			[
				"Ray",
				"RaylibHandle (use raylib::RaylibHandle)"
			],
			[
				"Tile",
				"TileMap (use crate::map::TileMap)"
			],
			[
				"co",
				"collect() (as Iterator)"
			],
			[
				"Grid",
				"GridLoc (use crate::plane::GridLoc)"
			],
			[
				"Vec",
				"Vector2 (use raylib::math::Vector2)"
			],
			[
				"d",
				"filled_diamond(…)"
			],
			[
				"fo",
				"fog_of_war"
			],
			[
				"cl",
				"clear_up_fog(…)"
			],
			[
				"map",
				"map_rect"
			],
			[
				"for",
				"for_each(…) (as Iterator)"
			],
			[
				"fil",
				"filter_map(…) (as Iterator)"
			],
			[
				"G",
				"GridRect"
			],
			[
				"Gr",
				"GridRect"
			],
			[
				"ca",
				"cam_pos"
			],
			[
				"draw",
				"draw_color_tile"
			],
			[
				"B",
				"BLACK"
			],
			[
				"view",
				"view_rect(…) (use crate::map::view_rect)"
			],
			[
				"m",
				"map_rect()"
			],
			[
				"ma",
				"map_rect()"
			],
			[
				"sa",
				"saturating_sub(…)"
			],
			[
				"sat",
				"saturating_sub(…)"
			],
			[
				"r",
				"rsize"
			],
			[
				"po",
				"point_v"
			],
			[
				"sca",
				"scaled_vec(…)"
			],
			[
				"sk",
				"skip(…) (as Iterator)"
			],
			[
				"draw_circl",
				"draw_circle_v(…) (as RaylibDraw)"
			],
			[
				"t",
				"tile_size()"
			],
			[
				"draw_c",
				"draw_color_tile(…)"
			],
			[
				"dra",
				"draw_attack_tile(…)"
			],
			[
				"Til",
				"TileSize (use crate::map::TileSize)"
			],
			[
				"BLA",
				"BLACK"
			],
			[
				"draw_rectan",
				"draw_rectangle_lines(…) (as RaylibDraw)"
			],
			[
				"Gri",
				"GridRect"
			],
			[
				"ren",
				"render_height"
			],
			[
				"Ve",
				"Vector2{}"
			],
			[
				"cam",
				"cam_pos"
			],
			[
				"rend",
				"render_height"
			],
			[
				"si",
				"tile_size()"
			],
			[
				"min",
				"min_y"
			],
			[
				"ra",
				"radius"
			],
			[
				"lo",
				"logging (use raylib::logging)"
			],
			[
				"D",
				"Diamond"
			],
			[
				"filter",
				"filter_map(…) (as Iterator)"
			],
			[
				"Dia",
				"DiamondArm::SouthEast"
			],
			[
				"cent",
				"center_y"
			],
			[
				"ce",
				"center_x"
			],
			[
				"center",
				"center_y"
			],
			[
				"Nor",
				"NorthEast"
			],
			[
				"Diamon",
				"DiamondArm"
			],
			[
				"Diam",
				"DiamondArm"
			],
			[
				"Diamo",
				"DiamondArm"
			],
			[
				"Sou",
				"SouthWest"
			],
			[
				"Di",
				"DiamondFlag"
			],
			[
				"sta",
				"state_flag"
			],
			[
				"Diamond",
				"DiamondPoint"
			],
			[
				"ne",
				"next() (as Iterator)"
			],
			[
				"satur",
				"saturating_sub(…)"
			],
			[
				"No",
				"NorthWest"
			],
			[
				"N",
				"NorthWest"
			],
			[
				"Seriali",
				"SerializeTuple"
			],
			[
				"too",
				"clippy::too_many_arguments"
			],
			[
				"all",
				"allow(…)"
			],
			[
				"draw_rec",
				"draw_rectangle_v(…) (as RaylibDraw)"
			],
			[
				"draw_re",
				"draw_rectangle_v(…) (as RaylibDraw)"
			],
			[
				"un",
				"unwrap_or_default()"
			],
			[
				"render",
				"render_height"
			],
			[
				"tile",
				"tile_size: &TileSize,"
			],
			[
				"sort",
				"sort_by(…)"
			],
			[
				"de",
				"deprecated"
			],
			[
				"GridL",
				"GridLoc"
			],
			[
				"ZER",
				"ZERO_POINT"
			],
			[
				"allow",
				"allow(…)"
			],
			[
				"De",
				"Default"
			],
			[
				"my",
				"myunit"
			],
			[
				"O",
				"Ordinate"
			],
			[
				"try",
				"try_from(…) (as TryFrom)"
			],
			[
				"Re",
				"Resources"
			],
			[
				"In",
				"InputState"
			],
			[
				"draw_uni",
				"draw_unit_attack_tiles"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Package Control Messages\n========================\n\n\nJsPrettier\n----------\n\n  ┌────────────────────────────────────────────────────────────────────────────┐\n  │                     _     ____           _   _   _                         │\n  │                    | |___|  _ \\ _ __ ___| |_| |_(_) ___ _ __               │\n  │                 _  | / __| |_) | '__/ _ \\ __| __| |/ _ \\ '__|              │\n  │                | |_| \\__ \\  __/| | |  __/ |_| |_| |  __/ |                 │\n  │                 \\___/|___/_|   |_|  \\___|\\__|\\__|_|\\___|_|                 │\n  │                                                                            │\n  │     Sublime Text Plug-in for Prettier, the opinionated code formatter.     │\n  └────────────────────────────────────────────────────────────────────────────┘\n  \n  ## Getting started\n  \n  ### Install Prettier\n  \n  If you've already installed Prettier, you're all set... otherwise:\n  \n      # yarn (local):\n      yarn add prettier --dev\n  \n      # yarn (global):\n      yarn global add prettier\n  \n      # npm (local):\n      npm install --save-dev prettier\n  \n      # npm (global):\n      npm install --global prettier\n  \n  ### Usage\n  \n  There are three ways to format code...\n  \n  1. Command Palette\n  \n      \"Ctrl/Cmd + Shift + P\", then type \"JsPrettier Format Code\".\n  \n  2. Context Menu\n  \n      Right-click the file view and select \"JsPrettier Format Code\".\n  \n  3. Key Binding\n  \n      There is no default key binding for this plug-in.\n  \n      To add a key binding, navigate to \"Preferences\" -> \"Key Bindings...\", and\n      add an entry for \"js_prettier\". For example...\n  \n          { \"keys\": [\"shift+alt+f\"], \"command\": \"js_prettier\" }\n  \n      Change \"shift+alt+f\" with your preferred key combination.\n  \n  ## Issues\n  \n  For additional help, including reporting issues, please visit the JsPrettier\n  home page at https://github.com/jonlabelle/SublimeJsPrettier.\n  \n  ## License\n  \n  The MIT License (MIT)\n  Copyright (c) Jon LaBelle\n",
			"settings":
			{
				"buffer_size": 1987,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					1,
					"package_control_message",
					{
						"message": "\n\nJsPrettier\n----------\n\n  ┌────────────────────────────────────────────────────────────────────────────┐\n  │                     _     ____           _   _   _                         │\n  │                    | |___|  _ \\ _ __ ___| |_| |_(_) ___ _ __               │\n  │                 _  | / __| |_) | '__/ _ \\ __| __| |/ _ \\ '__|              │\n  │                | |_| \\__ \\  __/| | |  __/ |_| |_| |  __/ |                 │\n  │                 \\___/|___/_|   |_|  \\___|\\__|\\__|_|\\___|_|                 │\n  │                                                                            │\n  │     Sublime Text Plug-in for Prettier, the opinionated code formatter.     │\n  └────────────────────────────────────────────────────────────────────────────┘\n  \n  ## Getting started\n  \n  ### Install Prettier\n  \n  If you've already installed Prettier, you're all set... otherwise:\n  \n      # yarn (local):\n      yarn add prettier --dev\n  \n      # yarn (global):\n      yarn global add prettier\n  \n      # npm (local):\n      npm install --save-dev prettier\n  \n      # npm (global):\n      npm install --global prettier\n  \n  ### Usage\n  \n  There are three ways to format code...\n  \n  1. Command Palette\n  \n      \"Ctrl/Cmd + Shift + P\", then type \"JsPrettier Format Code\".\n  \n  2. Context Menu\n  \n      Right-click the file view and select \"JsPrettier Format Code\".\n  \n  3. Key Binding\n  \n      There is no default key binding for this plug-in.\n  \n      To add a key binding, navigate to \"Preferences\" -> \"Key Bindings...\", and\n      add an entry for \"js_prettier\". For example...\n  \n          { \"keys\": [\"shift+alt+f\"], \"command\": \"js_prettier\" }\n  \n      Change \"shift+alt+f\" with your preferred key combination.\n  \n  ## Issues\n  \n  For additional help, including reporting issues, please visit the JsPrettier\n  home page at https://github.com/jonlabelle/SublimeJsPrettier.\n  \n  ## License\n  \n  The MIT License (MIT)\n  Copyright (c) Jon LaBelle\n"
					},
					"AQAAAAAAAAAAAAAAwwcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/C/Users/praky/AppData/Roaming/Sublime Text/Packages/JsPrettier/JsPrettier.sublime-settings",
			"settings":
			{
				"buffer_size": 22874,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "true"
					},
					"BQAAAN8OAAAAAAAA4A4AAAAAAAAAAAAA4A4AAAAAAADgDgAAAAAAAAUAAABmYWxzZeAOAAAAAAAA4Q4AAAAAAAAAAAAA4Q4AAAAAAADiDgAAAAAAAAAAAADiDgAAAAAAAOMOAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5A4AAAAAAADfDgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "hooks/use-toast.ts",
			"settings":
			{
				"buffer_size": 4007,
				"line_ending": "Windows"
			}
		},
		{
			"file": "app/api/route.ts",
			"redo_stack":
			[
				[
					943,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAAAkFAAAAAAAACwUAAAAAAAAAAAAADAUAAAAAAAAMBQAAAAAAAAIAAAAJCQsFAAAAAAAACwUAAAAAAAABAAAACgsFAAAAAAAAHAUAAAAAAAAAAAAACQUAAAAAAAAJBQAAAAAAAAIAAAAJCQgFAAAAAAAACAUAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMBQAAAAAAAAwFAAAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 10778,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					422,
					1,
					"left_delete",
					null,
					"AQAAAIUEAAAAAAAAhQQAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGBAAAAAAAAIYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAIUEAAAAAAAAhgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFBAAAAAAAAIUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					425,
					1,
					"left_delete",
					null,
					"AQAAAIUEAAAAAAAAhQQAAAAAAAABAAAAMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGBAAAAAAAAIYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					426,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAIUEAAAAAAAAhgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFBAAAAAAAAIUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					566,
					4,
					"left_delete",
					null,
					"BAAAANkAAAAAAAAA2QAAAAAAAAABAAAAMNgAAAAAAAAA2AAAAAAAAAABAAAAMNcAAAAAAAAA1wAAAAAAAAABAAAANtYAAAAAAAAA1gAAAAAAAAABAAAAMw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaAAAAAAAAANoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": "10"
					},
					"AgAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADYAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWAAAAAAAAANYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAAsoAAAAAAAADCgAAAAAAAAAAAAADCgAAAAAAAANKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALKAAAAAAAAAsoAAAAAAAAAAAAAAAA8L8"
				],
				[
					573,
					1,
					"insert",
					{
						"characters": " 1000"
					},
					"BQAAAA0oAAAAAAAADigAAAAAAAAAAAAADigAAAAAAAAPKAAAAAAAAAAAAAAPKAAAAAAAABAoAAAAAAAAAAAAABAoAAAAAAAAESgAAAAAAAAAAAAAESgAAAAAAAASKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANKAAAAAAAAA0oAAAAAAAAAAAAAAAA8L8"
				],
				[
					583,
					1,
					"reindent",
					null,
					"AQAAAKUnAAAAAAAApicAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClJwAAAAAAAKUnAAAAAAAAAAAAAAAA8L8"
				],
				[
					585,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPUnAAAAAAAA9icAAAAAAAAAAAAApScAAAAAAAClJwAAAAAAAAEAAAAJ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1JwAAAAAAAPUnAAAAAAAAAAAAAAAANEA"
				],
				[
					586,
					1,
					"reindent",
					null,
					"AQAAAPUnAAAAAAAA9icAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1JwAAAAAAAPUnAAAAAAAAAAAAAAAA8L8"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPYnAAAAAAAA9ycAAAAAAAAAAAAA9ycAAAAAAAD4JwAAAAAAAAAAAAD1JwAAAAAAAPUnAAAAAAAAAQAAAAk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2JwAAAAAAAPYnAAAAAAAAAAAAAAAA8L8"
				],
				[
					590,
					1,
					"reindent",
					null,
					"AQAAAPUnAAAAAAAA9icAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1JwAAAAAAAPUnAAAAAAAAAAAAAAAANEA"
				],
				[
					591,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"DAAAAPYnAAAAAAAA9ycAAAAAAAAAAAAA+CcAAAAAAAD4JwAAAAAAAAEAAAAJ9ycAAAAAAAD4JwAAAAAAAAAAAAD4JwAAAAAAAPknAAAAAAAAAAAAAPknAAAAAAAA+icAAAAAAAAAAAAA+icAAAAAAAD7JwAAAAAAAAAAAAD7JwAAAAAAAPwnAAAAAAAAAAAAAPwnAAAAAAAA/ScAAAAAAAAAAAAA/ScAAAAAAAD+JwAAAAAAAAAAAAD+JwAAAAAAAP8nAAAAAAAAAAAAAP8nAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAABKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2JwAAAAAAAPYnAAAAAAAAAAAAAAAA8L8"
				],
				[
					592,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAEoAAAAAAAAAygAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABKAAAAAAAAAEoAAAAAAAAAAAAAAAA8L8"
				],
				[
					593,
					1,
					"insert",
					{
						"characters": "cu"
					},
					"AgAAAAIoAAAAAAAAAygAAAAAAAAAAAAAAygAAAAAAAAEKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACKAAAAAAAAAIoAAAAAAAAAAAAAAAA8L8"
				],
				[
					594,
					1,
					"insert_completion",
					{
						"completion": "currentTime",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "currentTime"
					},
					"AgAAAAIoAAAAAAAAAigAAAAAAAACAAAAY3UCKAAAAAAAAA0oAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEKAAAAAAAAAQoAAAAAAAAAAAAAAAA8L8"
				],
				[
					595,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAA0oAAAAAAAADigAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANKAAAAAAAAA0oAAAAAAAAAAAAAAAA8L8"
				],
				[
					596,
					1,
					"insert",
					{
						"characters": " exp"
					},
					"BAAAAA4oAAAAAAAADygAAAAAAAAAAAAADygAAAAAAAAQKAAAAAAAAAAAAAAQKAAAAAAAABEoAAAAAAAAAAAAABEoAAAAAAAAEigAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOKAAAAAAAAA4oAAAAAAAAAAAAAAAA8L8"
				],
				[
					597,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASKAAAAAAAABIoAAAAAAAAAAAAAAAA8L8"
				],
				[
					601,
					3,
					"left_delete",
					null,
					"AwAAAAAoAAAAAAAAACgAAAAAAAABAAAAZ/8nAAAAAAAA/ycAAAAAAAABAAAAb/4nAAAAAAAA/icAAAAAAAABAAAAbA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABKAAAAAAAAAEoAAAAAAAAAAAAAAAA8L8"
				],
				[
					602,
					1,
					"insert",
					{
						"characters": "debug"
					},
					"BQAAAP4nAAAAAAAA/ycAAAAAAAAAAAAA/ycAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAEoAAAAAAAAAAAAAAEoAAAAAAAAAigAAAAAAAAAAAAAAigAAAAAAAADKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+JwAAAAAAAP4nAAAAAAAAAAAAAAAA8L8"
				],
				[
					625,
					1,
					"left_delete",
					null,
					"AQAAANYAAAAAAAAA1gAAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXAAAAAAAAANcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					626,
					1,
					"insert",
					{
						"characters": "3600"
					},
					"BAAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANkAAAAAAAAAAAAAANkAAAAAAAAA2gAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWAAAAAAAAANYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					627,
					1,
					"left_delete",
					null,
					"AQAAANkAAAAAAAAA2QAAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaAAAAAAAAANoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					632,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AgAAAOcoAAAAAAAA6CgAAAAAAAAAAAAA6CgAAAAAAADoKAAAAAAAAAMAAAAvIDI",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqKAAAAAAAAOcoAAAAAAAAAAAAAAAA8L8"
				],
				[
					633,
					1,
					"insert",
					{
						"characters": " 3590"
					},
					"BQAAAOgoAAAAAAAA6SgAAAAAAAAAAAAA6SgAAAAAAADqKAAAAAAAAAAAAADqKAAAAAAAAOsoAAAAAAAAAAAAAOsoAAAAAAAA7CgAAAAAAAAAAAAA7CgAAAAAAADtKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoKAAAAAAAAOgoAAAAAAAAAAAAAAAA8L8"
				],
				[
					634,
					4,
					"left_delete",
					null,
					"BAAAAOwoAAAAAAAA7CgAAAAAAAABAAAAMOsoAAAAAAAA6ygAAAAAAAABAAAAOeooAAAAAAAA6igAAAAAAAABAAAANekoAAAAAAAA6SgAAAAAAAABAAAAMw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtKAAAAAAAAO0oAAAAAAAAAAAAAAAA8L8"
				],
				[
					635,
					1,
					"insert",
					{
						"characters": "20"
					},
					"AgAAAOkoAAAAAAAA6igAAAAAAAAAAAAA6igAAAAAAADrKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpKAAAAAAAAOkoAAAAAAAAAAAAAAAA8L8"
				],
				[
					636,
					2,
					"left_delete",
					null,
					"AgAAAOooAAAAAAAA6igAAAAAAAABAAAAMOkoAAAAAAAA6SgAAAAAAAABAAAAMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrKAAAAAAAAOsoAAAAAAAAAAAAAAAA8L8"
				],
				[
					637,
					1,
					"insert",
					{
						"characters": "10"
					},
					"AgAAAOkoAAAAAAAA6igAAAAAAAAAAAAA6igAAAAAAADrKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpKAAAAAAAAOkoAAAAAAAAAAAAAAAA8L8"
				],
				[
					641,
					2,
					"left_delete",
					null,
					"AgAAADEoAAAAAAAAMSgAAAAAAAAGAAAAKyAxMDAwMCgAAAAAAAAwKAAAAAAAAAEAAAAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3KAAAAAAAADEoAAAAAAAAAAAAAAAA8L8"
				],
				[
					660,
					1,
					"insert",
					{
						"characters": "100000"
					},
					"BwAAAHQgAAAAAAAAdSAAAAAAAAAAAAAAdSAAAAAAAAB1IAAAAAAAAA4AAAB7QUxMT1dFRF9USU1FfXUgAAAAAAAAdiAAAAAAAAAAAAAAdiAAAAAAAAB3IAAAAAAAAAAAAAB3IAAAAAAAAHggAAAAAAAAAAAAAHggAAAAAAAAeSAAAAAAAAAAAAAAeSAAAAAAAAB6IAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCIAAAAAAAAHQgAAAAAAAAAAAAAAAA8L8"
				],
				[
					661,
					3,
					"left_delete",
					null,
					"AwAAAHkgAAAAAAAAeSAAAAAAAAABAAAAMHggAAAAAAAAeCAAAAAAAAABAAAAMHcgAAAAAAAAdyAAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6IAAAAAAAAHogAAAAAAAAAAAAAAAA8L8"
				],
				[
					662,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAHcgAAAAAAAAeCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3IAAAAAAAAHcgAAAAAAAAAAAAAAAA8L8"
				],
				[
					664,
					1,
					"left_delete",
					null,
					"AQAAAHggAAAAAAAAeCAAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5IAAAAAAAAHkgAAAAAAAAAAAAAAAA8L8"
				],
				[
					665,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAHggAAAAAAAAeSAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4IAAAAAAAAHggAAAAAAAAAAAAAAAA8L8"
				],
				[
					676,
					1,
					"left_delete",
					null,
					"AQAAAOMlAAAAAAAA4yUAAAAAAAA9AAAACgljb25zdCBkZWNvZGVkID0gand0LmRlY29kZSh0b2tlbikgYXMgand0Lkp3dFBheWxvYWQgfCBudWxsOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgJgAAAAAAAOMlAAAAAAAAAAAAAAAA8L8"
				],
				[
					679,
					7,
					"left_delete",
					null,
					"BwAAAKwmAAAAAAAArCYAAAAAAAABAAAAZKsmAAAAAAAAqyYAAAAAAAABAAAAZaomAAAAAAAAqiYAAAAAAAABAAAAZKkmAAAAAAAAqSYAAAAAAAABAAAAb6gmAAAAAAAAqCYAAAAAAAABAAAAY6cmAAAAAAAApyYAAAAAAAABAAAAZaYmAAAAAAAApiYAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtJgAAAAAAAK0mAAAAAAAAAAAAAAAA8L8"
				],
				[
					680,
					1,
					"insert",
					{
						"characters": "me"
					},
					"AgAAAKYmAAAAAAAApyYAAAAAAAAAAAAApyYAAAAAAACoJgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmJgAAAAAAAKYmAAAAAAAAAAAAAAAA8L8"
				],
				[
					681,
					1,
					"insert_completion",
					{
						"completion": "meta_object",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "meta_object"
					},
					"AgAAAKYmAAAAAAAApiYAAAAAAAACAAAAbWWmJgAAAAAAALEmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoJgAAAAAAAKgmAAAAAAAAAAAAAAAA8L8"
				],
				[
					683,
					7,
					"left_delete",
					null,
					"BwAAALwmAAAAAAAAvCYAAAAAAAABAAAAZLsmAAAAAAAAuyYAAAAAAAABAAAAZbomAAAAAAAAuiYAAAAAAAABAAAAZLkmAAAAAAAAuSYAAAAAAAABAAAAb7gmAAAAAAAAuCYAAAAAAAABAAAAY7cmAAAAAAAAtyYAAAAAAAABAAAAZbYmAAAAAAAAtiYAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9JgAAAAAAAL0mAAAAAAAAAAAAAAAA8L8"
				],
				[
					684,
					1,
					"insert",
					{
						"characters": "me"
					},
					"AgAAALYmAAAAAAAAtyYAAAAAAAAAAAAAtyYAAAAAAAC4JgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2JgAAAAAAALYmAAAAAAAAAAAAAAAA8L8"
				],
				[
					688,
					1,
					"insert_completion",
					{
						"completion": "meta_object",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "meta_object"
					},
					"AgAAALYmAAAAAAAAtiYAAAAAAAACAAAAbWW2JgAAAAAAAMEmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4JgAAAAAAALgmAAAAAAAAAAAAAAAA8L8"
				],
				[
					691,
					1,
					"insert",
					{
						"characters": "meta"
					},
					"BQAAAKonAAAAAAAAqycAAAAAAAAAAAAAqycAAAAAAACrJwAAAAAAAAcAAABkZWNvZGVkqycAAAAAAACsJwAAAAAAAAAAAACsJwAAAAAAAK0nAAAAAAAAAAAAAK0nAAAAAAAAricAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxJwAAAAAAAKonAAAAAAAAAAAAAAAA8L8"
				],
				[
					692,
					1,
					"insert_completion",
					{
						"completion": "meta_json",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "meta_json"
					},
					"AgAAAKonAAAAAAAAqicAAAAAAAAEAAAAbWV0YaonAAAAAAAAsycAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuJwAAAAAAAK4nAAAAAAAAAAAAAAAA8L8"
				],
				[
					693,
					4,
					"left_delete",
					null,
					"BAAAALInAAAAAAAAsicAAAAAAAABAAAAbrEnAAAAAAAAsScAAAAAAAABAAAAb7AnAAAAAAAAsCcAAAAAAAABAAAAc68nAAAAAAAArycAAAAAAAABAAAAag",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzJwAAAAAAALMnAAAAAAAAAAAAAAAA8L8"
				],
				[
					694,
					1,
					"insert",
					{
						"characters": "ob"
					},
					"AgAAAK8nAAAAAAAAsCcAAAAAAAAAAAAAsCcAAAAAAACxJwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvJwAAAAAAAK8nAAAAAAAAAAAAAAAA8L8"
				],
				[
					695,
					1,
					"insert_completion",
					{
						"completion": "meta_object",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "meta_object"
					},
					"AgAAAKonAAAAAAAAqicAAAAAAAAHAAAAbWV0YV9vYqonAAAAAAAAtScAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxJwAAAAAAALEnAAAAAAAAAAAAAAAA8L8"
				],
				[
					709,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAAF0nAAAAAAAAXicAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdJwAAAAAAAF0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					711,
					1,
					"left_delete",
					null,
					"AQAAAF0nAAAAAAAAXScAAAAAAAABAAAAUg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeJwAAAAAAAF4nAAAAAAAAAAAAAAAA8L8"
				],
				[
					717,
					1,
					"insert",
					{
						"characters": "\nson"
					},
					"BQAAACsnAAAAAAAALCcAAAAAAAAAAAAALCcAAAAAAAAtJwAAAAAAAAAAAAAtJwAAAAAAAC4nAAAAAAAAAAAAAC4nAAAAAAAALycAAAAAAAAAAAAALycAAAAAAAAwJwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArJwAAAAAAACsnAAAAAAAAAAAAAAAA8L8"
				],
				[
					718,
					3,
					"left_delete",
					null,
					"AwAAAC8nAAAAAAAALycAAAAAAAABAAAAbi4nAAAAAAAALicAAAAAAAABAAAAby0nAAAAAAAALScAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwJwAAAAAAADAnAAAAAAAAAAAAAAAA8L8"
				],
				[
					719,
					1,
					"insert",
					{
						"characters": "consol"
					},
					"BgAAAC0nAAAAAAAALicAAAAAAAAAAAAALicAAAAAAAAvJwAAAAAAAAAAAAAvJwAAAAAAADAnAAAAAAAAAAAAADAnAAAAAAAAMScAAAAAAAAAAAAAMScAAAAAAAAyJwAAAAAAAAAAAAAyJwAAAAAAADMnAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtJwAAAAAAAC0nAAAAAAAAAAAAAAAA8L8"
				],
				[
					720,
					1,
					"insert_completion",
					{
						"completion": "console",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "console"
					},
					"AgAAAC0nAAAAAAAALScAAAAAAAAGAAAAY29uc29sLScAAAAAAAA0JwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzJwAAAAAAADMnAAAAAAAAAAAAAAAA8L8"
				],
				[
					721,
					1,
					"insert",
					{
						"characters": ".deb"
					},
					"BAAAADQnAAAAAAAANScAAAAAAAAAAAAANScAAAAAAAA2JwAAAAAAAAAAAAA2JwAAAAAAADcnAAAAAAAAAAAAADcnAAAAAAAAOCcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA0JwAAAAAAADQnAAAAAAAAAAAAAAAA8L8"
				],
				[
					722,
					1,
					"insert_completion",
					{
						"completion": "debug",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "debug"
					},
					"AgAAADUnAAAAAAAANScAAAAAAAADAAAAZGViNScAAAAAAAA6JwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4JwAAAAAAADgnAAAAAAAAAAAAAAAA8L8"
				],
				[
					723,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAADonAAAAAAAAOycAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6JwAAAAAAADonAAAAAAAAAAAAAAAA8L8"
				],
				[
					724,
					1,
					"left_delete",
					null,
					"AQAAADonAAAAAAAAOicAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7JwAAAAAAADsnAAAAAAAAAAAAAAAA8L8"
				],
				[
					725,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADonAAAAAAAAPCcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6JwAAAAAAADonAAAAAAAAAAAAAAAA8L8"
				],
				[
					726,
					1,
					"insert",
					{
						"characters": "token"
					},
					"BQAAADsnAAAAAAAAPCcAAAAAAAAAAAAAPCcAAAAAAAA9JwAAAAAAAAAAAAA9JwAAAAAAAD4nAAAAAAAAAAAAAD4nAAAAAAAAPycAAAAAAAAAAAAAPycAAAAAAABAJwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7JwAAAAAAADsnAAAAAAAAAAAAAAAA8L8"
				],
				[
					728,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEEnAAAAAAAAQicAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBJwAAAAAAAEEnAAAAAAAAAAAAAAAA8L8"
				],
				[
					730,
					1,
					"insert",
					{
						"characters": "\"token:"
					},
					"BwAAADsnAAAAAAAAPCcAAAAAAAAAAAAAPCcAAAAAAAA9JwAAAAAAAAAAAAA9JwAAAAAAAD4nAAAAAAAAAAAAAD4nAAAAAAAAPycAAAAAAAAAAAAAPycAAAAAAABAJwAAAAAAAAAAAABAJwAAAAAAAEEnAAAAAAAAAAAAAEEnAAAAAAAAQicAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7JwAAAAAAADsnAAAAAAAAAAAAAAAA8L8"
				],
				[
					731,
					1,
					"insert",
					{
						"characters": "\"+"
					},
					"AgAAAEInAAAAAAAAQycAAAAAAAAAAAAAQycAAAAAAABEJwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCJwAAAAAAAEInAAAAAAAAAAAAAAAA8L8"
				],
				[
					732,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEJwAAAAAAAEQnAAAAAAAAAAAAAAAA8L8"
				],
				[
					744,
					2,
					"left_delete",
					null,
					"AgAAAHcgAAAAAAAAdyAAAAAAAAABAAAAMHYgAAAAAAAAdiAAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4IAAAAAAAAHggAAAAAAAAAAAAAAAA8L8"
				],
				[
					752,
					1,
					"left_delete",
					null,
					"AQAAAHMgAAAAAAAAcyAAAAAAAAABAAAAJA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB0IAAAAAAAAHQgAAAAAAAAAAAAAAAA8L8"
				],
				[
					756,
					1,
					"left_delete",
					null,
					"AQAAAEQpAAAAAAAARCkAAAAAAAANAAAAZXhpc3RpbmdVc2VyLg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRKQAAAAAAAEQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAEQpAAAAAAAARSkAAAAAAAAAAAAARSkAAAAAAABGKQAAAAAAAAAAAABGKQAAAAAAAEcpAAAAAAAAAAAAAEcpAAAAAAAASCkAAAAAAAAAAAAASCkAAAAAAABJKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEKQAAAAAAAEQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					762,
					5,
					"left_delete",
					null,
					"BQAAAEgpAAAAAAAASCkAAAAAAAABAAAAdEcpAAAAAAAARykAAAAAAAABAAAAc0YpAAAAAAAARikAAAAAAAABAAAAbkUpAAAAAAAARSkAAAAAAAABAAAAb0QpAAAAAAAARCkAAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJKQAAAAAAAEkpAAAAAAAAAAAAAAAA8L8"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": "\neci"
					},
					"BQAAAKcpAAAAAAAAqCkAAAAAAAAAAAAAqCkAAAAAAACpKQAAAAAAAAAAAACpKQAAAAAAAKopAAAAAAAAAAAAAKopAAAAAAAAqykAAAAAAAAAAAAAqykAAAAAAACsKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnKQAAAAAAAKcpAAAAAAAAAAAAAAAA8L8"
				],
				[
					768,
					2,
					"left_delete",
					null,
					"AgAAAKspAAAAAAAAqykAAAAAAAABAAAAaaopAAAAAAAAqikAAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsKQAAAAAAAKwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					769,
					1,
					"insert",
					{
						"characters": "xi"
					},
					"AgAAAKopAAAAAAAAqykAAAAAAAAAAAAAqykAAAAAAACsKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqKQAAAAAAAKopAAAAAAAAAAAAAAAA8L8"
				],
				[
					770,
					1,
					"insert_completion",
					{
						"completion": "existingUser",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "existingUser"
					},
					"AgAAAKkpAAAAAAAAqSkAAAAAAAADAAAAZXhpqSkAAAAAAAC1KQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsKQAAAAAAAKwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					771,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALUpAAAAAAAAtikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1KQAAAAAAALUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					772,
					1,
					"left_delete",
					null,
					"AQAAALUpAAAAAAAAtSkAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2KQAAAAAAALYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					773,
					1,
					"insert",
					{
						"characters": ".t"
					},
					"AgAAALUpAAAAAAAAtikAAAAAAAAAAAAAtikAAAAAAAC3KQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1KQAAAAAAALUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					774,
					1,
					"insert_completion",
					{
						"completion": "token",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "token"
					},
					"AgAAALYpAAAAAAAAtikAAAAAAAABAAAAdLYpAAAAAAAAuykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3KQAAAAAAALcpAAAAAAAAAAAAAAAA8L8"
				],
				[
					775,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAALspAAAAAAAAvCkAAAAAAAAAAAAAvCkAAAAAAAC9KQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7KQAAAAAAALspAAAAAAAAAAAAAAAA8L8"
				],
				[
					776,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL0pAAAAAAAAvikAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9KQAAAAAAAL0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					777,
					1,
					"insert_completion",
					{
						"completion": "token",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "token"
					},
					"AQAAAL4pAAAAAAAAwykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+KQAAAAAAAL4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					778,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMMpAAAAAAAAxCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDKQAAAAAAAMMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					782,
					13,
					"left_delete",
					null,
					"DQAAAO8pAAAAAAAA7ykAAAAAAAABAAAALu4pAAAAAAAA7ikAAAAAAAABAAAAcu0pAAAAAAAA7SkAAAAAAAABAAAAZewpAAAAAAAA7CkAAAAAAAABAAAAc+spAAAAAAAA6ykAAAAAAAABAAAAVeopAAAAAAAA6ikAAAAAAAABAAAAZ+kpAAAAAAAA6SkAAAAAAAABAAAAbugpAAAAAAAA6CkAAAAAAAABAAAAaecpAAAAAAAA5ykAAAAAAAABAAAAdOYpAAAAAAAA5ikAAAAAAAABAAAAc+UpAAAAAAAA5SkAAAAAAAABAAAAaeQpAAAAAAAA5CkAAAAAAAABAAAAeOMpAAAAAAAA4ykAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwKQAAAAAAAPApAAAAAAAAAAAAAAAA8L8"
				],
				[
					791,
					2,
					"left_delete",
					null,
					"AgAAAMQoAAAAAAAAxCgAAAAAAAAEAAAALSAxMMMoAAAAAAAAwygAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIKAAAAAAAAMQoAAAAAAAAAAAAAAAA8L8"
				],
				[
					798,
					1,
					"insert",
					{
						"characters": "/2"
					},
					"AgAAAMMoAAAAAAAAxCgAAAAAAAAAAAAAxCgAAAAAAADFKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDKAAAAAAAAMMoAAAAAAAAAAAAAAAA8L8"
				],
				[
					799,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFKAAAAAAAAMUoAAAAAAAAAAAAAAAA8L8"
				],
				[
					808,
					1,
					"insert",
					{
						"characters": "exp"
					},
					"BAAAAKMoAAAAAAAApCgAAAAAAAAAAAAApCgAAAAAAACkKAAAAAAAABIAAABjdXJyZW50VGltZSAtIGV4cCCkKAAAAAAAAKUoAAAAAAAAAAAAAKUoAAAAAAAApigAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1KAAAAAAAAKMoAAAAAAAAAAAAAAAA8L8"
				],
				[
					809,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAAKYoAAAAAAAApygAAAAAAAAAAAAApygAAAAAAACoKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmKAAAAAAAAKYoAAAAAAAAAAAAAAAA8L8"
				],
				[
					810,
					1,
					"insert",
					{
						"characters": " cur"
					},
					"BAAAAKgoAAAAAAAAqSgAAAAAAAAAAAAAqSgAAAAAAACqKAAAAAAAAAAAAACqKAAAAAAAAKsoAAAAAAAAAAAAAKsoAAAAAAAArCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoKAAAAAAAAKgoAAAAAAAAAAAAAAAA8L8"
				],
				[
					811,
					1,
					"insert_completion",
					{
						"completion": "currentTime",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "currentTime"
					},
					"AgAAAKkoAAAAAAAAqSgAAAAAAAADAAAAY3VyqSgAAAAAAAC0KAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsKAAAAAAAAKwoAAAAAAAAAAAAAAAA8L8"
				],
				[
					812,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALQoAAAAAAAAtSgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0KAAAAAAAALQoAAAAAAAAAAAAAAAA8L8"
				],
				[
					820,
					3,
					"left_delete",
					null,
					"AwAAAMYoAAAAAAAAxigAAAAAAAABAAAAMsUoAAAAAAAAxSgAAAAAAAABAAAAIMQoAAAAAAAAxCgAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHKAAAAAAAAMcoAAAAAAAAAAAAAAAA8L8"
				],
				[
					821,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAMQoAAAAAAAAxSgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEKAAAAAAAAMQoAAAAAAAAAAAAAAAA8L8"
				],
				[
					822,
					1,
					"insert",
					{
						"characters": " 10"
					},
					"AwAAAMUoAAAAAAAAxigAAAAAAAAAAAAAxigAAAAAAADHKAAAAAAAAAAAAADHKAAAAAAAAMgoAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFKAAAAAAAAMUoAAAAAAAAAAAAAAAA8L8"
				],
				[
					836,
					5,
					"left_delete",
					null,
					"BQAAAMcoAAAAAAAAxygAAAAAAAABAAAAMMYoAAAAAAAAxigAAAAAAAABAAAAMcUoAAAAAAAAxSgAAAAAAAABAAAAIMQoAAAAAAAAxCgAAAAAAAABAAAALcMoAAAAAAAAwygAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIKAAAAAAAAMgoAAAAAAAAAAAAAAAA8L8"
				],
				[
					840,
					2,
					"left_delete",
					null,
					"AgAAANonAAAAAAAA2icAAAAAAAAiAAAACgljb25zb2xlLmRlYnVnKGN1cnJlbnRUaW1lLCBleHApO9knAAAAAAAA2ScAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8JwAAAAAAANonAAAAAAAAAAAAAAAA8L8"
				],
				[
					843,
					1,
					"insert",
					{
						"characters": "/2"
					},
					"AgAAAKAoAAAAAAAAoSgAAAAAAAAAAAAAoSgAAAAAAACiKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgKAAAAAAAAKAoAAAAAAAAAAAAAAAA8L8"
				],
				[
					844,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiKAAAAAAAAKIoAAAAAAAAAAAAAAAA8L8"
				],
				[
					849,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AgAAAKEoAAAAAAAAoigAAAAAAAAAAAAAoigAAAAAAACiKAAAAAAAAAMAAAAvIDI",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkKAAAAAAAAKEoAAAAAAAAAAAAAAAA8L8"
				],
				[
					850,
					1,
					"insert",
					{
						"characters": " 10"
					},
					"AwAAAKIoAAAAAAAAoygAAAAAAAAAAAAAoygAAAAAAACkKAAAAAAAAAAAAACkKAAAAAAAAKUoAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiKAAAAAAAAKIoAAAAAAAAAAAAAAAA8L8"
				],
				[
					851,
					2,
					"left_delete",
					null,
					"AgAAAKQoAAAAAAAApCgAAAAAAAABAAAAMKMoAAAAAAAAoygAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClKAAAAAAAAKUoAAAAAAAAAAAAAAAA8L8"
				],
				[
					852,
					1,
					"insert",
					{
						"characters": "30"
					},
					"AgAAAKMoAAAAAAAApCgAAAAAAAAAAAAApCgAAAAAAAClKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjKAAAAAAAAKMoAAAAAAAAAAAAAAAA8L8"
				],
				[
					854,
					2,
					"left_delete",
					null,
					"AgAAAKQoAAAAAAAApCgAAAAAAAABAAAAMKMoAAAAAAAAoygAAAAAAAABAAAAMw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClKAAAAAAAAKUoAAAAAAAAAAAAAAAA8L8"
				],
				[
					855,
					1,
					"insert",
					{
						"characters": "60"
					},
					"AgAAAKMoAAAAAAAApCgAAAAAAAAAAAAApCgAAAAAAAClKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjKAAAAAAAAKMoAAAAAAAAAAAAAAAA8L8"
				],
				[
					861,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAAKMpAAAAAAAApCkAAAAAAAAAAAAApCkAAAAAAAClKQAAAAAAAAAAAAClKQAAAAAAAKYpAAAAAAAAAAAAAKYpAAAAAAAApykAAAAAAAAAAAAApykAAAAAAACoKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjKQAAAAAAAKMpAAAAAAAAAAAAAAAA8L8"
				],
				[
					862,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKgpAAAAAAAAqSkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoKQAAAAAAAKgpAAAAAAAAAAAAAAAA8L8"
				],
				[
					866,
					1,
					"insert",
					{
						"characters": "\nconsole"
					},
					"CQAAAB8pAAAAAAAAICkAAAAAAAAAAAAAICkAAAAAAAAhKQAAAAAAAAAAAAAhKQAAAAAAACIpAAAAAAAAAAAAACIpAAAAAAAAIykAAAAAAAAAAAAAIykAAAAAAAAkKQAAAAAAAAAAAAAkKQAAAAAAACUpAAAAAAAAAAAAACUpAAAAAAAAJikAAAAAAAAAAAAAJikAAAAAAAAnKQAAAAAAAAAAAAAnKQAAAAAAACgpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfKQAAAAAAAB8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					867,
					1,
					"insert",
					{
						"characters": ".be"
					},
					"AwAAACgpAAAAAAAAKSkAAAAAAAAAAAAAKSkAAAAAAAAqKQAAAAAAAAAAAAAqKQAAAAAAACspAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoKQAAAAAAACgpAAAAAAAAAAAAAAAA8L8"
				],
				[
					868,
					2,
					"left_delete",
					null,
					"AgAAACopAAAAAAAAKikAAAAAAAABAAAAZSkpAAAAAAAAKSkAAAAAAAABAAAAYg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArKQAAAAAAACspAAAAAAAAAAAAAAAA8L8"
				],
				[
					869,
					1,
					"insert",
					{
						"characters": "de"
					},
					"AgAAACkpAAAAAAAAKikAAAAAAAAAAAAAKikAAAAAAAArKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApKQAAAAAAACkpAAAAAAAAAAAAAAAA8L8"
				],
				[
					870,
					1,
					"insert_completion",
					{
						"completion": "debug",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "debug"
					},
					"AgAAACkpAAAAAAAAKSkAAAAAAAACAAAAZGUpKQAAAAAAAC4pAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArKQAAAAAAACspAAAAAAAAAAAAAAAA8L8"
				],
				[
					871,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC4pAAAAAAAAMCkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuKQAAAAAAAC4pAAAAAAAAAAAAAAAA8L8"
				],
				[
					872,
					1,
					"insert",
					{
						"characters": "ex"
					},
					"AgAAAC8pAAAAAAAAMCkAAAAAAAAAAAAAMCkAAAAAAAAxKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvKQAAAAAAAC8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					873,
					1,
					"insert_completion",
					{
						"completion": "existingUser",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "existingUser"
					},
					"AgAAAC8pAAAAAAAALykAAAAAAAACAAAAZXgvKQAAAAAAADspAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxKQAAAAAAADEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					874,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7KQAAAAAAADspAAAAAAAAAAAAAAAA8L8"
				],
				[
					877,
					1,
					"left_delete",
					null,
					"AQAAAKMoAAAAAAAAoygAAAAAAAABAAAANg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkKAAAAAAAAKQoAAAAAAAAAAAAAAAA8L8"
				],
				[
					878,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAKMoAAAAAAAApCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjKAAAAAAAAKMoAAAAAAAAAAAAAAAA8L8"
				],
				[
					886,
					1,
					"cut",
					null,
					"AQAAACEpAAAAAAAAISkAAAAAAAAcAAAAY29uc29sZS5kZWJ1ZyhleGlzdGluZ1VzZXIpOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9KQAAAAAAACEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					887,
					2,
					"left_delete",
					null,
					"AgAAACApAAAAAAAAICkAAAAAAAABAAAACR8pAAAAAAAAHykAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhKQAAAAAAACEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					890,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL0pAAAAAAAAvikAAAAAAAAAAAAAvikAAAAAAAC/KQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9KQAAAAAAAL0pAAAAAAAAAAAAAAAA8L8"
				],
				[
					891,
					1,
					"paste",
					null,
					"AQAAAL8pAAAAAAAA2ykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/KQAAAAAAAL8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					896,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANopAAAAAAAA2ykAAAAAAAAAAAAA2ykAAAAAAADcKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaKQAAAAAAANopAAAAAAAAAAAAAAAA8L8"
				],
				[
					897,
					2,
					"left_delete",
					null,
					"AgAAANspAAAAAAAA2ykAAAAAAAABAAAACdopAAAAAAAA2ikAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcKQAAAAAAANwpAAAAAAAAAAAAAAAA8L8"
				],
				[
					899,
					1,
					"insert",
					{
						"characters": "\nco"
					},
					"BAAAANspAAAAAAAA3CkAAAAAAAAAAAAA3CkAAAAAAADdKQAAAAAAAAAAAADdKQAAAAAAAN4pAAAAAAAAAAAAAN4pAAAAAAAA3ykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbKQAAAAAAANspAAAAAAAAAAAAAAAA8L8"
				],
				[
					900,
					1,
					"insert",
					{
						"characters": "nso"
					},
					"AwAAAN8pAAAAAAAA4CkAAAAAAAAAAAAA4CkAAAAAAADhKQAAAAAAAAAAAADhKQAAAAAAAOIpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfKQAAAAAAAN8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					901,
					1,
					"insert_completion",
					{
						"completion": "console",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "console"
					},
					"AgAAAN0pAAAAAAAA3SkAAAAAAAAFAAAAY29uc2/dKQAAAAAAAOQpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiKQAAAAAAAOIpAAAAAAAAAAAAAAAA8L8"
				],
				[
					902,
					1,
					"insert",
					{
						"characters": ".de"
					},
					"AwAAAOQpAAAAAAAA5SkAAAAAAAAAAAAA5SkAAAAAAADmKQAAAAAAAAAAAADmKQAAAAAAAOcpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkKQAAAAAAAOQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					903,
					1,
					"insert_completion",
					{
						"completion": "debug",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "debug"
					},
					"AgAAAOUpAAAAAAAA5SkAAAAAAAACAAAAZGXlKQAAAAAAAOopAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnKQAAAAAAAOcpAAAAAAAAAAAAAAAA8L8"
				],
				[
					904,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOopAAAAAAAA7CkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqKQAAAAAAAOopAAAAAAAAAAAAAAAA8L8"
				],
				[
					905,
					1,
					"insert",
					{
						"characters": "toke"
					},
					"BAAAAOspAAAAAAAA7CkAAAAAAAAAAAAA7CkAAAAAAADtKQAAAAAAAAAAAADtKQAAAAAAAO4pAAAAAAAAAAAAAO4pAAAAAAAA7ykAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrKQAAAAAAAOspAAAAAAAAAAAAAAAA8L8"
				],
				[
					906,
					1,
					"insert_completion",
					{
						"completion": "token",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "token"
					},
					"AgAAAOspAAAAAAAA6ykAAAAAAAAEAAAAdG9rZespAAAAAAAA8CkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvKQAAAAAAAO8pAAAAAAAAAAAAAAAA8L8"
				],
				[
					907,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"AgAAAAAAAAAAAAAAAyoAAAAAAAADKgAAaW1wb3J0IHsgdmVjc3RvcmUsIFVzZXIgfSBmcm9tICIuLi8uLi9saWIvZGIiOwppbXBvcnQgeyBnZW5lcmF0ZVRleHRFbWJlZGRpbmcgfSBmcm9tICIuLi8uLi9saWIvbW9kZWwiOwppbXBvcnQgYmNyeXB0IGZyb20gImJjcnlwdCI7CmltcG9ydCBqd3QgZnJvbSAianNvbndlYnRva2VuIjsKCmNvbnN0IHJldHJpZXZlcl9saW1pdCA9IDU7CmNvbnN0IEFMTE9XRURfVElNRSA9IDM2MDA7IC8vSW4gc2Vjb25kcwpjb25zdCBTRUNSRVRfS0VZID0gcHJvY2Vzcy5lbnYuU0VDUkVUX0tFWTsKCmludGVyZmFjZSBBdXRoQ3JlZGVudGlhbHMgewoJZW1haWw6IHN0cmluZzsKCXBhc3N3b3JkOiBzdHJpbmc7Cn0KCmludGVyZmFjZSBBcGlNZXRhT2JqZWN0IHsKCWNyZWRlbnRpYWxzPzogQXV0aENyZWRlbnRpYWxzOwoJdG9rZW4/OiBzdHJpbmc7CgljaHVua19zb3VyY2U/OiBzdHJpbmc7Cn0KCi8vLyBUT0RPKExvdyBQcmlvcml0eSk6IFN0b3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIGluZ2VzdGluZyBkYXRhIGluIHRvIHZlY3RvciBzdG9yZS4KaW50ZXJmYWNlIFZlY3Rvck1ldGFEYXRhIHsKCWNodW5rX2F1dGhvcjogc3RyaW5nOwp9CgpmdW5jdGlvbiB2YWxpZGF0ZU1ldGFPYmplY3QodDogQXBpTWV0YU9iamVjdCk6IGJvb2xlYW4gewoJaWYgKHQuY3JlZGVudGlhbHMpCgkJcmV0dXJuIEJvb2xlYW4odC5jcmVkZW50aWFscy5lbWFpbCAmJiB0LmNyZWRlbnRpYWxzLnBhc3N3b3JkKTsKCWVsc2UgcmV0dXJuIEJvb2xlYW4odC50b2tlbik7Cn0KCmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcTogUmVxdWVzdCkgewoJY29uc3QgYm9keSA9IGF3YWl0IHJlcS5qc29uKCk7CgoJY29uc3QgcXVlcnlfdGV4dDogc3RyaW5nID0gYm9keS50ZXh0OwoJY29uc3QgYXBpX21ldGhvZDogc3RyaW5nID0gYm9keS5tZXRob2Q7Cgljb25zdCBtZXRhOiBzdHJpbmcgPSBib2R5Lm1ldGE7CglsZXQgbWV0YV9vYmplY3Q6IEFwaU1ldGFPYmplY3QgPSBKU09OLnBhcnNlKG1ldGEpOwoKCWlmICghdmFsaWRhdGVNZXRhT2JqZWN0KG1ldGFfb2JqZWN0KSkgewoJCXJldHVybiBuZXcgUmVzcG9uc2UoCgkJCUpTT04uc3RyaW5naWZ5KHsgZXJyb3I6IGZhbHNlLCBtZXNzYWdlOiAiSW52YWxpZCBtZXRhIG9iamVjdC4iIH0pLAoJCQl7IHN0YXR1czogNDAwLCBzdGF0dXNUZXh0OiAiQmFkIFJlcXVlc3QiIH0sCgkJKTsKCX0KCgltZXRhX29iamVjdC50b2tlbiA9IG1ldGFfb2JqZWN0LnRva2VuIHx8IE5VTExfVE9LRU47CgoJdHJ5IHsKCQljb25zdCBwZXJtaXNzaW9ucyA9IGF3YWl0IHZhbGlkYXRlVXNlclRva2VuKG1ldGFfb2JqZWN0LnRva2VuKTsKCgkJLy8gUGFzcyB0aGlzIHRvIGFsbCByZXBvbnNlcy4KCQljb25zdCByZWZyZXNoZWRfdG9rZW4gPSB1bmRlZmluZWQ7CgoJCWlmIChwZXJtaXNzaW9ucy5hdXRvX3JlZnJlc2gpIHsKCQkJLy8gVG9rZW4gcmVmcmVzaCBsb2dpYyBoZXJlLi4uCgkJCS8vIFRPRE86IElmIHRoaXMgcmVxdWVzdCBoYXMgYmVlbiBtYWRlICp3aXRoaW4qIHNvbWUgZnJhY3Rpb24gb2YgYEFMTE9XRURfVElNRWAgc2luY2UgKmdlbmVyYXRpb24qIG9mIHRva2VuLSBjcmVhdGUgYSBuZXcgdG9rZW4gZm9yIGBBTExPV0VEX1RJTUVgIGZyb20gbm93LgoJCQkvLyBDb25zaWRlciBtYWtpbmcgdGhpcyB3aW5kb3cgfjE1IG1pbnMuCgkJfQoKCQlzd2l0Y2ggKGFwaV9tZXRob2QpIHsKCQkJY2FzZSAiaW5nZXN0IjoKCQkJCWlmICghcGVybWlzc2lvbnMuYWxsb3dfdXNlcl9jYWxscykKCQkJCQlyZXR1cm4gbmV3IFJlc3BvbnNlKAoJCQkJCQlKU09OLnN0cmluZ2lmeSh7CgkJCQkJCQllcnJvcjogdHJ1ZSwKCQkJCQkJCW1lc3NhZ2U6ICJJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMuIiwKCQkJCQkJfSksCgkJCQkJCXsgc3RhdHVzOiA0MDEsIHN0YXR1c1RleHQ6ICJEZW5pZWQuIiB9LAoJCQkJCSk7CgoJCQkJLy8gQWRkIHRleHQgZW1iZWRkaW5ncyBpbnRvIHRoZSB2ZWN0b3Igc3RvcmUuCgkJCQkvLyBIZXJlICdtZXRhJyBpcyBzb21lIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzb3VyY2Ugb2YgdGhlIHRleHQgYmVpbmcgaW5nZXN0ZWQuCgkJCQlhd2FpdCBpbnNlcnRUZXh0SW50b1N0b3JlKAoJCQkJCXF1ZXJ5X3RleHQsCgkJCQkJbWV0YV9vYmplY3QuY2h1bmtfc291cmNlIHx8ICJVc2VyIHVwbG9hZGVkIGNvbnRleHQiLAoJCQkJKTsKCQkJCXJldHVybiBuZXcgUmVzcG9uc2UoCgkJCQkJSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogZmFsc2UsIHJlZnJlc2g6IHBlcm1pc3Npb25zLmF1dG9fcmVmcmVzaCB9KSwKCQkJCSk7CgoJCQljYXNlICJyZXRyaWV2ZSI6CgkJCQlpZiAoIXBlcm1pc3Npb25zLmFsbG93X3VzZXJfY2FsbHMpCgkJCQkJcmV0dXJuIG5ldyBSZXNwb25zZSgKCQkJCQkJSlNPTi5zdHJpbmdpZnkoewoJCQkJCQkJZXJyb3I6IHRydWUsCgkJCQkJCQltZXNzYWdlOiAiSW5zdWZmaWNpZW50IHBlcm1pc3Npb25zLiIsCgkJCQkJCX0pLAoJCQkJCQl7IHN0YXR1czogNDAxLCBzdGF0dXNUZXh0OiAiRGVuaWVkLiIgfSwKCQkJCQkpOwoKCQkJCS8vIFJldHJpZXZlIGRvY3VtZW50cyBbYXJyYXkgb2Ygc3RyaW5ncyByYW5rZWQgYWNjb3JkaW5nIHRvIHNpbWlsYXJpdHkgc2NvcmVdLiBEbyBub3QgcmV0dXJuIGRvY3VtZW50cyB0aGF0IGRvbid0IGJlbG9uZyB0byB0aGUgdXNlci4KCQkJCWNvbnN0IHJlbGV2YW50X2RvY3VtZW50cyA9IGF3YWl0IHF1ZXJ5VmVjdG9yU3RvcmUocXVlcnlfdGV4dCk7CgkJCQlyZXR1cm4gbmV3IFJlc3BvbnNlKAoJCQkJCUpTT04uc3RyaW5naWZ5KHsKCQkJCQkJZXJyb3I6IGZhbHNlLAoJCQkJCQlkb2N1bWVudHM6IHJlbGV2YW50X2RvY3VtZW50cywKCQkJCQkJcmVmcmVzaDogcGVybWlzc2lvbnMuYXV0b19yZWZyZXNoLAoJCQkJCX0pLAoJCQkJKTsKCgkJCWNhc2UgImluZGV4IjoKCQkJCWlmICghcGVybWlzc2lvbnMuYWxsb3dfaW5kZXgpCgkJCQkJcmV0dXJuIG5ldyBSZXNwb25zZSgKCQkJCQkJSlNPTi5zdHJpbmdpZnkoewoJCQkJCQkJZXJyb3I6IHRydWUsCgkJCQkJCQltZXNzYWdlOiAiSW5zdWZmaWNpZW50IHBlcm1pc3Npb25zLiIsCgkJCQkJCX0pLAoJCQkJCQl7IHN0YXR1czogNDAxLCBzdGF0dXNUZXh0OiAiRGVuaWVkLiIgfSwKCQkJCQkpOwoKCQkJCS8vIFJlLWNyZWF0ZSB0aGUgdmVjdG9yIHNlYXJjaCBpbmRleCBvbiBNb25nb0RCLgoJCQkJLy8gTG9nIHVzZXIgcmVxdWVzdCB0byByZS1jcmVhdGUgdmVjdG9yIHNlYXJjaCBpbmRleC4KCQkJCS8vIEhlcmUgJ21ldGEnIGlzIHRoZSBjYXVzZSBmb3IgcmVxdWVzdCB0byByZS1jcmVhdGUgdmVjdG9yIHNlYXJjaCBpbmRleC4KCQkJCS8vIFJlamVjdCBpcyB1c2VyIGlzICdhbm9uJy4KCQkJCWF3YWl0IGNyZWF0ZVZlY3RvclNlYXJjaEluZGV4KCk7CgkJCQlyZXR1cm4gbmV3IFJlc3BvbnNlKAoJCQkJCUpTT04uc3RyaW5naWZ5KHsgZXJyb3I6IGZhbHNlLCByZWZyZXNoOiBwZXJtaXNzaW9ucy5hdXRvX3JlZnJlc2ggfSksCgkJCQkpOwoKCQkJY2FzZSAiY3JlYXRlVXNlciI6CgkJCQlpZiAoIXBlcm1pc3Npb25zLmFsbG93X2NyZWF0ZSkKCQkJCQlyZXR1cm4gbmV3IFJlc3BvbnNlKAoJCQkJCQlKU09OLnN0cmluZ2lmeSh7CgkJCQkJCQllcnJvcjogdHJ1ZSwKCQkJCQkJCW1lc3NhZ2U6ICJJbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMuIiwKCQkJCQkJfSksCgkJCQkJCXsgc3RhdHVzOiA0MDEsIHN0YXR1c1RleHQ6ICJEZW5pZWQuIiB9LAoJCQkJCSk7CgoJCQkJLy8gQ3JlYXRlIGEgdXNlciBmcm9tIHRoZSBwcm92aWRlZCBjcmVkZW50aWFscy4KCQkJCS8vIFJlamVjdCBpZiBjcmVkZW50aWFscyBhcmUgbWlzc2luZy4KCQkJCWlmICghbWV0YV9vYmplY3QuY3JlZGVudGlhbHMpCgkJCQkJcmV0dXJuIG5ldyBSZXNwb25zZSgKCQkJCQkJSlNPTi5zdHJpbmdpZnkoewoJCQkJCQkJZXJyb3I6IHRydWUsCgkJCQkJCQltZXNzYWdlOiAiSW52YWxpZCB1c2VyIGNyZWF0aW9uIHJlcXVlc3QuIE1pc3NpbmcgY3JlZGllbnRpYWxzLiIsCgkJCQkJCX0pLAoJCQkJCQl7IHN0YXR1czogNDAwIH0sCgkJCQkJKTsKCQkJCWNvbnN0IG5ld190b2tlbiA9IGF3YWl0IGNyZWF0ZVVzZXIobWV0YV9vYmplY3QuY3JlZGVudGlhbHMpOwoJCQkJcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeSh7IGVycm9yOiBmYWxzZSwgdG9rZW46IG5ld190b2tlbiB9KSk7CgoJCQljYXNlICJhdXRoZW50aWNhdGVVc2VyIjoKCQkJCS8vLyBBdXRoZW50aWNhdGUgdXNlci4gQWx3YXlzIGF2YWlsYWJsZS4KCQkJCS8vLyBSZWplY3QgaWYgY3JlZGVudGlhbHMgYXJlIG1pc2lzbmcuCgkJCQlpZiAoIW1ldGFfb2JqZWN0LmNyZWRlbnRpYWxzKQoJCQkJCXJldHVybiBuZXcgUmVzcG9uc2UoCgkJCQkJCUpTT04uc3RyaW5naWZ5KHsKCQkJCQkJCWVycm9yOiB0cnVlLAoJCQkJCQkJbWVzc2FnZTogIkludmFsaWQgYXV0aGVudGljYXRpb24gcmVxdWVzdC4gTWlzc2luZyBjcmVkZW50aWFscy4iLAoJCQkJCQl9KSwKCQkJCQkJeyBzdGF0dXM6IDQwMCB9LAoJCQkJCSk7CgkJCQljb25zdCB0b2tlbiA9IGF3YWl0IGF1dGhlbnRpY2F0ZVVzZXIobWV0YV9vYmplY3QuY3JlZGVudGlhbHMpOwoJCQkJcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeSh7IGVycm9yOiBmYWxzZSwgdG9rZW46IHRva2VuIH0pKTsKCgkJCWNhc2UgInZlcmlmeSI6CgkJCQkvLy8gVmVyaWZ5IHRoYXQgdGhlIHRva2VuIGhhcyB1c2VyIHBlcm1pc3Npb25zLgoJCQkJLy8vIE90aGVyd2lzZQoJCQkJaWYgKCFwZXJtaXNzaW9ucy5hbGxvd191c2VyX2NhbGxzKQoJCQkJCXJldHVybiBuZXcgUmVzcG9uc2UoCgkJCQkJCUpTT04uc3RyaW5naWZ5KHsKCQkJCQkJCWVycm9yOiB0cnVlLAoJCQkJCQkJbWVzc2FnZTogIk5vdCBhIHVzZXIuLiIsCgkJCQkJCX0pLAoJCQkJCQl7IHN0YXR1czogNDQ5IH0sCgkJCQkJKTsKCQkJCXJldHVybiBuZXcgUmVzcG9uc2UoCgkJCQkJSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogZmFsc2UsIHJlZnJlc2g6IHBlcm1pc3Npb25zLmF1dG9fcmVmcmVzaCB9KSwKCQkJCSk7CgoJCQljYXNlICJyZWZyZXNoIjoKCQkJCS8vY2hlY2sgaWYgdGhlIHRva2VuIGhhcyBhdXRvX3JlZnJlc2ggZW5hYmxlZAoJCQkJaWYgKCFwZXJtaXNzaW9ucy5hdXRvX3JlZnJlc2gpCgkJCQkJcmV0dXJuIG5ldyBSZXNwb25zZSgKCQkJCQkJSlNPTi5zdHJpbmdpZnkoewoJCQkJCQkJZXJyb3I6IHRydWUsCgkJCQkJCQltZXNzYWdlOiAiQmFkIFJlcXVlc3QiLAoJCQkJCQl9KSwKCQkJCQkJeyBzdGF0dXM6IDQwMCB9LAoJCQkJCSk7CgkJCQljb25zdCByZWZyZXNoZWRfdG9rZW4gPSBhd2FpdCByZWZyZXNoVG9rZW4obWV0YV9vYmplY3QudG9rZW4pOwoJCQkJcmV0dXJuIG5ldyBSZXNwb25zZSgKCQkJCQlKU09OLnN0cmluZ2lmeSh7IGVycm9yOiBmYWxzZSwgdG9rZW46IHJlZnJlc2hlZF90b2tlbiB9KSwKCQkJCQl7IHN0YXR1czogMjAwIH0sCgkJCQkpOwoKCQkJZGVmYXVsdDoKCQkJCXJldHVybiBuZXcgUmVzcG9uc2UoCgkJCQkJSlNPTi5zdHJpbmdpZnkoeyBlcnJvcjogdHJ1ZSwgbWVzc2FnZTogIkludmFsaWQgQVBJIG1ldGhvZCIgfSksCgkJCQkJeyBzdGF0dXM6IDQwMCB9LAoJCQkJKTsKCQl9Cgl9IGNhdGNoIChlcnJvcikgewoJCWxldCBlcnJvck1lc3NhZ2U6IHN0cmluZzsKCgkJLy8gSnVzdCBKUyB0aGluZ3MuCgkJaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIGVycm9yTWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7CgkJZWxzZSBlcnJvck1lc3NhZ2UgPSBTdHJpbmcoZXJyb3IpOwoKCQkvLyBMb2cgdGhpcyBmb3IgdXMgdG9vLi4KCQljb25zb2xlLmRlYnVnKAoJCQlgQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgaGFuZGxpbmcgbWV0aG9kICcke2FwaV9tZXRob2R9Jy5cbiR7ZXJyb3JNZXNzYWdlfVxuRVJSOiAke2Vycm9yfVxuYCwKCQkpOwoKCQlyZXR1cm4gbmV3IFJlc3BvbnNlKAoJCQlKU09OLnN0cmluZ2lmeSh7IGVycm9yOiB0cnVlLCBtZXNzYWdlOiBlcnJvck1lc3NhZ2UgfSksCgkJCXsgc3RhdHVzOiA1MDAsIHN0YXR1c1RleHQ6ICJTZXJ2ZXIgZXJyb3IuIiB9LAoJCSk7Cgl9Cn0KCi8qKgogKiBSZXRyaWV2ZSBkb2N1bWVudHMgZnJvbQogKiAqLwphc3luYyBmdW5jdGlvbiBxdWVyeVZlY3RvclN0b3JlKHF1ZXJ5X3RleHQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHsKCWNvbnN0IGVtYmVkZGluZ3MgPSBhd2FpdCBnZW5lcmF0ZVRleHRFbWJlZGRpbmcocXVlcnlfdGV4dCk7Cgljb25zdCBkb2N1bWVudHMgPSBhd2FpdCB2ZWNzdG9yZQoJCS5zZWFyY2goZW1iZWRkaW5ncy50b2xpc3QoKSkKCQkubGltaXQocmV0cmlldmVyX2xpbWl0KQoJCS50b0FycmF5KCk7CgoJcmV0dXJuIGRvY3VtZW50cy5tYXAoKGQpID0+IHsKCQljb25zdCBtZXRhID0gSlNPTi5wYXJzZShkLm1ldGEpOwoJCWNvbnN0IHNvdXJjZTogc3RyaW5nID0gbWV0YS5zb3VyY2U7CgkJcmV0dXJuIGAke2QudGV4dH1cblx0LSAke3NvdXJjZX1gOwoJfSk7Cn0KCmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVZlY3RvclNlYXJjaEluZGV4KCkgewoJYXdhaXQgdmVjc3RvcmUuY3JlYXRlSW5kZXgoInZlY3RvciIsIHsKCQlyZXBsYWNlOiB0cnVlLAoJfSk7Cn0KCi8qKgogKiBJbnNlcnQgYHRleHRgIGludG8gdmVjdG9yIHN0b3JlIHdpdGggYWRkaXRpb25hbCBpbmZvcm1hdGlvbiAobGlrZSBgc291cmNlYCkgaW4gYG1ldGFgLgogKiAqLwphc3luYyBmdW5jdGlvbiBpbnNlcnRUZXh0SW50b1N0b3JlKAoJdGV4dDogc3RyaW5nLAoJbWV0YV9qc29uPzogc3RyaW5nLAoJbWV0YV9vYmplY3Q/OiBBcGlNZXRhT2JqZWN0LAopIHsKCWNvbnN0IGVtYmVkZGluZ3MgPSBhd2FpdCBnZW5lcmF0ZVRleHRFbWJlZGRpbmcodGV4dCk7Cgljb25zdCBtZXRhID0gbWV0YV9qc29uID8gbWV0YV9qc29uIDogSlNPTi5zdHJpbmdpZnkobWV0YV9vYmplY3QgfHwge30pOwoJYXdhaXQgdmVjc3RvcmUuYWRkKFt7IHZlY3RvcjogZW1iZWRkaW5ncy50b2xpc3QoKSwgdGV4dDogdGV4dCwgbWV0YTogbWV0YSB9XSk7Cn0KCmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVVzZXIobmV3X2NyZWRlbnRpYWxzOiBBdXRoQ3JlZGVudGlhbHMpOiBQcm9taXNlPHN0cmluZz4gewoJLy8gQ2hlY2sgaWYgdGhlIGVtYWlsIGFscmVhZHkgZXhpc3RzIGluIHRoZSBkYXRhYmFzZQoJY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgVXNlci5maW5kT25lKHsgZW1haWw6IG5ld19jcmVkZW50aWFscy5lbWFpbCB9KTsKCWlmIChleGlzdGluZ1VzZXIpIHRocm93IG5ldyBFcnJvcigiVXNlciBhbHJlYWR5IGV4aXN0cyEiKTsKCgkvLyBIYXNoIHRoZSBwYXNzd29yZCBiZWZvcmUgc2F2aW5nIGl0IGluIHRoZSBkYXRhYmFzZQoJY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBiY3J5cHQuaGFzaChuZXdfY3JlZGVudGlhbHMucGFzc3dvcmQsIDEwKTsKCgkvLyBHZW5lcmF0ZSBhIEpXVCB0b2tlbgoJY29uc3QgdG9rZW4gPSBqd3Quc2lnbih7IGVtYWlsOiBuZXdfY3JlZGVudGlhbHMuZW1haWwgfSwgU0VDUkVUX0tFWSwgewoJCWV4cGlyZXNJbjogYCR7QUxMT1dFRF9USU1FfXNgLAoJfSk7CgoJLy8gQ3JlYXRlIGEgbmV3IHVzZXIKCWNvbnN0IG5ld1VzZXIgPSBuZXcgVXNlcih7CgkJZW1haWw6IG5ld19jcmVkZW50aWFscy5lbWFpbCwKCQlwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsCgkJdG9rZW46IHRva2VuLAoJfSk7CgoJYXdhaXQgbmV3VXNlci5zYXZlKCk7CgkvLyBTdG9yZSB0aGUgdG9rZW4gaW4gSW5kZXhlZERCIG9uIHRoZSBjbGllbnQgc2lkZQoJLy9hd2FpdCBzdG9yZVRva2VuSW5JbmRleGVkREIodG9rZW4pOyAgIHJlbW92ZWQgYW5kIGFkZGVkIG9uIHRoZSBjbGllbnQgc2lkZQoKCWNvbnNvbGUuZGVidWcoIlVzZXIgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgYW5kIHRva2VuIHN0b3JlZCEiKTsKCXJldHVybiB0b2tlbjsgLy9yZXR1cm4gdG9rZW4gdG8gaW5kaWNhdGUgc3VjY2Vzcwp9Cgphc3luYyBmdW5jdGlvbiBhdXRoZW50aWNhdGVVc2VyKGNyZWRlbnRpYWxzOiBBdXRoQ3JlZGVudGlhbHMpOiBQcm9taXNlPHN0cmluZz4gewoJLy8gLS0tLS0tLS0tLS0tLS0tLS0tLURFVi1BVVRILVNUVUZGLS0tLS0tLS0tLS0tLS0tLQoJaWYgKAoJCXByb2Nlc3MuZW52LkFMTE9XX0RFVl9BVVRIICYmCgkJY3JlZGVudGlhbHMuZW1haWwgPT0gcHJvY2Vzcy5lbnYuREVWX0FVVEhfVU5BTUUgJiYKCQljcmVkZW50aWFscy5wYXNzd29yZCA9PSBwcm9jZXNzLmVudi5ERVZfQVVUSF9QQVNTCgkpIHsKCQljb25zdCB0b2tlbiA9IGp3dC5zaWduKHsgZW1haWw6IGNyZWRlbnRpYWxzLmVtYWlsIH0sIFNFQ1JFVF9LRVksIHsKCQkJZXhwaXJlc0luOiBgMTBoYCwKCQl9KTsKCQlyZXR1cm4gdG9rZW47Cgl9CgkvLyAtLS0tLS0tLS0tLS0tLS0tLS1SRU1PVkUtSU4tUkVMRUFTRS0tLS0tLS0tLS0tLS0tLQoKCS8vIENoZWNrIGlmIHRoZSBlbWFpbCBleGlzdHMgaW4gdGhlIGRhdGFiYXNlCgljb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoeyBlbWFpbDogY3JlZGVudGlhbHMuZW1haWwgfSk7CglpZiAoIWV4aXN0aW5nVXNlcikgdGhyb3cgbmV3IEVycm9yKCJVc2VyIGRvZXMgbm90IGV4aXN0LiIpOwoKCS8vIFZlcmlmeSB0aGUgcGFzc3dvcmQKCWNvbnN0IGlzUGFzc3dvcmRDb3JyZWN0ID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUoCgkJY3JlZGVudGlhbHMucGFzc3dvcmQsCgkJZXhpc3RpbmdVc2VyLnBhc3N3b3JkLAoJKTsKCglpZiAoIWlzUGFzc3dvcmRDb3JyZWN0KSB0aHJvdyBuZXcgRXJyb3IoIkluY29ycmVjdCBwYXNzd29yZC4iKTsKCgkvLyBHZW5lcmF0ZSBhIEpXVCB0b2tlbgoJY29uc3QgdG9rZW4gPSBqd3Quc2lnbih7IGVtYWlsOiBjcmVkZW50aWFscy5lbWFpbCB9LCBTRUNSRVRfS0VZLCB7CgkJZXhwaXJlc0luOiBgJHtBTExPV0VEX1RJTUV9c2AsCgl9KTsKCglleGlzdGluZ1VzZXIudG9rZW4gPSB0b2tlbjsKCWF3YWl0IGV4aXN0aW5nVXNlci5zYXZlKCk7CglyZXR1cm4gdG9rZW47Cn0KCmludGVyZmFjZSBBcGlQZXJtaXNzaW9ucyB7CglhbGxvd19pbmRleDogYm9vbGVhbjsKCWFsbG93X3VzZXJfY2FsbHM6IGJvb2xlYW47CglhbGxvd19jcmVhdGU6IGJvb2xlYW47CglhdXRvX3JlZnJlc2g6IGJvb2xlYW47Cn0KCmNvbnN0IE5VTExfVE9LRU4gPSAiTlVMTF9UT0tFTiI7CmNvbnN0IE5VTExfUEVSTUlTU0lPTlM6IEFwaVBlcm1pc3Npb25zID0gewoJYWxsb3dfY3JlYXRlOiB0cnVlLAoJYWxsb3dfaW5kZXg6IGZhbHNlLAoJYWxsb3dfdXNlcl9jYWxsczogZmFsc2UsCglhdXRvX3JlZnJlc2g6IGZhbHNlLAp9Owpjb25zdCBERVZfUEVSTUlTU0lPTlM6IEFwaVBlcm1pc3Npb25zID0gewoJYWxsb3dfY3JlYXRlOiB0cnVlLAoJYWxsb3dfaW5kZXg6IHRydWUsCglhbGxvd191c2VyX2NhbGxzOiB0cnVlLAoJYXV0b19yZWZyZXNoOiBmYWxzZSwKfTsKCi8qKgogKiBDaGVjayBpZiB0aGUgcHJvdmlkZWQgdG9rZW4gaXMgdmFsaWQsIGFuZCByZXR1cm4gdGhlIHBlcm1pc3Npb25zIGF3YXJkZWQuCiAqIEl0IGlzIG5vdGV3b3J0aHksIHRoYXQgZXhwaXJlZCB0b2tlbnMgYXJlIG5vdCBuZWNlc3NhcmlseSBkZWVtZWQgaW52YWxpZC4KICogKi8KYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVVc2VyVG9rZW4odG9rZW46IHN0cmluZyk6IFByb21pc2U8QXBpUGVybWlzc2lvbnM+IHsKCWlmICh0b2tlbiA9PSBOVUxMX1RPS0VOKSByZXR1cm4gTlVMTF9QRVJNSVNTSU9OUzsKCgljb25zdCBtZXRhX29iamVjdCA9IGp3dC52ZXJpZnkodG9rZW4sIHByb2Nlc3MuZW52LlNFQ1JFVF9LRVkpOwoKCWlmICgKCQlwcm9jZXNzLmVudi5BTExPV19ERVZfQVVUSCAmJgoJCW1ldGFfb2JqZWN0LmVtYWlsID09IHByb2Nlc3MuZW52LkRFVl9BVVRIX1VOQU1FCgkpIHsKCQlyZXR1cm4gREVWX1BFUk1JU1NJT05TOwoJfQoKCWlmICghbWV0YV9vYmplY3QgfHwgIW1ldGFfb2JqZWN0LmV4cCkgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIFVTRVIgdG9rZW4uIik7CgoJY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgVXNlci5maW5kT25lKHsgdG9rZW46IHRva2VuIH0pOwoJY29uc29sZS5kZWJ1ZygidG9rZW46IiArIHRva2VuKTsKCWlmICghZXhpc3RpbmdVc2VyKSB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgVVNFUiB0b2tlbi4iKTsKCgljb25zdCBjdXJyZW50VGltZSA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApOwoJY29uc3QgZXhwID0gbWV0YV9vYmplY3QuZXhwOwoKCWlmIChjdXJyZW50VGltZSA+IGV4cCkgdGhyb3cgbmV3IEVycm9yKCJUb2tlbiBleHBpcmVkLiIpOwoKCXJldHVybiB7CgkJYWxsb3dfY3JlYXRlOiBmYWxzZSwKCQlhbGxvd19pbmRleDogZmFsc2UsCgkJYWxsb3dfdXNlcl9jYWxsczogdHJ1ZSwKCQlhdXRvX3JlZnJlc2g6IEJvb2xlYW4oZXhwIC0gY3VycmVudFRpbWUgPCBBTExPV0VEX1RJTUUgLSAzMCksCgl9Owp9Cgphc3luYyBmdW5jdGlvbiByZWZyZXNoVG9rZW4odG9rZW46IHN0cmluZyk6IHN0cmluZyB7Cgljb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoeyB0b2tlbjogdG9rZW4gfSk7Cgl0b2tlbiA9IGp3dC5zaWduKHsgZW1haWw6IGV4aXN0aW5nVXNlci5lbWFpbCB9LCBTRUNSRVRfS0VZLCB7CgkJZXhwaXJlc0luOiBgJHtBTExPV0VEX1RJTUV9c2AsCgl9KTsKCWV4aXN0aW5nVXNlci50b2tlbiA9IHRva2VuOwoJYXdhaXQgZXhpc3RpbmdVc2VyLnNhdmUoKTsKCWNvbnNvbGUuZGVidWcoZXhpc3RpbmdVc2VyKTsKCWNvbnNvbGUuZGVidWcodG9rZW4pCglyZXR1cm4gdG9rZW47Cn0KAyoAAAAAAAAEKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwKQAAAAAAAPApAAAAAAAAAAAAAAAA8L8"
				],
				[
					910,
					1,
					"insert",
					{
						"characters": "son"
					},
					"AwAAACEpAAAAAAAAIikAAAAAAAAAAAAAIikAAAAAAAAjKQAAAAAAAAAAAAAjKQAAAAAAACQpAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhKQAAAAAAACEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					911,
					3,
					"left_delete",
					null,
					"AwAAACMpAAAAAAAAIykAAAAAAAABAAAAbiIpAAAAAAAAIikAAAAAAAABAAAAbyEpAAAAAAAAISkAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkKQAAAAAAACQpAAAAAAAAAAAAAAAA8L8"
				],
				[
					912,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAACEpAAAAAAAAIikAAAAAAAAAAAAAIikAAAAAAAAjKQAAAAAAAAAAAAAjKQAAAAAAACQpAAAAAAAAAAAAACQpAAAAAAAAJSkAAAAAAAAAAAAAJSkAAAAAAAAmKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhKQAAAAAAACEpAAAAAAAAAAAAAAAA8L8"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": " new_"
					},
					"BQAAACYpAAAAAAAAJykAAAAAAAAAAAAAJykAAAAAAAAoKQAAAAAAAAAAAAAoKQAAAAAAACkpAAAAAAAAAAAAACkpAAAAAAAAKikAAAAAAAAAAAAAKikAAAAAAAArKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmKQAAAAAAACYpAAAAAAAAAAAAAAAA8L8"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": "new_"
					},
					"BAAAAKUpAAAAAAAApikAAAAAAAAAAAAApikAAAAAAACnKQAAAAAAAAAAAACnKQAAAAAAAKgpAAAAAAAAAAAAAKgpAAAAAAAAqSkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClKQAAAAAAAKUpAAAAAAAAAAAAAAAA8L8"
				],
				[
					919,
					1,
					"insert",
					{
						"characters": "new_"
					},
					"BAAAAPkpAAAAAAAA+ikAAAAAAAAAAAAA+ikAAAAAAAD7KQAAAAAAAAAAAAD7KQAAAAAAAPwpAAAAAAAAAAAAAPwpAAAAAAAA/SkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5KQAAAAAAAPkpAAAAAAAAAAAAAAAA8L8"
				],
				[
					922,
					1,
					"insert",
					{
						"characters": "new_"
					},
					"BAAAAA0qAAAAAAAADioAAAAAAAAAAAAADioAAAAAAAAPKgAAAAAAAAAAAAAPKgAAAAAAABAqAAAAAAAAAAAAABAqAAAAAAAAESoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANKgAAAAAAAA0qAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { ModeToggle } from \"@/components/ui/modetoggle\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n} from \"@/components/ui/dropdown-menu\";\nimport { Plus, Send, Check, ChevronsUpDown, Copy } from \"lucide-react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Message, Endpoint, agentic_call, chunkText } from \"@/lib/llmcall\";\nimport Markdown from \"react-markdown\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/newcommand\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport Link from \"next/link\";\nimport materialDark from \"react-syntax-highlighter/dist/esm/styles/prism/material-dark\";\nimport { useRouter } from \"next/navigation\";\n//import {validateUserToken} from './validateUser'\nimport jwt from \"jsonwebtoken\";\nimport { NextRouter } from \"next/router\";\nimport { AppRouterInstance } from \"next/dist/shared/lib/app-router-context.shared-runtime\";\ninterface Thread {\n  id: number;\n  name: string;\n}\n\ninterface AuthCredentials {\n  email: string;\n  password: string;\n}\n\ninterface ApiMetaObject {\n  credentials?: AuthCredentials;\n  token?: string;\n  chunk_source?: string;\n}\n\nconst THREAD_IMAGE_PLACEHOLDER: string = \"/images/bot-avatar.png\";\nconst USER_AVATAR_PLACEHOLDER: string = \"/images/user-avatar.png\";\n\nconst initialEndpoints: Endpoint[] = [\n  { name: \"ollama-local\", target: \"http://localhost:11434\" },\n];\n\nasync function storeInIndexedDB(key: string, value: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const dbName = \"ThreadDB\";\n    const storeName = \"KeyValueStore\";\n\n    // Open a connection to the database\n    const request = indexedDB.open(dbName, 1);\n\n    request.onupgradeneeded = (event) => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      // Create object store if it doesn't exist\n      if (!db.objectStoreNames.contains(storeName)) {\n        db.createObjectStore(storeName, { keyPath: \"id\" });\n      }\n    };\n\n    request.onsuccess = (event) => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      if (!db.objectStoreNames.contains(storeName)) {\n        db.close();\n        reject(new Error(`Object store \"${storeName}\" not found.`));\n        return;\n      }\n\n      // Open a transaction and get the object store\n      const transaction = db.transaction(storeName, \"readwrite\");\n      const store = transaction.objectStore(storeName);\n\n      // Add the key-value pair to the store\n      const addRequest = store.put({ id: key, value });\n\n      addRequest.onsuccess = () => {\n        resolve();\n      };\n\n      addRequest.onerror = (err) => {\n        reject(\n          new Error(\n            \"Error storing the key-value pair: \" +\n              (err.target as IDBRequest).error,\n          ),\n        );\n      };\n\n      transaction.oncomplete = () => {\n        db.close();\n      };\n    };\n\n    request.onerror = (err) => {\n      reject(\n        new Error(\n          \"Error opening the database: \" + (err.target as IDBRequest).error,\n        ),\n      );\n    };\n  });\n}\n\nfunction getFromIndexedDB(key: string): Promise<string | null> {\n  return new Promise((resolve, reject) => {\n    const dbName = \"ThreadDB\";\n    const storeName = \"KeyValueStore\";\n\n    // Open a connection to the database\n    const request = indexedDB.open(dbName, 1);\n\n    request.onupgradeneeded = (event) => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      // Create object store if it doesn't exist\n      if (!db.objectStoreNames.contains(storeName)) {\n        db.createObjectStore(storeName, { keyPath: \"id\" });\n      }\n    };\n\n    request.onsuccess = (event) => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      // Open a transaction and get the object store\n      const transaction = db.transaction(storeName, \"readonly\");\n      const store = transaction.objectStore(storeName);\n\n      // Get the value for the given key\n      const getRequest = store.get(key);\n\n      getRequest.onsuccess = () => {\n        // Resolve the value, or null if not found\n        resolve(getRequest.result || null);\n      };\n\n      getRequest.onerror = (err) => {\n        reject(\n          new Error(\n            \"Error retrieving the value: \" + (err.target as IDBRequest).error,\n          ),\n        );\n      };\n\n      transaction.oncomplete = () => {\n        db.close();\n      };\n    };\n\n    request.onerror = (err) => {\n      reject(\n        new Error(\n          \"Error opening the database: \" + (err.target as IDBRequest).error,\n        ),\n      );\n    };\n  });\n}\n\nfunction getTokenFromIndexedDB(): Promise<string | null> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(\"UserDB\", 1); // Replace with your actual database name\n\n    request.onupgradeneeded = (event: Event) => {\n      const db = event.target.result;\n      // Create an object store for tokens if it doesn't already exist\n      if (!db.objectStoreNames.contains(\"tokens\")) {\n        db.createObjectStore(\"tokens\", { keyPath: \"id\" }); // You can use a custom keyPath or just an auto-incremented ID\n      }\n    };\n\n    request.onsuccess = (event: Event) => {\n      const db = event.target.result;\n      const transaction = db.transaction([\"tokens\"], \"readonly\");\n      const store = transaction.objectStore(\"tokens\");\n\n      const tokenRequest = store.get(\"authToken\"); // Assuming the token is stored under 'authToken'\n\n      tokenRequest.onsuccess = () => {\n        resolve(tokenRequest.result ? tokenRequest.result.token : null);\n      };\n\n      tokenRequest.onerror = () => {\n        reject(\"Error retrieving token from IndexedDB\");\n      };\n    };\n\n    request.onerror = () => {\n      reject(\"Error opening IndexedDB\");\n    };\n  });\n}\n\nasync function storeTokenInIndexedDB(token: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(\"UserDB\", 1);\n\n    request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n      const db = (event.target as IDBOpenDBRequest).result;\n      if (!db.objectStoreNames.contains(\"tokens\")) {\n        db.createObjectStore(\"tokens\", { keyPath: \"id\" });\n      }\n    };\n\n    request.onsuccess = (event: Event) => {\n      const db = (event.target as IDBOpenDBRequest).result;\n      const transaction = db.transaction(\"tokens\", \"readwrite\");\n      const store = transaction.objectStore(\"tokens\");\n\n      // Check if a token already exists\n      const getRequest = store.get(\"authToken\");\n\n      getRequest.onsuccess = () => {\n        if (getRequest.result) {\n          console.debug(\"Token already exists. Replacing with new token.\");\n        } else {\n          console.debug(\"No token found. Storing new token.\");\n        }\n\n        // Replace or insert the token\n        store.put({ id: \"authToken\", token });\n\n        transaction.oncomplete = () => {\n          console.debug(\"Token stored successfully in IndexedDB\");\n          resolve();\n        };\n\n        transaction.onerror = () => {\n          console.error(\"Error storing token in IndexedDB\");\n          reject(transaction.error);\n        };\n      };\n\n      getRequest.onerror = () => {\n        console.error(\"Error checking existing token in IndexedDB\");\n        reject(getRequest.error);\n      };\n    };\n\n    request.onerror = () => {\n      console.error(\"Error opening IndexedDB\");\n      reject(request.error);\n    };\n  });\n}\n\nasync function sendAPIRequest(method: string, meta: ApiMetaObject): any {\n  // TODO: change the return type\n  const response = await fetch(\"/api\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      meta: JSON.stringify({\n        credentials: meta.credentials,\n        token: meta.token,\n        chunk_source: meta.chunk_source,\n      }),\n      method: method,\n    }),\n  });\n  const result = await response.json();\n  if (result.refresh) {\n    const newResponse = await fetch(\"/api\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        meta: JSON.stringify({\n          credentials: meta.credentials,\n          token: meta.token,\n          chunk_source: meta.chunk_source,\n        }),\n        method: \"refresh\",\n      }),\n    });\n    const newResult = await newResponse.json();\n    await storeTokenInIndexedDB(newResult.token);\n    return newResult;\n  }\n  return result;\n}\n\n// TODO: Add correct type here.\nasync function validateUserToken(\n  toast: any,\n  router: AppRouterInstance,\n): Promise<string | undefined> {\n  //shows login toast\n  try {\n    // Step 1: Retrieve token from IndexedDB\n    const token = await getTokenFromIndexedDB();\n    console.debug(\"Retrieved token:\", token);\n    if (!token) {\n      toast({\n        title: \"Error\",\n        description: \"No token found. Please log in again.\",\n        variant: \"destructive\",\n      });\n      router.push(\"/fcku\");\n      return undefined;\n    }\n\n    const result = await sendAPIRequest(\"verify\", { token: token });\n\n    // TODO: CHECK LOGIC HERE....\n\n    if (!result.error) {\n      return token;\n    } else if (result.message === \"jwt expired\") {\n      toast({\n        title: \"Token expired\",\n        description: \"Your session has expired. Please log in again.\",\n        variant: \"destructive\",\n      });\n      router.push(\"/login\");\n    } else {\n      toast({\n        title: \"Error\",\n        description: result.message || \"An error occurred.\",\n        variant: \"destructive\",\n      });\n      router.push(\"/fcku\");\n    }\n  } catch (err) {\n    console.error(\"Error during token validation:\", err);\n    toast({\n      title: \"Error\",\n      description: \"An error occurred during the validation process.\",\n      variant: \"destructive\",\n    });\n    router.push(\"/fcku\");\n  }\n}\n\nexport default function MainPage() {\n  // For Showing toasts.\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const [threads, setThreads] = useState<Thread[]>([{ id: 1, name: \"Thread\" }]);\n\n  const [currentThread, setCurrentThread] = useState<Thread>(threads[0]);\n\n  type ThreadMap = { [key: number]: Message[] };\n\n  const [messages, setMessages] = useState<ThreadMap>({\n    1: [],\n    2: [],\n  });\n\n  const [search, setSearch] = useState(\"\");\n\n  const [endpoints, setEndpoints] = useState<Endpoint[]>(initialEndpoints);\n\n  const [selectedEndpoint, setSelectedEndpoint] = useState<Endpoint>(\n    initialEndpoints[0],\n  );\n\n  useEffect(() => {\n    validateUserToken(toast, router);\n    const storedThreads = localStorage.getItem(\"AIYOU_threads\");\n    setThreads(\n      storedThreads ? JSON.parse(storedThreads) : [{ id: 1, name: \"Thread\" }],\n    );\n    const storedMessages = localStorage.getItem(\"AIYOU_messages\");\n    setMessages(\n      storedMessages\n        ? JSON.parse(storedMessages)\n        : {\n            1: [],\n            2: [],\n          },\n    );\n    const storedCurrentThread = localStorage.getItem(\"AIYOU_currentThread\");\n    setCurrentThread(\n      storedCurrentThread ? JSON.parse(storedCurrentThread) : threads[0],\n    );\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"AIYOU_threads\", JSON.stringify(threads));\n  }, [threads]);\n\n  useEffect(() => {\n    localStorage.setItem(\"AIYOU_currentThread\", JSON.stringify(currentThread));\n  }, [currentThread]);\n\n  useEffect(() => {\n    localStorage.setItem(\"AIYOU_messages\", JSON.stringify(messages));\n  }, [messages]);\n\n  const handleSendMessage = async (text: string) => {\n    const newMessage: Message = { content: text, isUser: true };\n    setMessages((msgs) => {\n      return {\n        ...msgs,\n        [currentThread.id]: [...msgs[currentThread.id], newMessage],\n      };\n    });\n    try {\n      const token = (await getTokenFromIndexedDB()) || \"NULL_TOKEN\";\n      const response = await agentic_call(\n        selectedEndpoint,\n        messages[currentThread.id],\n        text,\n        undefined, // For now.\n        token,\n      );\n      const response_message: Message = { content: response, isUser: false };\n      if (response.trim().length > 0) {\n        setMessages((msgs) => {\n          return {\n            ...msgs,\n            [currentThread.id]: [...msgs[currentThread.id], response_message],\n          };\n        });\n      }\n    } catch (error) {\n      console.error(\"Error occurred during LLM call\\n\", error);\n      toast({\n        title: \"LLM call failed\",\n        description:\n          \"An unexpected error occurred during call to LLM endpoint. Check logs.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleNewThread = () => {\n    if (search.trim()) {\n      const newThread = { id: threads.length + 1, name: search };\n      setThreads([...threads, newThread]);\n      setCurrentThread(newThread);\n      setMessages({ ...messages, [newThread.id]: [] });\n      setSearch(\"\");\n    }\n  };\n\n  const addEndpoint = (endpoint: Endpoint) => {\n    setEndpoints([...endpoints, endpoint]);\n    setSelectedEndpoint(endpoint);\n    toast({\n      title: \"Created New Endpoint\",\n      description: `You can now choose ${endpoint.name} to connect to ${endpoint.target}`,\n      duration: 1000,\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen\" style={{ overflow: \"hidden\" }}>\n      <SidePanel\n        threads={threads}\n        onSelectThread={setCurrentThread}\n        onNewThread={handleNewThread}\n        search={search}\n        setSearch={setSearch}\n      />\n      <div className=\"flex flex-col flex-grow\">\n        <TopBar\n          threadName={currentThread?.name}\n          endpoints={endpoints}\n          selectedEndpoint={selectedEndpoint}\n          setSelectedEndpoint={setSelectedEndpoint}\n          addEndpoint={addEndpoint}\n        />\n        <ChatPanel messages={messages[currentThread.id] || []} />\n        <InputArea onSendMessage={handleSendMessage} />\n      </div>\n    </div>\n  );\n}\n\n// Sidebar Component\ninterface SidePanelProps {\n  threads: Thread[];\n  onSelectThread: (thread: Thread) => void;\n  onNewThread: () => void;\n  search: string;\n  setSearch: (search: string) => void;\n}\n\nfunction SidePanel({\n  threads,\n  onSelectThread,\n  onNewThread,\n  search,\n  setSearch,\n}: SidePanelProps) {\n  const filteredThreads = threads.filter((thread) =>\n    thread.name.toLowerCase().includes(search.toLowerCase()),\n  );\n\n  return (\n    <aside className=\"w-64 mt-2 mb-2 ml-2 p-2 border-r hidden lg:block h-full\">\n      <div className=\"flex items-center mb-4\">\n        <Input\n          placeholder=\"Search or Create\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          className=\"w-full\"\n        />\n        <Button onClick={onNewThread} className=\"ml-2\" variant=\"outline\">\n          <Plus className=\"w-4 h-4\" />\n        </Button>\n      </div>\n      <ScrollArea className=\"h-full space-y-2\">\n        {filteredThreads.map((thread) => (\n          <Card\n            key={thread.id}\n            onClick={() => onSelectThread(thread)}\n            className=\"cursor-pointer p-2 rounded hover:bg-secondary flex items-center mb-2 mr-3\"\n          >\n            <Avatar className=\"mr-3\">\n              <AvatarImage src={THREAD_IMAGE_PLACEHOLDER} alt={thread.name} />\n              <AvatarFallback>{thread.name[0]}</AvatarFallback>\n            </Avatar>\n            <span>{thread.name}</span>\n          </Card>\n        ))}\n        <span className=\"px-60\" />\n      </ScrollArea>\n    </aside>\n  );\n}\n\ninterface EndpointSelectProps {\n  endpoints: Endpoint[];\n  selectedEndpoint: Endpoint;\n  setSelectedEndpoint: (endpoint: Endpoint) => void;\n  addEndpoint: (endpoint: Endpoint) => void;\n}\n\nfunction EndpointSelect({\n  endpoints,\n  selectedEndpoint,\n  setSelectedEndpoint,\n  addEndpoint,\n}: EndpointSelectProps) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button role=\"combobox\" aria-expanded={open}>\n          {selectedEndpoint.name || \"Select endpoint...\"}\n          <ChevronsUpDown />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <Command>\n          <CommandInput placeholder=\"Search endpoint...\" />\n          <CommandList>\n            <CommandEmpty>No endpoint found.</CommandEmpty>\n            <CommandGroup>\n              {endpoints.map((endpoint) => (\n                <CommandItem\n                  key={endpoint.target}\n                  value={endpoint.target}\n                  className=\"hover:bg-secondary cursor-pointer\"\n                  onSelect={(currentValue: string) => {\n                    const endpoint = endpoints.find(\n                      (ep) => ep.target === currentValue,\n                    );\n                    if (endpoint) setSelectedEndpoint(endpoint);\n                    setOpen(false);\n                  }}\n                >\n                  {endpoint.name}\n                  <Check\n                    className={\n                      selectedEndpoint.target === endpoint.target\n                        ? \"visible\"\n                        : \"invisible\"\n                    }\n                  />\n                </CommandItem>\n              ))}\n              <NewEndpointDialog addEndpoint={addEndpoint} />\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n\ninterface NewEndpointDialogProps {\n  addEndpoint: (endpoint: Endpoint) => void;\n}\n\nfunction NewEndpointDialog({ addEndpoint }: NewEndpointDialogProps) {\n  const [newEndpointName, setNewEndpointName] = useState(\"\");\n  const [newEndpointUrl, setNewEndpointUrl] = useState(\"\");\n\n  const handleAddEndpoint = () => {\n    if (newEndpointName.trim() && newEndpointUrl.trim()) {\n      addEndpoint({ name: newEndpointName, target: newEndpointUrl });\n      setNewEndpointName(\"\");\n      setNewEndpointUrl(\"\");\n    }\n  };\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          className=\"w-full justify-start text-left px-2 py-0 mb-0\"\n        >\n          New Endpoint\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Add New Endpoint</DialogTitle>\n          <DialogDescription>\n            Enter the details for the new endpoint.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <Input\n            placeholder=\"Endpoint Name\"\n            value={newEndpointName}\n            onChange={(e) => setNewEndpointName(e.target.value)}\n          />\n          <Input\n            placeholder=\"Endpoint URL\"\n            value={newEndpointUrl}\n            onChange={(e) => setNewEndpointUrl(e.target.value)}\n          />\n        </div>\n        <DialogFooter>\n          <Button onClick={handleAddEndpoint}>Add</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ninterface TopBarProps {\n  threadName: string | undefined;\n  endpoints: Endpoint[];\n  selectedEndpoint: Endpoint;\n  setSelectedEndpoint: (endpoint: Endpoint) => void;\n  addEndpoint: (endpoint: Endpoint) => void;\n}\n\nconst USER_RAG_CHUNK_SIZE = 512;\nconst TEXT_DELIMS = [\".\\n\\n\", \"\\n\\n\", \".\\n\", \"\\n\", \". \", \".\"];\n\nfunction IngestItem() {\n  const { toast } = useToast();\n\n  const handleClick = () => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \".txt\"; // Only allow text files\n    input.onchange = async (event) => {\n      const file = (event.target as HTMLInputElement).files?.[0] || null;\n      if (file) {\n        console.debug(\"Got:\", file);\n        const text_content = await file.text();\n        const chunks = chunkText(\n          text_content,\n          USER_RAG_CHUNK_SIZE,\n          TEXT_DELIMS,\n        );\n        // TODO: Check this\n        const promises = chunks.map(\n          /*async (chunk) =>\n            fetch(\"/api\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                text: chunk,\n                method: \"ingest\",\n                meta: JSON.stringify({\n                  token: (await getTokenFromIndexedDB()) || \"NULL_TOKEN\",\n                  chunk_source: file.name,\n                }), // TODO: Add JSON for user-related stuff here. For now this is the source. See [route.ts] for more information.\n              }),\n            }).then((r) => r.json()),*/\n          sendAPIRequest(\"ingest\", {\n            token: (await getTokenFromIndexedDB()) || \"NULL_TOKEN\",\n            chunk_source: file.name,\n          }),\n        );\n        const results = await Promise.all(promises);\n        console.debug(results);\n        const error_count = results.filter((a) => a.error).length;\n        if (error_count > 0) {\n          console.error(\n            \"Failed to ingest\",\n            error_count,\n            \"chunk(s) out of\",\n            results.length,\n            \"(\",\n            (error_count / results.length) * 100,\n            \"% )\",\n          );\n          toast({\n            title: \"Incomplete Ingestion\",\n            description: \"Some chunks were not ingested.\",\n            variant: \"destructive\",\n          });\n        } else {\n          toast({\n            title: \"Successful Ingestion\",\n            description:\n              \"The provided document was completely chunked and ingested.\",\n          });\n        }\n      }\n    };\n    input.click();\n  };\n\n  return (\n    <DropdownMenuItem\n      onClick={handleClick}\n      className=\"hover:bg-secondary cursor-pointer\"\n    >\n      Ingest\n    </DropdownMenuItem>\n  );\n}\n\nfunction TopBar({\n  threadName,\n  endpoints,\n  selectedEndpoint,\n  setSelectedEndpoint,\n  addEndpoint,\n}: TopBarProps) {\n  return (\n    <header className=\"flex items-center justify-between p-4 border-b\">\n      <h2 className=\"text-lg font-semibold\">{threadName}</h2>\n      <div className=\"flex items-center space-x-2\">\n        <ModeToggle />\n        <EndpointSelect\n          endpoints={endpoints}\n          selectedEndpoint={selectedEndpoint}\n          setSelectedEndpoint={setSelectedEndpoint}\n          addEndpoint={addEndpoint}\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"text-lg\">\n              ⋮\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent>\n            <NewEndpointDialog\n              addEndpoint={addEndpoint}\n              className=\"hover:bg-secondary\"\n            />\n            <IngestItem />\n            <DropdownMenuItem>\n              <Link href=\"/help\">Help</Link>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  );\n}\n\n// Chat Panel Component\ninterface ChatPanelProps {\n  messages: Message[];\n}\n\nfunction ChatPanel({ messages }: ChatPanelProps) {\n  return (\n    <>\n      <style>\n        {`\n          .hide-scrollbar {\n            scrollbar-width: none; /* Firefox */\n            -ms-overflow-style: none; /* IE 10+ */\n          }\n          .hide-scrollbar::-webkit-scrollbar {\n            display: none; /* Safari and Chrome */\n          }\n        `}\n      </style>\n      <ScrollArea className=\"flex flex-col p-4 space-y-4 w-full flex-grow overflow-y-auto hide-scrollbar\">\n        {messages.map((message, index) => (\n          <TooltipProvider key={index}>\n            <Tooltip>\n              <div\n                className={`relative flex ${\n                  message.isUser ? \"justify-end\" : \"justify-start\"\n                }`}\n              >\n                {/* Message Bubble */}\n                <div\n                  className={`relative inline-flex flex-col items-start p-3 rounded-[30px] bg-secondary `}\n                  style={{\n                    borderRadius: \"20px / 30px\",\n                    maxWidth: \"80%\", // Max width for long messages\n                  }}\n                >\n                  {/* Avatar */}\n                  <div\n                    className={`absolute top-1 ${\n                      message.isUser ? \"right-1\" : \"left-1\"\n                    }`}\n                  >\n                    <Avatar>\n                      <AvatarImage\n                        src={\n                          message.isUser\n                            ? USER_AVATAR_PLACEHOLDER\n                            : THREAD_IMAGE_PLACEHOLDER\n                        }\n                        alt={message.content}\n                      />\n                      <AvatarFallback>\n                        {message.isUser ? \"U\" : \"R\"}\n                      </AvatarFallback>\n                    </Avatar>\n                  </div>\n                  {/* Tooltip Trigger: Wrap the message content */}\n                  <TooltipTrigger asChild>\n                    <div\n                      className={`${\n                        message.isUser\n                          ? \"mr-12 ml-2 text-sm mt-1 mb-1\"\n                          : \"ml-12 mr-2 text-sm mt-1 mb-1\"\n                      }`}\n                    >\n                      <MarkdownRenderer content={message.content} />\n                    </div>\n                  </TooltipTrigger>\n                </div>\n              </div>\n              {/* Tooltip Content */}\n              <TooltipContent className=\"absolute -translate-x-1/2 bottom-full mb-4 whitespace-nowrap px-2 py-1 bg-primary text-secondary\">\n                <p>{message.isUser ? \"Sent by you\" : \"Received\"}</p>\n              </TooltipContent>\n              <div className=\"mb-4\" />\n            </Tooltip>\n          </TooltipProvider>\n        ))}\n      </ScrollArea>\n    </>\n  );\n}\n\ninterface CodeBlockProps {\n  code: string;\n  language: string;\n}\n\nexport function CodeBlock({ code, language }: CodeBlockProps) {\n  const handleCopy = async () => {\n    await navigator.clipboard.writeText(code);\n  };\n\n  return (\n    <div style={{ position: \"relative\" }}>\n      <SyntaxHighlighter\n        language={language}\n        style={materialDark}\n        showLineNumbers\n        PreTag=\"div\"\n      >\n        {code}\n      </SyntaxHighlighter>\n      <Button\n        onClick={handleCopy}\n        variant=\"outline\"\n        style={{ position: \"absolute\", top: \"10px\", right: \"10px\" }}\n      >\n        <Copy /> Copy\n      </Button>\n    </div>\n  );\n}\n\ninterface MarkdownRendererProps {\n  content: string;\n}\n\nexport function MarkdownRenderer({ content }: MarkdownRendererProps) {\n  return (\n    <Markdown\n      className=\"display-block\"\n      components={{\n        code(props) {\n          const { children, className, ...rest } = props;\n          const match = /language-(\\w+)/.exec(className || \"\");\n          return match ? (\n            <CodeBlock\n              {...rest}\n              language={match[1]}\n              code={String(children).replace(/\\n$/, \"\")}\n            />\n          ) : (\n            <code {...rest} className={className}>\n              {children}\n            </code>\n          );\n        },\n      }}\n    >\n      {content}\n    </Markdown>\n  );\n}\n\n// Input Area Component\ninterface InputAreaProps {\n  onSendMessage: (text: string) => void;\n}\n\nfunction InputArea({ onSendMessage }: InputAreaProps) {\n  const [input, setInput] = useState(\"\");\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const handleSend = () => {\n    if (input.trim()) {\n      onSendMessage(input);\n      setInput(\"\");\n    }\n  };\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = \"auto\";\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [input]);\n\n  return (\n    <div className=\"flex items-center p-4 border-t\">\n      <style>\n        {`\n        .scrollable-content {\n          overflow-y: auto;\n          max-height: 300px; /* Adjust this value to control the textarea scrollable height */\n        }\n      `}\n      </style>\n      <div className=\"flex-grow mr-3\">\n        <ScrollArea>\n          <div className=\"scrollable-content\">\n            <Textarea\n              ref={textareaRef}\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder=\"Type a message...\"\n              className=\"w-full mb-0 border rounded resize-none\"\n              rows={1}\n              style={{ overflow: \"hidden\" }}\n            />\n          </div>\n        </ScrollArea>\n      </div>\n      <Button\n        onClick={handleSend}\n        className=\"flex items-center justify-center\"\n        variant=\"outline\"\n      >\n        <Send className=\"w-4 h-4\" />\n      </Button>\n    </div>\n  );\n}\n",
			"file": "app/main/page.tsx",
			"file_size": 30127,
			"file_write_time": 133766100841645523,
			"settings":
			{
				"buffer_size": 29116,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					763,
					1,
					"insert",
					{
						"characters": "async"
					},
					"BQAAALAIAAAAAAAAsQgAAAAAAAAAAAAAsQgAAAAAAACyCAAAAAAAAAAAAACyCAAAAAAAALMIAAAAAAAAAAAAALMIAAAAAAAAtAgAAAAAAAAAAAAAtAgAAAAAAAC1CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwCAAAAAAAALAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					764,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALUIAAAAAAAAtggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1CAAAAAAAALUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					770,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAE8OAAAAAAAAUA4AAAAAAAAAAAAAUA4AAAAAAABRDgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPDgAAAAAAAE8OAAAAAAAAAAAAAAAA8L8"
				],
				[
					772,
					1,
					"paste",
					null,
					"AQAAAFAOAAAAAAAAeRQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQDgAAAAAAAFAOAAAAAAAAAAAAAAAAAAA"
				],
				[
					773,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5FAAAAAAAAHkUAAAAAAAAAAAAAAAA8L8"
				],
				[
					878,
					1,
					"left_delete",
					null,
					"AQAAABQUAAAAAAAAFBQAAAAAAAAGAAAAYXN5bmMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaFAAAAAAAABQUAAAAAAAAAAAAAAAA8L8"
				],
				[
					909,
					1,
					"insert",
					{
						"characters": "store"
					},
					"BgAAAF0tAAAAAAAAXi0AAAAAAAAAAAAAXi0AAAAAAABeLQAAAAAAABQAAABsb2NhbFN0b3JhZ2Uuc2V0SXRlbV4tAAAAAAAAXy0AAAAAAAAAAAAAXy0AAAAAAABgLQAAAAAAAAAAAABgLQAAAAAAAGEtAAAAAAAAAAAAAGEtAAAAAAAAYi0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxLQAAAAAAAF0tAAAAAAAAAAAAAAAA8L8"
				],
				[
					910,
					1,
					"insert_completion",
					{
						"completion": "storeInIndexedDB",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "storeInIndexedDB"
					},
					"AgAAAF0tAAAAAAAAXS0AAAAAAAAFAAAAc3RvcmVdLQAAAAAAAG0tAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiLQAAAAAAAGItAAAAAAAAAAAAAAAA8L8"
				],
				[
					913,
					2,
					"left_delete",
					null,
					"AgAAAMQtAAAAAAAAxC0AAAAAAAATAAAAb2NhbFN0b3JhZ2Uuc2V0SXRlbcMtAAAAAAAAwy0AAAAAAAABAAAAbA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXLQAAAAAAAMQtAAAAAAAAAAAAAAAA8L8"
				],
				[
					914,
					1,
					"insert",
					{
						"characters": "storein"
					},
					"BwAAAMMtAAAAAAAAxC0AAAAAAAAAAAAAxC0AAAAAAADFLQAAAAAAAAAAAADFLQAAAAAAAMYtAAAAAAAAAAAAAMYtAAAAAAAAxy0AAAAAAAAAAAAAxy0AAAAAAADILQAAAAAAAAAAAADILQAAAAAAAMktAAAAAAAAAAAAAMktAAAAAAAAyi0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDLQAAAAAAAMMtAAAAAAAAAAAAAAAA8L8"
				],
				[
					915,
					1,
					"insert_completion",
					{
						"completion": "storeInIndexedDB",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "storeInIndexedDB"
					},
					"AgAAAMMtAAAAAAAAwy0AAAAAAAAHAAAAc3RvcmVpbsMtAAAAAAAA0y0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKLQAAAAAAAMotAAAAAAAAAAAAAAAA8L8"
				],
				[
					918,
					1,
					"insert",
					{
						"characters": "store"
					},
					"BgAAADsuAAAAAAAAPC4AAAAAAAAAAAAAPC4AAAAAAAA8LgAAAAAAABQAAABsb2NhbFN0b3JhZ2Uuc2V0SXRlbTwuAAAAAAAAPS4AAAAAAAAAAAAAPS4AAAAAAAA+LgAAAAAAAAAAAAA+LgAAAAAAAD8uAAAAAAAAAAAAAD8uAAAAAAAAQC4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPLgAAAAAAADsuAAAAAAAAAAAAAAAA8L8"
				],
				[
					919,
					1,
					"insert_completion",
					{
						"completion": "storeInIndexedDB",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "storeInIndexedDB"
					},
					"AgAAADsuAAAAAAAAOy4AAAAAAAAFAAAAc3RvcmU7LgAAAAAAAEsuAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABALgAAAAAAAEAuAAAAAAAAAAAAAAAA8L8"
				],
				[
					923,
					1,
					"insert",
					{
						"characters": "User"
					},
					"BQAAANEOAAAAAAAA0g4AAAAAAAAAAAAA0g4AAAAAAADSDgAAAAAAAAgAAABLZXlWYWx1ZdIOAAAAAAAA0w4AAAAAAAAAAAAA0w4AAAAAAADUDgAAAAAAAAAAAADUDgAAAAAAANUOAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZDgAAAAAAANEOAAAAAAAAAAAAAAAA8L8"
				],
				[
					933,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFAQAAAAAAAAURAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQEAAAAAAAAFAQAAAAAAAAAAAAAAAA8L8"
				],
				[
					934,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFEQAAAAAAAAUhAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABREAAAAAAAAFEQAAAAAAAAAAAAAAAA8L8"
				],
				[
					935,
					1,
					"paste",
					null,
					"AQAAAFIQAAAAAAAAYxAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSEAAAAAAAAFIQAAAAAAAAAAAAAAAA8L8"
				],
				[
					948,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALwKAAAAAAAAvQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8CgAAAAAAALwKAAAAAAAAAAAAAAAA8L8"
				],
				[
					949,
					1,
					"paste",
					null,
					"AQAAAL0KAAAAAAAAzgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9CgAAAAAAAL0KAAAAAAAAAAAAAAAA8L8"
				],
				[
					950,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"AgAAAAAAAAAAAAAA+3AAAAAAAAD9cAAAInVzZSBjbGllbnQiOwoKaW1wb3J0IHsgdXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAicmVhY3QiOwppbXBvcnQgeyBCdXR0b24gfSBmcm9tICJAL2NvbXBvbmVudHMvdWkvYnV0dG9uIjsKaW1wb3J0IHsgQ2FyZCB9IGZyb20gIkAvY29tcG9uZW50cy91aS9jYXJkIjsKaW1wb3J0IHsgSW5wdXQgfSBmcm9tICJAL2NvbXBvbmVudHMvdWkvaW5wdXQiOwppbXBvcnQgeyBTY3JvbGxBcmVhIH0gZnJvbSAiQC9jb21wb25lbnRzL3VpL3Njcm9sbC1hcmVhIjsKaW1wb3J0IHsgTW9kZVRvZ2dsZSB9IGZyb20gIkAvY29tcG9uZW50cy91aS9tb2RldG9nZ2xlIjsKaW1wb3J0IHsgQXZhdGFyLCBBdmF0YXJGYWxsYmFjaywgQXZhdGFySW1hZ2UgfSBmcm9tICJAL2NvbXBvbmVudHMvdWkvYXZhdGFyIjsKaW1wb3J0IHsKICBUb29sdGlwLAogIFRvb2x0aXBDb250ZW50LAogIFRvb2x0aXBQcm92aWRlciwKICBUb29sdGlwVHJpZ2dlciwKfSBmcm9tICJAL2NvbXBvbmVudHMvdWkvdG9vbHRpcCI7CmltcG9ydCB7CiAgRHJvcGRvd25NZW51LAogIERyb3Bkb3duTWVudVRyaWdnZXIsCiAgRHJvcGRvd25NZW51Q29udGVudCwKICBEcm9wZG93bk1lbnVJdGVtLAp9IGZyb20gIkAvY29tcG9uZW50cy91aS9kcm9wZG93bi1tZW51IjsKaW1wb3J0IHsgUGx1cywgU2VuZCwgQ2hlY2ssIENoZXZyb25zVXBEb3duLCBDb3B5IH0gZnJvbSAibHVjaWRlLXJlYWN0IjsKaW1wb3J0IHsgVGV4dGFyZWEgfSBmcm9tICJAL2NvbXBvbmVudHMvdWkvdGV4dGFyZWEiOwppbXBvcnQgewogIERpYWxvZywKICBEaWFsb2dUcmlnZ2VyLAogIERpYWxvZ0NvbnRlbnQsCiAgRGlhbG9nSGVhZGVyLAogIERpYWxvZ1RpdGxlLAogIERpYWxvZ0Rlc2NyaXB0aW9uLAogIERpYWxvZ0Zvb3RlciwKfSBmcm9tICJAL2NvbXBvbmVudHMvdWkvZGlhbG9nIjsKaW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tICJAL2hvb2tzL3VzZS10b2FzdCI7CmltcG9ydCB7IE1lc3NhZ2UsIEVuZHBvaW50LCBhZ2VudGljX2NhbGwsIGNodW5rVGV4dCB9IGZyb20gIkAvbGliL2xsbWNhbGwiOwppbXBvcnQgTWFya2Rvd24gZnJvbSAicmVhY3QtbWFya2Rvd24iOwppbXBvcnQgewogIENvbW1hbmQsCiAgQ29tbWFuZEVtcHR5LAogIENvbW1hbmRHcm91cCwKICBDb21tYW5kSW5wdXQsCiAgQ29tbWFuZEl0ZW0sCiAgQ29tbWFuZExpc3QsCn0gZnJvbSAiQC9jb21wb25lbnRzL3VpL25ld2NvbW1hbmQiOwppbXBvcnQgewogIFBvcG92ZXIsCiAgUG9wb3ZlckNvbnRlbnQsCiAgUG9wb3ZlclRyaWdnZXIsCn0gZnJvbSAiQC9jb21wb25lbnRzL3VpL3BvcG92ZXIiOwppbXBvcnQgeyBQcmlzbSBhcyBTeW50YXhIaWdobGlnaHRlciB9IGZyb20gInJlYWN0LXN5bnRheC1oaWdobGlnaHRlciI7CmltcG9ydCBMaW5rIGZyb20gIm5leHQvbGluayI7CmltcG9ydCBtYXRlcmlhbERhcmsgZnJvbSAicmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvZXNtL3N0eWxlcy9wcmlzbS9tYXRlcmlhbC1kYXJrIjsKaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAibmV4dC9uYXZpZ2F0aW9uIjsKLy9pbXBvcnQge3ZhbGlkYXRlVXNlclRva2VufSBmcm9tICcuL3ZhbGlkYXRlVXNlcicKaW1wb3J0IGp3dCBmcm9tICJqc29ud2VidG9rZW4iOwppbXBvcnQgeyBOZXh0Um91dGVyIH0gZnJvbSAibmV4dC9yb3V0ZXIiOwppbXBvcnQgeyBBcHBSb3V0ZXJJbnN0YW5jZSB9IGZyb20gIm5leHQvZGlzdC9zaGFyZWQvbGliL2FwcC1yb3V0ZXItY29udGV4dC5zaGFyZWQtcnVudGltZSI7CmludGVyZmFjZSBUaHJlYWQgewogIGlkOiBudW1iZXI7CiAgbmFtZTogc3RyaW5nOwp9CgppbnRlcmZhY2UgQXV0aENyZWRlbnRpYWxzIHsKICBlbWFpbDogc3RyaW5nOwogIHBhc3N3b3JkOiBzdHJpbmc7Cn0KCmludGVyZmFjZSBBcGlNZXRhT2JqZWN0IHsKICBjcmVkZW50aWFscz86IEF1dGhDcmVkZW50aWFsczsKICB0b2tlbj86IHN0cmluZzsKICBjaHVua19zb3VyY2U/OiBzdHJpbmc7Cn0KCmNvbnN0IFRIUkVBRF9JTUFHRV9QTEFDRUhPTERFUjogc3RyaW5nID0gIi9pbWFnZXMvYm90LWF2YXRhci5wbmciOwpjb25zdCBVU0VSX0FWQVRBUl9QTEFDRUhPTERFUjogc3RyaW5nID0gIi9pbWFnZXMvdXNlci1hdmF0YXIucG5nIjsKCmNvbnN0IGluaXRpYWxFbmRwb2ludHM6IEVuZHBvaW50W10gPSBbCiAgeyBuYW1lOiAib2xsYW1hLWxvY2FsIiwgdGFyZ2V0OiAiaHR0cDovL2xvY2FsaG9zdDoxMTQzNCIgfSwKXTsKCmFzeW5jIGZ1bmN0aW9uIHN0b3JlSW5JbmRleGVkREIoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHsKICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgY29uc3QgZGJOYW1lID0gIlVzZXJEQiI7CiAgICBjb25zdCBzdG9yZU5hbWUgPSAiS2V5VmFsdWVTdG9yZSI7CgogICAgLy8gT3BlbiBhIGNvbm5lY3Rpb24gdG8gdGhlIGRhdGFiYXNlCiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lLCAxKTsKCiAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IChldmVudCkgPT4gewogICAgICBjb25zdCBkYiA9IChldmVudC50YXJnZXQgYXMgSURCT3BlbkRCUmVxdWVzdCkucmVzdWx0OwoKICAgICAgLy8gQ3JlYXRlIG9iamVjdCBzdG9yZSBpZiBpdCBkb2Vzbid0IGV4aXN0CiAgICAgIGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhzdG9yZU5hbWUpKSB7CiAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lLHsga2V5UGF0aDogImlkIiB9KTsKICAgICAgfQogICAgfTsKCiAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IChldmVudCkgPT4gewogICAgICBjb25zdCBkYiA9IChldmVudC50YXJnZXQgYXMgSURCT3BlbkRCUmVxdWVzdCkucmVzdWx0OwoKICAgICAgLy8gT3BlbiBhIHRyYW5zYWN0aW9uIGFuZCBnZXQgdGhlIG9iamVjdCBzdG9yZQogICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgInJlYWR3cml0ZSIpOwogICAgICBjb25zdCBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7CgogICAgICAvLyBBZGQgdGhlIGtleS12YWx1ZSBwYWlyIHRvIHRoZSBzdG9yZQogICAgICBjb25zdCBhZGRSZXF1ZXN0ID0gc3RvcmUucHV0KHZhbHVlLCBrZXkpOwoKICAgICAgYWRkUmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7CiAgICAgICAgcmVzb2x2ZSgpOwogICAgICB9OwoKICAgICAgYWRkUmVxdWVzdC5vbmVycm9yID0gKGVycikgPT4gewogICAgICAgIHJlamVjdCgKICAgICAgICAgIG5ldyBFcnJvcigKICAgICAgICAgICAgIkVycm9yIHN0b3JpbmcgdGhlIGtleS12YWx1ZSBwYWlyOiAiICsKICAgICAgICAgICAgICAoZXJyLnRhcmdldCBhcyBJREJSZXF1ZXN0KS5lcnJvciwKICAgICAgICAgICksCiAgICAgICAgKTsKICAgICAgfTsKCiAgICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSAoKSA9PiB7CiAgICAgICAgZGIuY2xvc2UoKTsKICAgICAgfTsKICAgIH07CgogICAgcmVxdWVzdC5vbmVycm9yID0gKGVycikgPT4gewogICAgICByZWplY3QoCiAgICAgICAgbmV3IEVycm9yKAogICAgICAgICAgIkVycm9yIG9wZW5pbmcgdGhlIGRhdGFiYXNlOiAiICsgKGVyci50YXJnZXQgYXMgSURCUmVxdWVzdCkuZXJyb3IsCiAgICAgICAgKSwKICAgICAgKTsKICAgIH07CiAgfSk7Cn0KCmZ1bmN0aW9uIGdldEZyb21JbmRleGVkREIoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHsKICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgY29uc3QgZGJOYW1lID0gIlVzZXJEQiI7CiAgICBjb25zdCBzdG9yZU5hbWUgPSAiS2V5VmFsdWVTdG9yZSI7CgogICAgLy8gT3BlbiBhIGNvbm5lY3Rpb24gdG8gdGhlIGRhdGFiYXNlCiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lLCAxKTsKCiAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IChldmVudCkgPT4gewogICAgICBjb25zdCBkYiA9IChldmVudC50YXJnZXQgYXMgSURCT3BlbkRCUmVxdWVzdCkucmVzdWx0OwoKICAgICAgLy8gQ3JlYXRlIG9iamVjdCBzdG9yZSBpZiBpdCBkb2Vzbid0IGV4aXN0CiAgICAgIGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhzdG9yZU5hbWUpKSB7CiAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lLCB7IGtleVBhdGg6ICJpZCIgfSk7CiAgICAgIH0KICAgIH07CgogICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZXZlbnQpID0+IHsKICAgICAgY29uc3QgZGIgPSAoZXZlbnQudGFyZ2V0IGFzIElEQk9wZW5EQlJlcXVlc3QpLnJlc3VsdDsKCiAgICAgIC8vIE9wZW4gYSB0cmFuc2FjdGlvbiBhbmQgZ2V0IHRoZSBvYmplY3Qgc3RvcmUKICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBkYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsICJyZWFkb25seSIpOwogICAgICBjb25zdCBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7CgogICAgICAvLyBHZXQgdGhlIHZhbHVlIGZvciB0aGUgZ2l2ZW4ga2V5CiAgICAgIGNvbnN0IGdldFJlcXVlc3QgPSBzdG9yZS5nZXQoa2V5KTsKCiAgICAgIGdldFJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4gewogICAgICAgIC8vIFJlc29sdmUgdGhlIHZhbHVlLCBvciBudWxsIGlmIG5vdCBmb3VuZAogICAgICAgIHJlc29sdmUoZ2V0UmVxdWVzdC5yZXN1bHQgfHwgbnVsbCk7CiAgICAgIH07CgogICAgICBnZXRSZXF1ZXN0Lm9uZXJyb3IgPSAoZXJyKSA9PiB7CiAgICAgICAgcmVqZWN0KAogICAgICAgICAgbmV3IEVycm9yKAogICAgICAgICAgICAiRXJyb3IgcmV0cmlldmluZyB0aGUgdmFsdWU6ICIgKyAoZXJyLnRhcmdldCBhcyBJREJSZXF1ZXN0KS5lcnJvciwKICAgICAgICAgICksCiAgICAgICAgKTsKICAgICAgfTsKCiAgICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSAoKSA9PiB7CiAgICAgICAgZGIuY2xvc2UoKTsKICAgICAgfTsKICAgIH07CgogICAgcmVxdWVzdC5vbmVycm9yID0gKGVycikgPT4gewogICAgICByZWplY3QoCiAgICAgICAgbmV3IEVycm9yKAogICAgICAgICAgIkVycm9yIG9wZW5pbmcgdGhlIGRhdGFiYXNlOiAiICsgKGVyci50YXJnZXQgYXMgSURCUmVxdWVzdCkuZXJyb3IsCiAgICAgICAgKSwKICAgICAgKTsKICAgIH07CiAgfSk7Cn0KCmZ1bmN0aW9uIGdldFRva2VuRnJvbUluZGV4ZWREQigpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHsKICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKCJVc2VyREIiLCAxKTsgLy8gUmVwbGFjZSB3aXRoIHlvdXIgYWN0dWFsIGRhdGFiYXNlIG5hbWUKCiAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IChldmVudDogRXZlbnQpID0+IHsKICAgICAgY29uc3QgZGIgPSBldmVudC50YXJnZXQucmVzdWx0OwogICAgICAvLyBDcmVhdGUgYW4gb2JqZWN0IHN0b3JlIGZvciB0b2tlbnMgaWYgaXQgZG9lc24ndCBhbHJlYWR5IGV4aXN0CiAgICAgIGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucygidG9rZW5zIikpIHsKICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgidG9rZW5zIiwgeyBrZXlQYXRoOiAiaWQiIH0pOyAvLyBZb3UgY2FuIHVzZSBhIGN1c3RvbSBrZXlQYXRoIG9yIGp1c3QgYW4gYXV0by1pbmNyZW1lbnRlZCBJRAogICAgICB9CiAgICB9OwoKICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKGV2ZW50OiBFdmVudCkgPT4gewogICAgICBjb25zdCBkYiA9IGV2ZW50LnRhcmdldC5yZXN1bHQ7CiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oWyJ0b2tlbnMiXSwgInJlYWRvbmx5Iik7CiAgICAgIGNvbnN0IHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoInRva2VucyIpOwoKICAgICAgY29uc3QgdG9rZW5SZXF1ZXN0ID0gc3RvcmUuZ2V0KCJhdXRoVG9rZW4iKTsgLy8gQXNzdW1pbmcgdGhlIHRva2VuIGlzIHN0b3JlZCB1bmRlciAnYXV0aFRva2VuJwoKICAgICAgdG9rZW5SZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHsKICAgICAgICByZXNvbHZlKHRva2VuUmVxdWVzdC5yZXN1bHQgPyB0b2tlblJlcXVlc3QucmVzdWx0LnRva2VuIDogbnVsbCk7CiAgICAgIH07CgogICAgICB0b2tlblJlcXVlc3Qub25lcnJvciA9ICgpID0+IHsKICAgICAgICByZWplY3QoIkVycm9yIHJldHJpZXZpbmcgdG9rZW4gZnJvbSBJbmRleGVkREIiKTsKICAgICAgfTsKICAgIH07CgogICAgcmVxdWVzdC5vbmVycm9yID0gKCkgPT4gewogICAgICByZWplY3QoIkVycm9yIG9wZW5pbmcgSW5kZXhlZERCIik7CiAgICB9OwogIH0pOwp9Cgphc3luYyBmdW5jdGlvbiBzdG9yZVRva2VuSW5JbmRleGVkREIodG9rZW46IHN0cmluZyk6IFByb21pc2U8dm9pZD4gewogIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oIlVzZXJEQiIsIDEpOwoKICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKGV2ZW50OiBJREJWZXJzaW9uQ2hhbmdlRXZlbnQpID0+IHsKICAgICAgY29uc3QgZGIgPSAoZXZlbnQudGFyZ2V0IGFzIElEQk9wZW5EQlJlcXVlc3QpLnJlc3VsdDsKICAgICAgaWYgKCFkYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKCJ0b2tlbnMiKSkgewogICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCJ0b2tlbnMiLCB7IGtleVBhdGg6ICJpZCIgfSk7CiAgICAgIH0KICAgIH07CgogICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7CiAgICAgIGNvbnN0IGRiID0gKGV2ZW50LnRhcmdldCBhcyBJREJPcGVuREJSZXF1ZXN0KS5yZXN1bHQ7CiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oInRva2VucyIsICJyZWFkd3JpdGUiKTsKICAgICAgY29uc3Qgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZSgidG9rZW5zIik7CgogICAgICAvLyBDaGVjayBpZiBhIHRva2VuIGFscmVhZHkgZXhpc3RzCiAgICAgIGNvbnN0IGdldFJlcXVlc3QgPSBzdG9yZS5nZXQoImF1dGhUb2tlbiIpOwoKICAgICAgZ2V0UmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7CiAgICAgICAgaWYgKGdldFJlcXVlc3QucmVzdWx0KSB7CiAgICAgICAgICBjb25zb2xlLmRlYnVnKCJUb2tlbiBhbHJlYWR5IGV4aXN0cy4gUmVwbGFjaW5nIHdpdGggbmV3IHRva2VuLiIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zb2xlLmRlYnVnKCJObyB0b2tlbiBmb3VuZC4gU3RvcmluZyBuZXcgdG9rZW4uIik7CiAgICAgICAgfQoKICAgICAgICAvLyBSZXBsYWNlIG9yIGluc2VydCB0aGUgdG9rZW4KICAgICAgICBzdG9yZS5wdXQoeyBpZDogImF1dGhUb2tlbiIsIHRva2VuIH0pOwoKICAgICAgICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gKCkgPT4gewogICAgICAgICAgY29uc29sZS5kZWJ1ZygiVG9rZW4gc3RvcmVkIHN1Y2Nlc3NmdWxseSBpbiBJbmRleGVkREIiKTsKICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICB9OwoKICAgICAgICB0cmFuc2FjdGlvbi5vbmVycm9yID0gKCkgPT4gewogICAgICAgICAgY29uc29sZS5lcnJvcigiRXJyb3Igc3RvcmluZyB0b2tlbiBpbiBJbmRleGVkREIiKTsKICAgICAgICAgIHJlamVjdCh0cmFuc2FjdGlvbi5lcnJvcik7CiAgICAgICAgfTsKICAgICAgfTsKCiAgICAgIGdldFJlcXVlc3Qub25lcnJvciA9ICgpID0+IHsKICAgICAgICBjb25zb2xlLmVycm9yKCJFcnJvciBjaGVja2luZyBleGlzdGluZyB0b2tlbiBpbiBJbmRleGVkREIiKTsKICAgICAgICByZWplY3QoZ2V0UmVxdWVzdC5lcnJvcik7CiAgICAgIH07CiAgICB9OwoKICAgIHJlcXVlc3Qub25lcnJvciA9ICgpID0+IHsKICAgICAgY29uc29sZS5lcnJvcigiRXJyb3Igb3BlbmluZyBJbmRleGVkREIiKTsKICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpOwogICAgfTsKICB9KTsKfQoKYXN5bmMgZnVuY3Rpb24gc2VuZEFQSVJlcXVlc3QobWV0aG9kOiBzdHJpbmcsIG1ldGE6IEFwaU1ldGFPYmplY3QpOiBhbnkgewogIC8vIFRPRE86IGNoYW5nZSB0aGUgcmV0dXJuIHR5cGUKICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCIvYXBpIiwgewogICAgbWV0aG9kOiAiUE9TVCIsCiAgICBoZWFkZXJzOiB7CiAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICB9LAogICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICBtZXRhOiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgY3JlZGVudGlhbHM6IG1ldGEuY3JlZGVudGlhbHMsCiAgICAgICAgdG9rZW46IG1ldGEudG9rZW4sCiAgICAgICAgY2h1bmtfc291cmNlOiBtZXRhLmNodW5rX3NvdXJjZSwKICAgICAgfSksCiAgICAgIG1ldGhvZDogbWV0aG9kLAogICAgfSksCiAgfSk7CiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOwogIGlmIChyZXN1bHQucmVmcmVzaCkgewogICAgY29uc3QgbmV3UmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgiL2FwaSIsIHsKICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgIGhlYWRlcnM6IHsKICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICB9LAogICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgbWV0YTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgY3JlZGVudGlhbHM6IG1ldGEuY3JlZGVudGlhbHMsCiAgICAgICAgICB0b2tlbjogbWV0YS50b2tlbiwKICAgICAgICAgIGNodW5rX3NvdXJjZTogbWV0YS5jaHVua19zb3VyY2UsCiAgICAgICAgfSksCiAgICAgICAgbWV0aG9kOiAicmVmcmVzaCIsCiAgICAgIH0pLAogICAgfSk7CiAgICBjb25zdCBuZXdSZXN1bHQgPSBhd2FpdCBuZXdSZXNwb25zZS5qc29uKCk7CiAgICBhd2FpdCBzdG9yZVRva2VuSW5JbmRleGVkREIobmV3UmVzdWx0LnRva2VuKTsKICAgIHJldHVybiBuZXdSZXN1bHQ7CiAgfQogIHJldHVybiByZXN1bHQ7Cn0KCi8vIFRPRE86IEFkZCBjb3JyZWN0IHR5cGUgaGVyZS4KYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVVc2VyVG9rZW4oCiAgdG9hc3Q6IGFueSwKICByb3V0ZXI6IEFwcFJvdXRlckluc3RhbmNlLAopOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4gewogIC8vc2hvd3MgbG9naW4gdG9hc3QKICB0cnkgewogICAgLy8gU3RlcCAxOiBSZXRyaWV2ZSB0b2tlbiBmcm9tIEluZGV4ZWREQgogICAgY29uc3QgdG9rZW4gPSBhd2FpdCBnZXRUb2tlbkZyb21JbmRleGVkREIoKTsKICAgIGNvbnNvbGUuZGVidWcoIlJldHJpZXZlZCB0b2tlbjoiLCB0b2tlbik7CiAgICBpZiAoIXRva2VuKSB7CiAgICAgIHRvYXN0KHsKICAgICAgICB0aXRsZTogIkVycm9yIiwKICAgICAgICBkZXNjcmlwdGlvbjogIk5vIHRva2VuIGZvdW5kLiBQbGVhc2UgbG9nIGluIGFnYWluLiIsCiAgICAgICAgdmFyaWFudDogImRlc3RydWN0aXZlIiwKICAgICAgfSk7CiAgICAgIHJvdXRlci5wdXNoKCIvZmNrdSIpOwogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQoKICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlbmRBUElSZXF1ZXN0KCJ2ZXJpZnkiLCB7IHRva2VuOiB0b2tlbiB9KTsKCiAgICAvLyBUT0RPOiBDSEVDSyBMT0dJQyBIRVJFLi4uLgoKICAgIGlmICghcmVzdWx0LmVycm9yKSB7CiAgICAgIHJldHVybiB0b2tlbjsKICAgIH0gZWxzZSBpZiAocmVzdWx0Lm1lc3NhZ2UgPT09ICJqd3QgZXhwaXJlZCIpIHsKICAgICAgdG9hc3QoewogICAgICAgIHRpdGxlOiAiVG9rZW4gZXhwaXJlZCIsCiAgICAgICAgZGVzY3JpcHRpb246ICJZb3VyIHNlc3Npb24gaGFzIGV4cGlyZWQuIFBsZWFzZSBsb2cgaW4gYWdhaW4uIiwKICAgICAgICB2YXJpYW50OiAiZGVzdHJ1Y3RpdmUiLAogICAgICB9KTsKICAgICAgcm91dGVyLnB1c2goIi9sb2dpbiIpOwogICAgfSBlbHNlIHsKICAgICAgdG9hc3QoewogICAgICAgIHRpdGxlOiAiRXJyb3IiLAogICAgICAgIGRlc2NyaXB0aW9uOiByZXN1bHQubWVzc2FnZSB8fCAiQW4gZXJyb3Igb2NjdXJyZWQuIiwKICAgICAgICB2YXJpYW50OiAiZGVzdHJ1Y3RpdmUiLAogICAgICB9KTsKICAgICAgcm91dGVyLnB1c2goIi9mY2t1Iik7CiAgICB9CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBjb25zb2xlLmVycm9yKCJFcnJvciBkdXJpbmcgdG9rZW4gdmFsaWRhdGlvbjoiLCBlcnIpOwogICAgdG9hc3QoewogICAgICB0aXRsZTogIkVycm9yIiwKICAgICAgZGVzY3JpcHRpb246ICJBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIHZhbGlkYXRpb24gcHJvY2Vzcy4iLAogICAgICB2YXJpYW50OiAiZGVzdHJ1Y3RpdmUiLAogICAgfSk7CiAgICByb3V0ZXIucHVzaCgiL2Zja3UiKTsKICB9Cn0KCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1haW5QYWdlKCkgewogIC8vIEZvciBTaG93aW5nIHRvYXN0cy4KICBjb25zdCB7IHRvYXN0IH0gPSB1c2VUb2FzdCgpOwogIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpOwoKICBjb25zdCBbdGhyZWFkcywgc2V0VGhyZWFkc10gPSB1c2VTdGF0ZTxUaHJlYWRbXT4oW3sgaWQ6IDEsIG5hbWU6ICJUaHJlYWQiIH1dKTsKCiAgY29uc3QgW2N1cnJlbnRUaHJlYWQsIHNldEN1cnJlbnRUaHJlYWRdID0gdXNlU3RhdGU8VGhyZWFkPih0aHJlYWRzWzBdKTsKCiAgdHlwZSBUaHJlYWRNYXAgPSB7IFtrZXk6IG51bWJlcl06IE1lc3NhZ2VbXSB9OwoKICBjb25zdCBbbWVzc2FnZXMsIHNldE1lc3NhZ2VzXSA9IHVzZVN0YXRlPFRocmVhZE1hcD4oewogICAgMTogW10sCiAgICAyOiBbXSwKICB9KTsKCiAgY29uc3QgW3NlYXJjaCwgc2V0U2VhcmNoXSA9IHVzZVN0YXRlKCIiKTsKCiAgY29uc3QgW2VuZHBvaW50cywgc2V0RW5kcG9pbnRzXSA9IHVzZVN0YXRlPEVuZHBvaW50W10+KGluaXRpYWxFbmRwb2ludHMpOwoKICBjb25zdCBbc2VsZWN0ZWRFbmRwb2ludCwgc2V0U2VsZWN0ZWRFbmRwb2ludF0gPSB1c2VTdGF0ZTxFbmRwb2ludD4oCiAgICBpbml0aWFsRW5kcG9pbnRzWzBdLAogICk7CgogIHVzZUVmZmVjdCgoKSA9PiB7CiAgICB2YWxpZGF0ZVVzZXJUb2tlbih0b2FzdCwgcm91dGVyKTsKICAgIGNvbnN0IHN0b3JlZFRocmVhZHMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiQUlZT1VfdGhyZWFkcyIpOwogICAgc2V0VGhyZWFkcygKICAgICAgc3RvcmVkVGhyZWFkcyA/IEpTT04ucGFyc2Uoc3RvcmVkVGhyZWFkcykgOiBbeyBpZDogMSwgbmFtZTogIlRocmVhZCIgfV0sCiAgICApOwogICAgY29uc3Qgc3RvcmVkTWVzc2FnZXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiQUlZT1VfbWVzc2FnZXMiKTsKICAgIHNldE1lc3NhZ2VzKAogICAgICBzdG9yZWRNZXNzYWdlcwogICAgICAgID8gSlNPTi5wYXJzZShzdG9yZWRNZXNzYWdlcykKICAgICAgICA6IHsKICAgICAgICAgICAgMTogW10sCiAgICAgICAgICAgIDI6IFtdLAogICAgICAgICAgfSwKICAgICk7CiAgICBjb25zdCBzdG9yZWRDdXJyZW50VGhyZWFkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oIkFJWU9VX2N1cnJlbnRUaHJlYWQiKTsKICAgIHNldEN1cnJlbnRUaHJlYWQoCiAgICAgIHN0b3JlZEN1cnJlbnRUaHJlYWQgPyBKU09OLnBhcnNlKHN0b3JlZEN1cnJlbnRUaHJlYWQpIDogdGhyZWFkc1swXSwKICAgICk7CiAgfSwgW10pOwoKICB1c2VFZmZlY3QoKCkgPT4gewogICAgc3RvcmVJbkluZGV4ZWREQigiQUlZT1VfdGhyZWFkcyIsIEpTT04uc3RyaW5naWZ5KHRocmVhZHMpKTsKICB9LCBbdGhyZWFkc10pOwoKICB1c2VFZmZlY3QoKCkgPT4gewogICAgc3RvcmVJbkluZGV4ZWREQigiQUlZT1VfY3VycmVudFRocmVhZCIsIEpTT04uc3RyaW5naWZ5KGN1cnJlbnRUaHJlYWQpKTsKICB9LCBbY3VycmVudFRocmVhZF0pOwoKICB1c2VFZmZlY3QoKCkgPT4gewogICAgc3RvcmVJbkluZGV4ZWREQigiQUlZT1VfbWVzc2FnZXMiLCBKU09OLnN0cmluZ2lmeShtZXNzYWdlcykpOwogIH0sIFttZXNzYWdlc10pOwoKICBjb25zdCBoYW5kbGVTZW5kTWVzc2FnZSA9IGFzeW5jICh0ZXh0OiBzdHJpbmcpID0+IHsKICAgIGNvbnN0IG5ld01lc3NhZ2U6IE1lc3NhZ2UgPSB7IGNvbnRlbnQ6IHRleHQsIGlzVXNlcjogdHJ1ZSB9OwogICAgc2V0TWVzc2FnZXMoKG1zZ3MpID0+IHsKICAgICAgcmV0dXJuIHsKICAgICAgICAuLi5tc2dzLAogICAgICAgIFtjdXJyZW50VGhyZWFkLmlkXTogWy4uLm1zZ3NbY3VycmVudFRocmVhZC5pZF0sIG5ld01lc3NhZ2VdLAogICAgICB9OwogICAgfSk7CiAgICB0cnkgewogICAgICBjb25zdCB0b2tlbiA9IChhd2FpdCBnZXRUb2tlbkZyb21JbmRleGVkREIoKSkgfHwgIk5VTExfVE9LRU4iOwogICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFnZW50aWNfY2FsbCgKICAgICAgICBzZWxlY3RlZEVuZHBvaW50LAogICAgICAgIG1lc3NhZ2VzW2N1cnJlbnRUaHJlYWQuaWRdLAogICAgICAgIHRleHQsCiAgICAgICAgdW5kZWZpbmVkLCAvLyBGb3Igbm93LgogICAgICAgIHRva2VuLAogICAgICApOwogICAgICBjb25zdCByZXNwb25zZV9tZXNzYWdlOiBNZXNzYWdlID0geyBjb250ZW50OiByZXNwb25zZSwgaXNVc2VyOiBmYWxzZSB9OwogICAgICBpZiAocmVzcG9uc2UudHJpbSgpLmxlbmd0aCA+IDApIHsKICAgICAgICBzZXRNZXNzYWdlcygobXNncykgPT4gewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgLi4ubXNncywKICAgICAgICAgICAgW2N1cnJlbnRUaHJlYWQuaWRdOiBbLi4ubXNnc1tjdXJyZW50VGhyZWFkLmlkXSwgcmVzcG9uc2VfbWVzc2FnZV0sCiAgICAgICAgICB9OwogICAgICAgIH0pOwogICAgICB9CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBjb25zb2xlLmVycm9yKCJFcnJvciBvY2N1cnJlZCBkdXJpbmcgTExNIGNhbGxcbiIsIGVycm9yKTsKICAgICAgdG9hc3QoewogICAgICAgIHRpdGxlOiAiTExNIGNhbGwgZmFpbGVkIiwKICAgICAgICBkZXNjcmlwdGlvbjoKICAgICAgICAgICJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkIGR1cmluZyBjYWxsIHRvIExMTSBlbmRwb2ludC4gQ2hlY2sgbG9ncy4iLAogICAgICAgIHZhcmlhbnQ6ICJkZXN0cnVjdGl2ZSIsCiAgICAgIH0pOwogICAgfQogIH07CgogIGNvbnN0IGhhbmRsZU5ld1RocmVhZCA9ICgpID0+IHsKICAgIGlmIChzZWFyY2gudHJpbSgpKSB7CiAgICAgIGNvbnN0IG5ld1RocmVhZCA9IHsgaWQ6IHRocmVhZHMubGVuZ3RoICsgMSwgbmFtZTogc2VhcmNoIH07CiAgICAgIHNldFRocmVhZHMoWy4uLnRocmVhZHMsIG5ld1RocmVhZF0pOwogICAgICBzZXRDdXJyZW50VGhyZWFkKG5ld1RocmVhZCk7CiAgICAgIHNldE1lc3NhZ2VzKHsgLi4ubWVzc2FnZXMsIFtuZXdUaHJlYWQuaWRdOiBbXSB9KTsKICAgICAgc2V0U2VhcmNoKCIiKTsKICAgIH0KICB9OwoKICBjb25zdCBhZGRFbmRwb2ludCA9IChlbmRwb2ludDogRW5kcG9pbnQpID0+IHsKICAgIHNldEVuZHBvaW50cyhbLi4uZW5kcG9pbnRzLCBlbmRwb2ludF0pOwogICAgc2V0U2VsZWN0ZWRFbmRwb2ludChlbmRwb2ludCk7CiAgICB0b2FzdCh7CiAgICAgIHRpdGxlOiAiQ3JlYXRlZCBOZXcgRW5kcG9pbnQiLAogICAgICBkZXNjcmlwdGlvbjogYFlvdSBjYW4gbm93IGNob29zZSAke2VuZHBvaW50Lm5hbWV9IHRvIGNvbm5lY3QgdG8gJHtlbmRwb2ludC50YXJnZXR9YCwKICAgICAgZHVyYXRpb246IDEwMDAsCiAgICB9KTsKICB9OwoKICByZXR1cm4gKAogICAgPGRpdiBjbGFzc05hbWU9ImZsZXggaC1zY3JlZW4iIHN0eWxlPXt7IG92ZXJmbG93OiAiaGlkZGVuIiB9fT4KICAgICAgPFNpZGVQYW5lbAogICAgICAgIHRocmVhZHM9e3RocmVhZHN9CiAgICAgICAgb25TZWxlY3RUaHJlYWQ9e3NldEN1cnJlbnRUaHJlYWR9CiAgICAgICAgb25OZXdUaHJlYWQ9e2hhbmRsZU5ld1RocmVhZH0KICAgICAgICBzZWFyY2g9e3NlYXJjaH0KICAgICAgICBzZXRTZWFyY2g9e3NldFNlYXJjaH0KICAgICAgLz4KICAgICAgPGRpdiBjbGFzc05hbWU9ImZsZXggZmxleC1jb2wgZmxleC1ncm93Ij4KICAgICAgICA8VG9wQmFyCiAgICAgICAgICB0aHJlYWROYW1lPXtjdXJyZW50VGhyZWFkPy5uYW1lfQogICAgICAgICAgZW5kcG9pbnRzPXtlbmRwb2ludHN9CiAgICAgICAgICBzZWxlY3RlZEVuZHBvaW50PXtzZWxlY3RlZEVuZHBvaW50fQogICAgICAgICAgc2V0U2VsZWN0ZWRFbmRwb2ludD17c2V0U2VsZWN0ZWRFbmRwb2ludH0KICAgICAgICAgIGFkZEVuZHBvaW50PXthZGRFbmRwb2ludH0KICAgICAgICAvPgogICAgICAgIDxDaGF0UGFuZWwgbWVzc2FnZXM9e21lc3NhZ2VzW2N1cnJlbnRUaHJlYWQuaWRdIHx8IFtdfSAvPgogICAgICAgIDxJbnB1dEFyZWEgb25TZW5kTWVzc2FnZT17aGFuZGxlU2VuZE1lc3NhZ2V9IC8+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgKTsKfQoKLy8gU2lkZWJhciBDb21wb25lbnQKaW50ZXJmYWNlIFNpZGVQYW5lbFByb3BzIHsKICB0aHJlYWRzOiBUaHJlYWRbXTsKICBvblNlbGVjdFRocmVhZDogKHRocmVhZDogVGhyZWFkKSA9PiB2b2lkOwogIG9uTmV3VGhyZWFkOiAoKSA9PiB2b2lkOwogIHNlYXJjaDogc3RyaW5nOwogIHNldFNlYXJjaDogKHNlYXJjaDogc3RyaW5nKSA9PiB2b2lkOwp9CgpmdW5jdGlvbiBTaWRlUGFuZWwoewogIHRocmVhZHMsCiAgb25TZWxlY3RUaHJlYWQsCiAgb25OZXdUaHJlYWQsCiAgc2VhcmNoLAogIHNldFNlYXJjaCwKfTogU2lkZVBhbmVsUHJvcHMpIHsKICBjb25zdCBmaWx0ZXJlZFRocmVhZHMgPSB0aHJlYWRzLmZpbHRlcigodGhyZWFkKSA9PgogICAgdGhyZWFkLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2gudG9Mb3dlckNhc2UoKSksCiAgKTsKCiAgcmV0dXJuICgKICAgIDxhc2lkZSBjbGFzc05hbWU9InctNjQgbXQtMiBtYi0yIG1sLTIgcC0yIGJvcmRlci1yIGhpZGRlbiBsZzpibG9jayBoLWZ1bGwiPgogICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBpdGVtcy1jZW50ZXIgbWItNCI+CiAgICAgICAgPElucHV0CiAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIG9yIENyZWF0ZSIKICAgICAgICAgIHZhbHVlPXtzZWFyY2h9CiAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFNlYXJjaChlLnRhcmdldC52YWx1ZSl9CiAgICAgICAgICBjbGFzc05hbWU9InctZnVsbCIKICAgICAgICAvPgogICAgICAgIDxCdXR0b24gb25DbGljaz17b25OZXdUaHJlYWR9IGNsYXNzTmFtZT0ibWwtMiIgdmFyaWFudD0ib3V0bGluZSI+CiAgICAgICAgICA8UGx1cyBjbGFzc05hbWU9InctNCBoLTQiIC8+CiAgICAgICAgPC9CdXR0b24+CiAgICAgIDwvZGl2PgogICAgICA8U2Nyb2xsQXJlYSBjbGFzc05hbWU9ImgtZnVsbCBzcGFjZS15LTIiPgogICAgICAgIHtmaWx0ZXJlZFRocmVhZHMubWFwKCh0aHJlYWQpID0+ICgKICAgICAgICAgIDxDYXJkCiAgICAgICAgICAgIGtleT17dGhyZWFkLmlkfQogICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvblNlbGVjdFRocmVhZCh0aHJlYWQpfQogICAgICAgICAgICBjbGFzc05hbWU9ImN1cnNvci1wb2ludGVyIHAtMiByb3VuZGVkIGhvdmVyOmJnLXNlY29uZGFyeSBmbGV4IGl0ZW1zLWNlbnRlciBtYi0yIG1yLTMiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxBdmF0YXIgY2xhc3NOYW1lPSJtci0zIj4KICAgICAgICAgICAgICA8QXZhdGFySW1hZ2Ugc3JjPXtUSFJFQURfSU1BR0VfUExBQ0VIT0xERVJ9IGFsdD17dGhyZWFkLm5hbWV9IC8+CiAgICAgICAgICAgICAgPEF2YXRhckZhbGxiYWNrPnt0aHJlYWQubmFtZVswXX08L0F2YXRhckZhbGxiYWNrPgogICAgICAgICAgICA8L0F2YXRhcj4KICAgICAgICAgICAgPHNwYW4+e3RocmVhZC5uYW1lfTwvc3Bhbj4KICAgICAgICAgIDwvQ2FyZD4KICAgICAgICApKX0KICAgICAgICA8c3BhbiBjbGFzc05hbWU9InB4LTYwIiAvPgogICAgICA8L1Njcm9sbEFyZWE+CiAgICA8L2FzaWRlPgogICk7Cn0KCmludGVyZmFjZSBFbmRwb2ludFNlbGVjdFByb3BzIHsKICBlbmRwb2ludHM6IEVuZHBvaW50W107CiAgc2VsZWN0ZWRFbmRwb2ludDogRW5kcG9pbnQ7CiAgc2V0U2VsZWN0ZWRFbmRwb2ludDogKGVuZHBvaW50OiBFbmRwb2ludCkgPT4gdm9pZDsKICBhZGRFbmRwb2ludDogKGVuZHBvaW50OiBFbmRwb2ludCkgPT4gdm9pZDsKfQoKZnVuY3Rpb24gRW5kcG9pbnRTZWxlY3QoewogIGVuZHBvaW50cywKICBzZWxlY3RlZEVuZHBvaW50LAogIHNldFNlbGVjdGVkRW5kcG9pbnQsCiAgYWRkRW5kcG9pbnQsCn06IEVuZHBvaW50U2VsZWN0UHJvcHMpIHsKICBjb25zdCBbb3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7CgogIHJldHVybiAoCiAgICA8UG9wb3ZlciBvcGVuPXtvcGVufSBvbk9wZW5DaGFuZ2U9e3NldE9wZW59PgogICAgICA8UG9wb3ZlclRyaWdnZXIgYXNDaGlsZD4KICAgICAgICA8QnV0dG9uIHJvbGU9ImNvbWJvYm94IiBhcmlhLWV4cGFuZGVkPXtvcGVufT4KICAgICAgICAgIHtzZWxlY3RlZEVuZHBvaW50Lm5hbWUgfHwgIlNlbGVjdCBlbmRwb2ludC4uLiJ9CiAgICAgICAgICA8Q2hldnJvbnNVcERvd24gLz4KICAgICAgICA8L0J1dHRvbj4KICAgICAgPC9Qb3BvdmVyVHJpZ2dlcj4KICAgICAgPFBvcG92ZXJDb250ZW50PgogICAgICAgIDxDb21tYW5kPgogICAgICAgICAgPENvbW1hbmRJbnB1dCBwbGFjZWhvbGRlcj0iU2VhcmNoIGVuZHBvaW50Li4uIiAvPgogICAgICAgICAgPENvbW1hbmRMaXN0PgogICAgICAgICAgICA8Q29tbWFuZEVtcHR5Pk5vIGVuZHBvaW50IGZvdW5kLjwvQ29tbWFuZEVtcHR5PgogICAgICAgICAgICA8Q29tbWFuZEdyb3VwPgogICAgICAgICAgICAgIHtlbmRwb2ludHMubWFwKChlbmRwb2ludCkgPT4gKAogICAgICAgICAgICAgICAgPENvbW1hbmRJdGVtCiAgICAgICAgICAgICAgICAgIGtleT17ZW5kcG9pbnQudGFyZ2V0fQogICAgICAgICAgICAgICAgICB2YWx1ZT17ZW5kcG9pbnQudGFyZ2V0fQogICAgICAgICAgICAgICAgICBjbGFzc05hbWU9ImhvdmVyOmJnLXNlY29uZGFyeSBjdXJzb3ItcG9pbnRlciIKICAgICAgICAgICAgICAgICAgb25TZWxlY3Q9eyhjdXJyZW50VmFsdWU6IHN0cmluZykgPT4gewogICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZHBvaW50ID0gZW5kcG9pbnRzLmZpbmQoCiAgICAgICAgICAgICAgICAgICAgICAoZXApID0+IGVwLnRhcmdldCA9PT0gY3VycmVudFZhbHVlLAogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZHBvaW50KSBzZXRTZWxlY3RlZEVuZHBvaW50KGVuZHBvaW50KTsKICAgICAgICAgICAgICAgICAgICBzZXRPcGVuKGZhbHNlKTsKICAgICAgICAgICAgICAgICAgfX0KICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAge2VuZHBvaW50Lm5hbWV9CiAgICAgICAgICAgICAgICAgIDxDaGVjawogICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17CiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEVuZHBvaW50LnRhcmdldCA9PT0gZW5kcG9pbnQudGFyZ2V0CiAgICAgICAgICAgICAgICAgICAgICAgID8gInZpc2libGUiCiAgICAgICAgICAgICAgICAgICAgICAgIDogImludmlzaWJsZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L0NvbW1hbmRJdGVtPgogICAgICAgICAgICAgICkpfQogICAgICAgICAgICAgIDxOZXdFbmRwb2ludERpYWxvZyBhZGRFbmRwb2ludD17YWRkRW5kcG9pbnR9IC8+CiAgICAgICAgICAgIDwvQ29tbWFuZEdyb3VwPgogICAgICAgICAgPC9Db21tYW5kTGlzdD4KICAgICAgICA8L0NvbW1hbmQ+CiAgICAgIDwvUG9wb3ZlckNvbnRlbnQ+CiAgICA8L1BvcG92ZXI+CiAgKTsKfQoKaW50ZXJmYWNlIE5ld0VuZHBvaW50RGlhbG9nUHJvcHMgewogIGFkZEVuZHBvaW50OiAoZW5kcG9pbnQ6IEVuZHBvaW50KSA9PiB2b2lkOwp9CgpmdW5jdGlvbiBOZXdFbmRwb2ludERpYWxvZyh7IGFkZEVuZHBvaW50IH06IE5ld0VuZHBvaW50RGlhbG9nUHJvcHMpIHsKICBjb25zdCBbbmV3RW5kcG9pbnROYW1lLCBzZXROZXdFbmRwb2ludE5hbWVdID0gdXNlU3RhdGUoIiIpOwogIGNvbnN0IFtuZXdFbmRwb2ludFVybCwgc2V0TmV3RW5kcG9pbnRVcmxdID0gdXNlU3RhdGUoIiIpOwoKICBjb25zdCBoYW5kbGVBZGRFbmRwb2ludCA9ICgpID0+IHsKICAgIGlmIChuZXdFbmRwb2ludE5hbWUudHJpbSgpICYmIG5ld0VuZHBvaW50VXJsLnRyaW0oKSkgewogICAgICBhZGRFbmRwb2ludCh7IG5hbWU6IG5ld0VuZHBvaW50TmFtZSwgdGFyZ2V0OiBuZXdFbmRwb2ludFVybCB9KTsKICAgICAgc2V0TmV3RW5kcG9pbnROYW1lKCIiKTsKICAgICAgc2V0TmV3RW5kcG9pbnRVcmwoIiIpOwogICAgfQogIH07CgogIHJldHVybiAoCiAgICA8RGlhbG9nPgogICAgICA8RGlhbG9nVHJpZ2dlciBhc0NoaWxkPgogICAgICAgIDxCdXR0b24KICAgICAgICAgIHZhcmlhbnQ9Imdob3N0IgogICAgICAgICAgY2xhc3NOYW1lPSJ3LWZ1bGwganVzdGlmeS1zdGFydCB0ZXh0LWxlZnQgcHgtMiBweS0wIG1iLTAiCiAgICAgICAgPgogICAgICAgICAgTmV3IEVuZHBvaW50CiAgICAgICAgPC9CdXR0b24+CiAgICAgIDwvRGlhbG9nVHJpZ2dlcj4KICAgICAgPERpYWxvZ0NvbnRlbnQ+CiAgICAgICAgPERpYWxvZ0hlYWRlcj4KICAgICAgICAgIDxEaWFsb2dUaXRsZT5BZGQgTmV3IEVuZHBvaW50PC9EaWFsb2dUaXRsZT4KICAgICAgICAgIDxEaWFsb2dEZXNjcmlwdGlvbj4KICAgICAgICAgICAgRW50ZXIgdGhlIGRldGFpbHMgZm9yIHRoZSBuZXcgZW5kcG9pbnQuCiAgICAgICAgICA8L0RpYWxvZ0Rlc2NyaXB0aW9uPgogICAgICAgIDwvRGlhbG9nSGVhZGVyPgogICAgICAgIDxkaXYgY2xhc3NOYW1lPSJzcGFjZS15LTQiPgogICAgICAgICAgPElucHV0CiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbmRwb2ludCBOYW1lIgogICAgICAgICAgICB2YWx1ZT17bmV3RW5kcG9pbnROYW1lfQogICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldE5ld0VuZHBvaW50TmFtZShlLnRhcmdldC52YWx1ZSl9CiAgICAgICAgICAvPgogICAgICAgICAgPElucHV0CiAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJFbmRwb2ludCBVUkwiCiAgICAgICAgICAgIHZhbHVlPXtuZXdFbmRwb2ludFVybH0KICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXROZXdFbmRwb2ludFVybChlLnRhcmdldC52YWx1ZSl9CiAgICAgICAgICAvPgogICAgICAgIDwvZGl2PgogICAgICAgIDxEaWFsb2dGb290ZXI+CiAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2hhbmRsZUFkZEVuZHBvaW50fT5BZGQ8L0J1dHRvbj4KICAgICAgICA8L0RpYWxvZ0Zvb3Rlcj4KICAgICAgPC9EaWFsb2dDb250ZW50PgogICAgPC9EaWFsb2c+CiAgKTsKfQoKaW50ZXJmYWNlIFRvcEJhclByb3BzIHsKICB0aHJlYWROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7CiAgZW5kcG9pbnRzOiBFbmRwb2ludFtdOwogIHNlbGVjdGVkRW5kcG9pbnQ6IEVuZHBvaW50OwogIHNldFNlbGVjdGVkRW5kcG9pbnQ6IChlbmRwb2ludDogRW5kcG9pbnQpID0+IHZvaWQ7CiAgYWRkRW5kcG9pbnQ6IChlbmRwb2ludDogRW5kcG9pbnQpID0+IHZvaWQ7Cn0KCmNvbnN0IFVTRVJfUkFHX0NIVU5LX1NJWkUgPSA1MTI7CmNvbnN0IFRFWFRfREVMSU1TID0gWyIuXG5cbiIsICJcblxuIiwgIi5cbiIsICJcbiIsICIuICIsICIuIl07CgpmdW5jdGlvbiBJbmdlc3RJdGVtKCkgewogIGNvbnN0IHsgdG9hc3QgfSA9IHVzZVRvYXN0KCk7CgogIGNvbnN0IGhhbmRsZUNsaWNrID0gKCkgPT4gewogICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogICAgaW5wdXQudHlwZSA9ICJmaWxlIjsKICAgIGlucHV0LmFjY2VwdCA9ICIudHh0IjsgLy8gT25seSBhbGxvdyB0ZXh0IGZpbGVzCiAgICBpbnB1dC5vbmNoYW5nZSA9IGFzeW5jIChldmVudCkgPT4gewogICAgICBjb25zdCBmaWxlID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS5maWxlcz8uWzBdIHx8IG51bGw7CiAgICAgIGlmIChmaWxlKSB7CiAgICAgICAgY29uc29sZS5kZWJ1ZygiR290OiIsIGZpbGUpOwogICAgICAgIGNvbnN0IHRleHRfY29udGVudCA9IGF3YWl0IGZpbGUudGV4dCgpOwogICAgICAgIGNvbnN0IGNodW5rcyA9IGNodW5rVGV4dCgKICAgICAgICAgIHRleHRfY29udGVudCwKICAgICAgICAgIFVTRVJfUkFHX0NIVU5LX1NJWkUsCiAgICAgICAgICBURVhUX0RFTElNUywKICAgICAgICApOwogICAgICAgIC8vIFRPRE86IENoZWNrIHRoaXMKICAgICAgICBjb25zdCBwcm9taXNlcyA9IGNodW5rcy5tYXAoCiAgICAgICAgICAvKmFzeW5jIChjaHVuaykgPT4KICAgICAgICAgICAgZmV0Y2goIi9hcGkiLCB7CiAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgaGVhZGVyczogeyAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iIH0sCiAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgdGV4dDogY2h1bmssCiAgICAgICAgICAgICAgICBtZXRob2Q6ICJpbmdlc3QiLAogICAgICAgICAgICAgICAgbWV0YTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICB0b2tlbjogKGF3YWl0IGdldFRva2VuRnJvbUluZGV4ZWREQigpKSB8fCAiTlVMTF9UT0tFTiIsCiAgICAgICAgICAgICAgICAgIGNodW5rX3NvdXJjZTogZmlsZS5uYW1lLAogICAgICAgICAgICAgICAgfSksIC8vIFRPRE86IEFkZCBKU09OIGZvciB1c2VyLXJlbGF0ZWQgc3R1ZmYgaGVyZS4gRm9yIG5vdyB0aGlzIGlzIHRoZSBzb3VyY2UuIFNlZSBbcm91dGUudHNdIGZvciBtb3JlIGluZm9ybWF0aW9uLgogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICB9KS50aGVuKChyKSA9PiByLmpzb24oKSksKi8KICAgICAgICAgIHNlbmRBUElSZXF1ZXN0KCJpbmdlc3QiLCB7CiAgICAgICAgICAgIHRva2VuOiAoYXdhaXQgZ2V0VG9rZW5Gcm9tSW5kZXhlZERCKCkpIHx8ICJOVUxMX1RPS0VOIiwKICAgICAgICAgICAgY2h1bmtfc291cmNlOiBmaWxlLm5hbWUsCiAgICAgICAgICB9KSwKICAgICAgICApOwogICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7CiAgICAgICAgY29uc29sZS5kZWJ1ZyhyZXN1bHRzKTsKICAgICAgICBjb25zdCBlcnJvcl9jb3VudCA9IHJlc3VsdHMuZmlsdGVyKChhKSA9PiBhLmVycm9yKS5sZW5ndGg7CiAgICAgICAgaWYgKGVycm9yX2NvdW50ID4gMCkgewogICAgICAgICAgY29uc29sZS5lcnJvcigKICAgICAgICAgICAgIkZhaWxlZCB0byBpbmdlc3QiLAogICAgICAgICAgICBlcnJvcl9jb3VudCwKICAgICAgICAgICAgImNodW5rKHMpIG91dCBvZiIsCiAgICAgICAgICAgIHJlc3VsdHMubGVuZ3RoLAogICAgICAgICAgICAiKCIsCiAgICAgICAgICAgIChlcnJvcl9jb3VudCAvIHJlc3VsdHMubGVuZ3RoKSAqIDEwMCwKICAgICAgICAgICAgIiUgKSIsCiAgICAgICAgICApOwogICAgICAgICAgdG9hc3QoewogICAgICAgICAgICB0aXRsZTogIkluY29tcGxldGUgSW5nZXN0aW9uIiwKICAgICAgICAgICAgZGVzY3JpcHRpb246ICJTb21lIGNodW5rcyB3ZXJlIG5vdCBpbmdlc3RlZC4iLAogICAgICAgICAgICB2YXJpYW50OiAiZGVzdHJ1Y3RpdmUiLAogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRvYXN0KHsKICAgICAgICAgICAgdGl0bGU6ICJTdWNjZXNzZnVsIEluZ2VzdGlvbiIsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uOgogICAgICAgICAgICAgICJUaGUgcHJvdmlkZWQgZG9jdW1lbnQgd2FzIGNvbXBsZXRlbHkgY2h1bmtlZCBhbmQgaW5nZXN0ZWQuIiwKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfTsKICAgIGlucHV0LmNsaWNrKCk7CiAgfTsKCiAgcmV0dXJuICgKICAgIDxEcm9wZG93bk1lbnVJdGVtCiAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrfQogICAgICBjbGFzc05hbWU9ImhvdmVyOmJnLXNlY29uZGFyeSBjdXJzb3ItcG9pbnRlciIKICAgID4KICAgICAgSW5nZXN0CiAgICA8L0Ryb3Bkb3duTWVudUl0ZW0+CiAgKTsKfQoKZnVuY3Rpb24gVG9wQmFyKHsKICB0aHJlYWROYW1lLAogIGVuZHBvaW50cywKICBzZWxlY3RlZEVuZHBvaW50LAogIHNldFNlbGVjdGVkRW5kcG9pbnQsCiAgYWRkRW5kcG9pbnQsCn06IFRvcEJhclByb3BzKSB7CiAgcmV0dXJuICgKICAgIDxoZWFkZXIgY2xhc3NOYW1lPSJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gcC00IGJvcmRlci1iIj4KICAgICAgPGgyIGNsYXNzTmFtZT0idGV4dC1sZyBmb250LXNlbWlib2xkIj57dGhyZWFkTmFtZX08L2gyPgogICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0yIj4KICAgICAgICA8TW9kZVRvZ2dsZSAvPgogICAgICAgIDxFbmRwb2ludFNlbGVjdAogICAgICAgICAgZW5kcG9pbnRzPXtlbmRwb2ludHN9CiAgICAgICAgICBzZWxlY3RlZEVuZHBvaW50PXtzZWxlY3RlZEVuZHBvaW50fQogICAgICAgICAgc2V0U2VsZWN0ZWRFbmRwb2ludD17c2V0U2VsZWN0ZWRFbmRwb2ludH0KICAgICAgICAgIGFkZEVuZHBvaW50PXthZGRFbmRwb2ludH0KICAgICAgICAvPgogICAgICAgIDxEcm9wZG93bk1lbnU+CiAgICAgICAgICA8RHJvcGRvd25NZW51VHJpZ2dlciBhc0NoaWxkPgogICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9Imdob3N0IiBjbGFzc05hbWU9InRleHQtbGciPgogICAgICAgICAgICAgIOKLrgogICAgICAgICAgICA8L0J1dHRvbj4KICAgICAgICAgIDwvRHJvcGRvd25NZW51VHJpZ2dlcj4KICAgICAgICAgIDxEcm9wZG93bk1lbnVDb250ZW50PgogICAgICAgICAgICA8TmV3RW5kcG9pbnREaWFsb2cKICAgICAgICAgICAgICBhZGRFbmRwb2ludD17YWRkRW5kcG9pbnR9CiAgICAgICAgICAgICAgY2xhc3NOYW1lPSJob3ZlcjpiZy1zZWNvbmRhcnkiCiAgICAgICAgICAgIC8+CiAgICAgICAgICAgIDxJbmdlc3RJdGVtIC8+CiAgICAgICAgICAgIDxEcm9wZG93bk1lbnVJdGVtPgogICAgICAgICAgICAgIDxMaW5rIGhyZWY9Ii9oZWxwIj5IZWxwPC9MaW5rPgogICAgICAgICAgICA8L0Ryb3Bkb3duTWVudUl0ZW0+CiAgICAgICAgICA8L0Ryb3Bkb3duTWVudUNvbnRlbnQ+CiAgICAgICAgPC9Ecm9wZG93bk1lbnU+CiAgICAgIDwvZGl2PgogICAgPC9oZWFkZXI+CiAgKTsKfQoKLy8gQ2hhdCBQYW5lbCBDb21wb25lbnQKaW50ZXJmYWNlIENoYXRQYW5lbFByb3BzIHsKICBtZXNzYWdlczogTWVzc2FnZVtdOwp9CgpmdW5jdGlvbiBDaGF0UGFuZWwoeyBtZXNzYWdlcyB9OiBDaGF0UGFuZWxQcm9wcykgewogIHJldHVybiAoCiAgICA8PgogICAgICA8c3R5bGU+CiAgICAgICAge2AKICAgICAgICAgIC5oaWRlLXNjcm9sbGJhciB7CiAgICAgICAgICAgIHNjcm9sbGJhci13aWR0aDogbm9uZTsgLyogRmlyZWZveCAqLwogICAgICAgICAgICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7IC8qIElFIDEwKyAqLwogICAgICAgICAgfQogICAgICAgICAgLmhpZGUtc2Nyb2xsYmFyOjotd2Via2l0LXNjcm9sbGJhciB7CiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7IC8qIFNhZmFyaSBhbmQgQ2hyb21lICovCiAgICAgICAgICB9CiAgICAgICAgYH0KICAgICAgPC9zdHlsZT4KICAgICAgPFNjcm9sbEFyZWEgY2xhc3NOYW1lPSJmbGV4IGZsZXgtY29sIHAtNCBzcGFjZS15LTQgdy1mdWxsIGZsZXgtZ3JvdyBvdmVyZmxvdy15LWF1dG8gaGlkZS1zY3JvbGxiYXIiPgogICAgICAgIHttZXNzYWdlcy5tYXAoKG1lc3NhZ2UsIGluZGV4KSA9PiAoCiAgICAgICAgICA8VG9vbHRpcFByb3ZpZGVyIGtleT17aW5kZXh9PgogICAgICAgICAgICA8VG9vbHRpcD4KICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2ByZWxhdGl2ZSBmbGV4ICR7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaXNVc2VyID8gImp1c3RpZnktZW5kIiA6ICJqdXN0aWZ5LXN0YXJ0IgogICAgICAgICAgICAgICAgfWB9CiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgey8qIE1lc3NhZ2UgQnViYmxlICovfQogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2ByZWxhdGl2ZSBpbmxpbmUtZmxleCBmbGV4LWNvbCBpdGVtcy1zdGFydCBwLTMgcm91bmRlZC1bMzBweF0gYmctc2Vjb25kYXJ5IGB9CiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7CiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAiMjBweCAvIDMwcHgiLAogICAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiAiODAlIiwgLy8gTWF4IHdpZHRoIGZvciBsb25nIG1lc3NhZ2VzCiAgICAgICAgICAgICAgICAgIH19CiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIHsvKiBBdmF0YXIgKi99CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BhYnNvbHV0ZSB0b3AtMSAkewogICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pc1VzZXIgPyAicmlnaHQtMSIgOiAibGVmdC0xIgogICAgICAgICAgICAgICAgICAgIH1gfQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgPEF2YXRhcj4KICAgICAgICAgICAgICAgICAgICAgIDxBdmF0YXJJbWFnZQogICAgICAgICAgICAgICAgICAgICAgICBzcmM9ewogICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaXNVc2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFVTRVJfQVZBVEFSX1BMQUNFSE9MREVSCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFRIUkVBRF9JTUFHRV9QTEFDRUhPTERFUgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD17bWVzc2FnZS5jb250ZW50fQogICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgIDxBdmF0YXJGYWxsYmFjaz4KICAgICAgICAgICAgICAgICAgICAgICAge21lc3NhZ2UuaXNVc2VyID8gIlUiIDogIlIifQogICAgICAgICAgICAgICAgICAgICAgPC9BdmF0YXJGYWxsYmFjaz4KICAgICAgICAgICAgICAgICAgICA8L0F2YXRhcj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIHsvKiBUb29sdGlwIFRyaWdnZXI6IFdyYXAgdGhlIG1lc3NhZ2UgY29udGVudCAqL30KICAgICAgICAgICAgICAgICAgPFRvb2x0aXBUcmlnZ2VyIGFzQ2hpbGQ+CiAgICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHsKICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pc1VzZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA/ICJtci0xMiBtbC0yIHRleHQtc20gbXQtMSBtYi0xIgogICAgICAgICAgICAgICAgICAgICAgICAgIDogIm1sLTEyIG1yLTIgdGV4dC1zbSBtdC0xIG1iLTEiCiAgICAgICAgICAgICAgICAgICAgICB9YH0KICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8TWFya2Rvd25SZW5kZXJlciBjb250ZW50PXttZXNzYWdlLmNvbnRlbnR9IC8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvVG9vbHRpcFRyaWdnZXI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICB7LyogVG9vbHRpcCBDb250ZW50ICovfQogICAgICAgICAgICAgIDxUb29sdGlwQ29udGVudCBjbGFzc05hbWU9ImFic29sdXRlIC10cmFuc2xhdGUteC0xLzIgYm90dG9tLWZ1bGwgbWItNCB3aGl0ZXNwYWNlLW5vd3JhcCBweC0yIHB5LTEgYmctcHJpbWFyeSB0ZXh0LXNlY29uZGFyeSI+CiAgICAgICAgICAgICAgICA8cD57bWVzc2FnZS5pc1VzZXIgPyAiU2VudCBieSB5b3UiIDogIlJlY2VpdmVkIn08L3A+CiAgICAgICAgICAgICAgPC9Ub29sdGlwQ29udGVudD4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ibWItNCIgLz4KICAgICAgICAgICAgPC9Ub29sdGlwPgogICAgICAgICAgPC9Ub29sdGlwUHJvdmlkZXI+CiAgICAgICAgKSl9CiAgICAgIDwvU2Nyb2xsQXJlYT4KICAgIDwvPgogICk7Cn0KCmludGVyZmFjZSBDb2RlQmxvY2tQcm9wcyB7CiAgY29kZTogc3RyaW5nOwogIGxhbmd1YWdlOiBzdHJpbmc7Cn0KCmV4cG9ydCBmdW5jdGlvbiBDb2RlQmxvY2soeyBjb2RlLCBsYW5ndWFnZSB9OiBDb2RlQmxvY2tQcm9wcykgewogIGNvbnN0IGhhbmRsZUNvcHkgPSBhc3luYyAoKSA9PiB7CiAgICBhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChjb2RlKTsKICB9OwoKICByZXR1cm4gKAogICAgPGRpdiBzdHlsZT17eyBwb3NpdGlvbjogInJlbGF0aXZlIiB9fT4KICAgICAgPFN5bnRheEhpZ2hsaWdodGVyCiAgICAgICAgbGFuZ3VhZ2U9e2xhbmd1YWdlfQogICAgICAgIHN0eWxlPXttYXRlcmlhbERhcmt9CiAgICAgICAgc2hvd0xpbmVOdW1iZXJzCiAgICAgICAgUHJlVGFnPSJkaXYiCiAgICAgID4KICAgICAgICB7Y29kZX0KICAgICAgPC9TeW50YXhIaWdobGlnaHRlcj4KICAgICAgPEJ1dHRvbgogICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNvcHl9CiAgICAgICAgdmFyaWFudD0ib3V0bGluZSIKICAgICAgICBzdHlsZT17eyBwb3NpdGlvbjogImFic29sdXRlIiwgdG9wOiAiMTBweCIsIHJpZ2h0OiAiMTBweCIgfX0KICAgICAgPgogICAgICAgIDxDb3B5IC8+IENvcHkKICAgICAgPC9CdXR0b24+CiAgICA8L2Rpdj4KICApOwp9CgppbnRlcmZhY2UgTWFya2Rvd25SZW5kZXJlclByb3BzIHsKICBjb250ZW50OiBzdHJpbmc7Cn0KCmV4cG9ydCBmdW5jdGlvbiBNYXJrZG93blJlbmRlcmVyKHsgY29udGVudCB9OiBNYXJrZG93blJlbmRlcmVyUHJvcHMpIHsKICByZXR1cm4gKAogICAgPE1hcmtkb3duCiAgICAgIGNsYXNzTmFtZT0iZGlzcGxheS1ibG9jayIKICAgICAgY29tcG9uZW50cz17ewogICAgICAgIGNvZGUocHJvcHMpIHsKICAgICAgICAgIGNvbnN0IHsgY2hpbGRyZW4sIGNsYXNzTmFtZSwgLi4ucmVzdCB9ID0gcHJvcHM7CiAgICAgICAgICBjb25zdCBtYXRjaCA9IC9sYW5ndWFnZS0oXHcrKS8uZXhlYyhjbGFzc05hbWUgfHwgIiIpOwogICAgICAgICAgcmV0dXJuIG1hdGNoID8gKAogICAgICAgICAgICA8Q29kZUJsb2NrCiAgICAgICAgICAgICAgey4uLnJlc3R9CiAgICAgICAgICAgICAgbGFuZ3VhZ2U9e21hdGNoWzFdfQogICAgICAgICAgICAgIGNvZGU9e1N0cmluZyhjaGlsZHJlbikucmVwbGFjZSgvXG4kLywgIiIpfQogICAgICAgICAgICAvPgogICAgICAgICAgKSA6ICgKICAgICAgICAgICAgPGNvZGUgey4uLnJlc3R9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT4KICAgICAgICAgICAgICB7Y2hpbGRyZW59CiAgICAgICAgICAgIDwvY29kZT4KICAgICAgICAgICk7CiAgICAgICAgfSwKICAgICAgfX0KICAgID4KICAgICAge2NvbnRlbnR9CiAgICA8L01hcmtkb3duPgogICk7Cn0KCi8vIElucHV0IEFyZWEgQ29tcG9uZW50CmludGVyZmFjZSBJbnB1dEFyZWFQcm9wcyB7CiAgb25TZW5kTWVzc2FnZTogKHRleHQ6IHN0cmluZykgPT4gdm9pZDsKfQoKZnVuY3Rpb24gSW5wdXRBcmVhKHsgb25TZW5kTWVzc2FnZSB9OiBJbnB1dEFyZWFQcm9wcykgewogIGNvbnN0IFtpbnB1dCwgc2V0SW5wdXRdID0gdXNlU3RhdGUoIiIpOwogIGNvbnN0IHRleHRhcmVhUmVmID0gdXNlUmVmPEhUTUxUZXh0QXJlYUVsZW1lbnQ+KG51bGwpOwoKICBjb25zdCBoYW5kbGVTZW5kID0gKCkgPT4gewogICAgaWYgKGlucHV0LnRyaW0oKSkgewogICAgICBvblNlbmRNZXNzYWdlKGlucHV0KTsKICAgICAgc2V0SW5wdXQoIiIpOwogICAgfQogIH07CgogIHVzZUVmZmVjdCgoKSA9PiB7CiAgICBpZiAodGV4dGFyZWFSZWYuY3VycmVudCkgewogICAgICB0ZXh0YXJlYVJlZi5jdXJyZW50LnN0eWxlLmhlaWdodCA9ICJhdXRvIjsKICAgICAgdGV4dGFyZWFSZWYuY3VycmVudC5zdHlsZS5oZWlnaHQgPSBgJHt0ZXh0YXJlYVJlZi5jdXJyZW50LnNjcm9sbEhlaWdodH1weGA7CiAgICB9CiAgfSwgW2lucHV0XSk7CgogIHJldHVybiAoCiAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBpdGVtcy1jZW50ZXIgcC00IGJvcmRlci10Ij4KICAgICAgPHN0eWxlPgogICAgICAgIHtgCiAgICAgICAgLnNjcm9sbGFibGUtY29udGVudCB7CiAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvOwogICAgICAgICAgbWF4LWhlaWdodDogMzAwcHg7IC8qIEFkanVzdCB0aGlzIHZhbHVlIHRvIGNvbnRyb2wgdGhlIHRleHRhcmVhIHNjcm9sbGFibGUgaGVpZ2h0ICovCiAgICAgICAgfQogICAgICBgfQogICAgICA8L3N0eWxlPgogICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleC1ncm93IG1yLTMiPgogICAgICAgIDxTY3JvbGxBcmVhPgogICAgICAgICAgPGRpdiBjbGFzc05hbWU9InNjcm9sbGFibGUtY29udGVudCI+CiAgICAgICAgICAgIDxUZXh0YXJlYQogICAgICAgICAgICAgIHJlZj17dGV4dGFyZWFSZWZ9CiAgICAgICAgICAgICAgdmFsdWU9e2lucHV0fQogICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0SW5wdXQoZS50YXJnZXQudmFsdWUpfQogICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJUeXBlIGEgbWVzc2FnZS4uLiIKICAgICAgICAgICAgICBjbGFzc05hbWU9InctZnVsbCBtYi0wIGJvcmRlciByb3VuZGVkIHJlc2l6ZS1ub25lIgogICAgICAgICAgICAgIHJvd3M9ezF9CiAgICAgICAgICAgICAgc3R5bGU9e3sgb3ZlcmZsb3c6ICJoaWRkZW4iIH19CiAgICAgICAgICAgIC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L1Njcm9sbEFyZWE+CiAgICAgIDwvZGl2PgogICAgICA8QnV0dG9uCiAgICAgICAgb25DbGljaz17aGFuZGxlU2VuZH0KICAgICAgICBjbGFzc05hbWU9ImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIgogICAgICAgIHZhcmlhbnQ9Im91dGxpbmUiCiAgICAgID4KICAgICAgICA8U2VuZCBjbGFzc05hbWU9InctNCBoLTQiIC8+CiAgICAgIDwvQnV0dG9uPgogICAgPC9kaXY+CiAgKTsKfQr7cAAAAAAAAPxwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADOCgAAAAAAAM4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					954,
					1,
					"paste",
					null,
					"AgAAALAIAAAAAAAADg8AAAAAAAAAAAAADg8AAAAAAAAODwAAAAAAALEFAABhc3luYyBmdW5jdGlvbiBzdG9yZUluSW5kZXhlZERCKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKICAgIGNvbnN0IGRiTmFtZSA9ICJVc2VyREIiOwogICAgY29uc3Qgc3RvcmVOYW1lID0gIktleVZhbHVlU3RvcmUiOwoKICAgIC8vIE9wZW4gYSBjb25uZWN0aW9uIHRvIHRoZSBkYXRhYmFzZQogICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSwgMSk7CgogICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoZXZlbnQpID0+IHsKICAgICAgY29uc3QgZGIgPSAoZXZlbnQudGFyZ2V0IGFzIElEQk9wZW5EQlJlcXVlc3QpLnJlc3VsdDsKCiAgICAgIC8vIENyZWF0ZSBvYmplY3Qgc3RvcmUgaWYgaXQgZG9lc24ndCBleGlzdAogICAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoc3RvcmVOYW1lKSkgewogICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKHN0b3JlTmFtZSwgeyBrZXlQYXRoOiAiaWQiIH0pOwogICAgICB9CiAgICB9OwoKICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKGV2ZW50KSA9PiB7CiAgICAgIGNvbnN0IGRiID0gKGV2ZW50LnRhcmdldCBhcyBJREJPcGVuREJSZXF1ZXN0KS5yZXN1bHQ7CgogICAgICAvLyBPcGVuIGEgdHJhbnNhY3Rpb24gYW5kIGdldCB0aGUgb2JqZWN0IHN0b3JlCiAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAicmVhZHdyaXRlIik7CiAgICAgIGNvbnN0IHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTsKCiAgICAgIC8vIEFkZCB0aGUga2V5LXZhbHVlIHBhaXIgdG8gdGhlIHN0b3JlCiAgICAgIGNvbnN0IGFkZFJlcXVlc3QgPSBzdG9yZS5wdXQodmFsdWUsIGtleSk7CgogICAgICBhZGRSZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHsKICAgICAgICByZXNvbHZlKCk7CiAgICAgIH07CgogICAgICBhZGRSZXF1ZXN0Lm9uZXJyb3IgPSAoZXJyKSA9PiB7CiAgICAgICAgcmVqZWN0KAogICAgICAgICAgbmV3IEVycm9yKAogICAgICAgICAgICAiRXJyb3Igc3RvcmluZyB0aGUga2V5LXZhbHVlIHBhaXI6ICIgKwogICAgICAgICAgICAgIChlcnIudGFyZ2V0IGFzIElEQlJlcXVlc3QpLmVycm9yLAogICAgICAgICAgKSwKICAgICAgICApOwogICAgICB9OwoKICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9ICgpID0+IHsKICAgICAgICBkYi5jbG9zZSgpOwogICAgICB9OwogICAgfTsKCiAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZXJyKSA9PiB7CiAgICAgIHJlamVjdCgKICAgICAgICBuZXcgRXJyb3IoCiAgICAgICAgICAiRXJyb3Igb3BlbmluZyB0aGUgZGF0YWJhc2U6ICIgKyAoZXJyLnRhcmdldCBhcyBJREJSZXF1ZXN0KS5lcnJvciwKICAgICAgICApLAogICAgICApOwogICAgfTsKICB9KTsKfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwCAAAAAAAAGEOAAAAAAAAAAAAAAAA8L8"
				],
				[
					959,
					1,
					"insert",
					{
						"characters": "Thread"
					},
					"BwAAAJEPAAAAAAAAkg8AAAAAAAAAAAAAkg8AAAAAAACSDwAAAAAAAAQAAABVc2Vykg8AAAAAAACTDwAAAAAAAAAAAACTDwAAAAAAAJQPAAAAAAAAAAAAAJQPAAAAAAAAlQ8AAAAAAAAAAAAAlQ8AAAAAAACWDwAAAAAAAAAAAACWDwAAAAAAAJcPAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVDwAAAAAAAJEPAAAAAAAAAAAAAAAA8L8"
				],
				[
					960,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXDwAAAAAAAJcPAAAAAAAAAAAAAAAA8L8"
				],
				[
					961,
					1,
					"left_delete",
					null,
					"BgAAAJkPAAAAAAAAmQ8AAAAAAAABAAAAZJgPAAAAAAAAmA8AAAAAAAABAAAAYZcPAAAAAAAAlw8AAAAAAAABAAAAZZYPAAAAAAAAlg8AAAAAAAABAAAAcpUPAAAAAAAAlQ8AAAAAAAABAAAAaJQPAAAAAAAAlA8AAAAAAAABAAAAVA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaDwAAAAAAAJoPAAAAAAAAAAAAAAAA8L8"
				],
				[
					962,
					1,
					"insert",
					{
						"characters": "User"
					},
					"BAAAAJQPAAAAAAAAlQ8AAAAAAAAAAAAAlQ8AAAAAAACWDwAAAAAAAAAAAACWDwAAAAAAAJcPAAAAAAAAAAAAAJcPAAAAAAAAmA8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUDwAAAAAAAJQPAAAAAAAAAAAAAAAA8L8"
				],
				[
					968,
					1,
					"insert",
					{
						"characters": "Trhe"
					},
					"BQAAAD0JAAAAAAAAPgkAAAAAAAAAAAAAPgkAAAAAAAA+CQAAAAAAAAQAAABVc2VyPgkAAAAAAAA/CQAAAAAAAAAAAAA/CQAAAAAAAEAJAAAAAAAAAAAAAEAJAAAAAAAAQQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBCQAAAAAAAD0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					969,
					1,
					"left_delete",
					null,
					"AwAAAEAJAAAAAAAAQAkAAAAAAAABAAAAZT8JAAAAAAAAPwkAAAAAAAABAAAAaD4JAAAAAAAAPgkAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBCQAAAAAAAEEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					970,
					1,
					"insert",
					{
						"characters": "hread"
					},
					"BQAAAD4JAAAAAAAAPwkAAAAAAAAAAAAAPwkAAAAAAABACQAAAAAAAAAAAABACQAAAAAAAEEJAAAAAAAAAAAAAEEJAAAAAAAAQgkAAAAAAAAAAAAAQgkAAAAAAABDCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+CQAAAAAAAD4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					974,
					1,
					"left_delete",
					null,
					"BAAAAJkPAAAAAAAAmQ8AAAAAAAABAAAAcpgPAAAAAAAAmA8AAAAAAAABAAAAZZcPAAAAAAAAlw8AAAAAAAABAAAAc5YPAAAAAAAAlg8AAAAAAAABAAAAVQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaDwAAAAAAAJoPAAAAAAAAAAAAAAAA8L8"
				],
				[
					975,
					1,
					"insert",
					{
						"characters": "Thread"
					},
					"BgAAAJYPAAAAAAAAlw8AAAAAAAAAAAAAlw8AAAAAAACYDwAAAAAAAAAAAACYDwAAAAAAAJkPAAAAAAAAAAAAAJkPAAAAAAAAmg8AAAAAAAAAAAAAmg8AAAAAAACbDwAAAAAAAAAAAACbDwAAAAAAAJwPAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWDwAAAAAAAJYPAAAAAAAAAAAAAAAA8L8"
				],
				[
					1300,
					1,
					"insert",
					{
						"characters": "local"
					},
					"BgAAABEvAAAAAAAAEi8AAAAAAAAAAAAAEi8AAAAAAAASLwAAAAAAABAAAABzdG9yZUluSW5kZXhlZERCEi8AAAAAAAATLwAAAAAAAAAAAAATLwAAAAAAABQvAAAAAAAAAAAAABQvAAAAAAAAFS8AAAAAAAAAAAAAFS8AAAAAAAAWLwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhLwAAAAAAABEvAAAAAAAAAAAAAAAA8L8"
				],
				[
					1303,
					1,
					"insert",
					{
						"characters": "sto"
					},
					"AwAAABYvAAAAAAAAFy8AAAAAAAAAAAAAFy8AAAAAAAAYLwAAAAAAAAAAAAAYLwAAAAAAABkvAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWLwAAAAAAABYvAAAAAAAAAAAAAAAA8L8"
				],
				[
					1304,
					1,
					"insert_completion",
					{
						"completion": "localStorage",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "localStorage"
					},
					"AgAAABEvAAAAAAAAES8AAAAAAAAIAAAAbG9jYWxzdG8RLwAAAAAAAB0vAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZLwAAAAAAABkvAAAAAAAAAAAAAAAA8L8"
				],
				[
					1305,
					1,
					"insert",
					{
						"characters": ".setIte"
					},
					"BwAAAB0vAAAAAAAAHi8AAAAAAAAAAAAAHi8AAAAAAAAfLwAAAAAAAAAAAAAfLwAAAAAAACAvAAAAAAAAAAAAACAvAAAAAAAAIS8AAAAAAAAAAAAAIS8AAAAAAAAiLwAAAAAAAAAAAAAiLwAAAAAAACMvAAAAAAAAAAAAACMvAAAAAAAAJC8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdLwAAAAAAAB0vAAAAAAAAAAAAAAAA8L8"
				],
				[
					1306,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAACQvAAAAAAAAJS8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkLwAAAAAAACQvAAAAAAAAAAAAAAAA8L8"
				],
				[
					1311,
					1,
					"insert",
					{
						"characters": "loca"
					},
					"BQAAAJkuAAAAAAAAmi4AAAAAAAAAAAAAmi4AAAAAAACaLgAAAAAAABAAAABzdG9yZUluSW5kZXhlZERCmi4AAAAAAACbLgAAAAAAAAAAAACbLgAAAAAAAJwuAAAAAAAAAAAAAJwuAAAAAAAAnS4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpLgAAAAAAAJkuAAAAAAAAAAAAAAAA8L8"
				],
				[
					1312,
					1,
					"insert_completion",
					{
						"completion": "localStorage",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "localStorage"
					},
					"AgAAAJkuAAAAAAAAmS4AAAAAAAAEAAAAbG9jYZkuAAAAAAAApS4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdLgAAAAAAAJ0uAAAAAAAAAAAAAAAA8L8"
				],
				[
					1313,
					1,
					"insert",
					{
						"characters": ".set"
					},
					"BAAAAKUuAAAAAAAApi4AAAAAAAAAAAAApi4AAAAAAACnLgAAAAAAAAAAAACnLgAAAAAAAKguAAAAAAAAAAAAAKguAAAAAAAAqS4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClLgAAAAAAAKUuAAAAAAAAAAAAAAAA8L8"
				],
				[
					1314,
					1,
					"insert_completion",
					{
						"completion": "setItem",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setItem"
					},
					"AgAAAKYuAAAAAAAApi4AAAAAAAADAAAAc2V0pi4AAAAAAACtLgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpLgAAAAAAAKkuAAAAAAAAAAAAAAAA8L8"
				],
				[
					1317,
					1,
					"insert",
					{
						"characters": "loca"
					},
					"BQAAADMuAAAAAAAANC4AAAAAAAAAAAAANC4AAAAAAAA0LgAAAAAAABAAAABzdG9yZUluSW5kZXhlZERCNC4AAAAAAAA1LgAAAAAAAAAAAAA1LgAAAAAAADYuAAAAAAAAAAAAADYuAAAAAAAANy4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDLgAAAAAAADMuAAAAAAAAAAAAAAAA8L8"
				],
				[
					1318,
					1,
					"insert_completion",
					{
						"completion": "localStorage",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "localStorage"
					},
					"AgAAADMuAAAAAAAAMy4AAAAAAAAEAAAAbG9jYTMuAAAAAAAAPy4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3LgAAAAAAADcuAAAAAAAAAAAAAAAA8L8"
				],
				[
					1319,
					1,
					"insert",
					{
						"characters": ".se"
					},
					"AwAAAD8uAAAAAAAAQC4AAAAAAAAAAAAAQC4AAAAAAABBLgAAAAAAAAAAAABBLgAAAAAAAEIuAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/LgAAAAAAAD8uAAAAAAAAAAAAAAAA8L8"
				],
				[
					1320,
					1,
					"insert_completion",
					{
						"completion": "setItem",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setItem"
					},
					"AgAAAEAuAAAAAAAAQC4AAAAAAAACAAAAc2VALgAAAAAAAEcuAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCLgAAAAAAAEIuAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "z"
					},
					"AQAAAFgcAAAAAAAAWRwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBwAAAAAAABYHAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAFgcAAAAAAAAWBwAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAAWRwAAAAAAABZHAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "app/page.tsx",
			"settings":
			{
				"buffer_size": 5581,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAABYUAAAAAAAAFxQAAAAAAAAAAAAAFxQAAAAAAAAhFAAAAAAAAAAAAAAXFAAAAAAAABcUAAAAAAAACgAAACAgICAgICAgICAXFAAAAAAAAB8UAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhQAAAAAAAAWFAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAAB8UAAAAAAAAeBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHxQAAAAAAAAfFAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAB8UAAAAAAAAIRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHxQAAAAAAAAfFAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "hep"
					},
					"BAAAAFgUAAAAAAAAWRQAAAAAAAAAAAAAWRQAAAAAAABZFAAAAAAAABAAAABUZXJtcyBvZiBTZXJ2aWNlWRQAAAAAAABaFAAAAAAAAAAAAABaFAAAAAAAAFsUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBQAAAAAAABYFAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAAFoUAAAAAAAAWhQAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAWxQAAAAAAABbFAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "lp"
					},
					"AgAAAFoUAAAAAAAAWxQAAAAAAAAAAAAAWxQAAAAAAABcFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhQAAAAAAABaFAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "help"
					},
					"BQAAAC4UAAAAAAAALxQAAAAAAAAAAAAALxQAAAAAAAAvFAAAAAAAAAUAAAB0ZXJtcy8UAAAAAAAAMBQAAAAAAAAAAAAAMBQAAAAAAAAxFAAAAAAAAAAAAAAxFAAAAAAAADIUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMxQAAAAAAAAuFAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/llmcall.ts",
			"settings":
			{
				"buffer_size": 16959,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "app/login/page.tsx",
			"redo_stack":
			[
			],
			"settings":
			{
				"buffer_size": 7448,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPEHAAAAAAAA8gcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxBwAAAAAAAPEHAAAAAAAAAAAAAAAAJEA"
				],
				[
					9,
					1,
					"paste",
					null,
					"AQAAAPIHAAAAAAAAewwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyBwAAAAAAAPIHAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHsMAAAAAAAAfAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7DAAAAAAAAHsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8DAAAAAAAAHwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"left_delete",
					null,
					"AQAAALQPAAAAAAAAtA8AAAAAAAAPAAAAIXJlc3BvbnNlLm9rIHx8",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDDwAAAAAAALQPAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"right_delete",
					null,
					"AQAAALQPAAAAAAAAtA8AAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0DwAAAAAAALQPAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAHwPAAAAAAAAfQ8AAAAAAAAAAAAAfQ8AAAAAAAB+DwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8DwAAAAAAAHwPAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAMANAAAAAAAAwQ0AAAAAAAAAAAAAwQ0AAAAAAADCDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADADQAAAAAAAMANAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAAA4KAAAAAAAADwoAAAAAAAAAAAAADwoAAAAAAAAQCgAAAAAAAAAAAAAQCgAAAAAAABEKAAAAAAAAAAAAABEKAAAAAAAAEgoAAAAAAAAAAAAAEgoAAAAAAAATCgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOCgAAAAAAAA4KAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABMKAAAAAAAAFAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATCgAAAAAAABMKAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " aw"
					},
					"AwAAAA8MAAAAAAAAEAwAAAAAAAAAAAAAEAwAAAAAAAARDAAAAAAAAAAAAAARDAAAAAAAABIMAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPDAAAAAAAAA8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					3,
					"left_delete",
					null,
					"AwAAABEMAAAAAAAAEQwAAAAAAAABAAAAdxAMAAAAAAAAEAwAAAAAAAABAAAAYQ8MAAAAAAAADwwAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASDAAAAAAAABIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAAA8MAAAAAAAAEAwAAAAAAAAAAAAAEAwAAAAAAAARDAAAAAAAAAAAAAARDAAAAAAAABIMAAAAAAAAAAAAABIMAAAAAAAAEwwAAAAAAAAAAAAAEwwAAAAAAAAUDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPDAAAAAAAAA8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABQMAAAAAAAAFQwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUDAAAAAAAABQMAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "send"
					},
					"BQAAAKgPAAAAAAAAqQ8AAAAAAAAAAAAAqQ8AAAAAAACpDwAAAAAAABAAAAByZXNwb25zZS5qc29uKCk7qQ8AAAAAAACqDwAAAAAAAAAAAACqDwAAAAAAAKsPAAAAAAAAAAAAAKsPAAAAAAAArA8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4DwAAAAAAAKgPAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert_completion",
					{
						"completion": "sendAPIRequest",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sendAPIRequest"
					},
					"AgAAAKgPAAAAAAAAqA8AAAAAAAAEAAAAc2VuZKgPAAAAAAAAtg8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsDwAAAAAAAKwPAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALYPAAAAAAAAuA8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2DwAAAAAAALYPAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"paste",
					null,
					"AQAAALcPAAAAAAAAyQ8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC3DwAAAAAAALcPAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMkPAAAAAAAAyg8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJDwAAAAAAAMkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMoPAAAAAAAAyw8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKDwAAAAAAAMoPAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"paste",
					null,
					"AQAAAMsPAAAAAAAA/A8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLDwAAAAAAAMsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAMsPAAAAAAAAzA8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLDwAAAAAAAMsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAP0PAAAAAAAA/g8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9DwAAAAAAAP0PAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					2,
					"left_delete",
					null,
					"AgAAAM0NAAAAAAAAzQ0AAAAAAAABAAAAKswNAAAAAAAAzA0AAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADODQAAAAAAAM4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAPkNAAAAAAAA+g0AAAAAAAAAAAAA+g0AAAAAAAD7DQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DQAAAAAAAPkNAAAAAAAAAAAAAACATkA"
				],
				[
					75,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7DQAAAAAAAPsNAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"left_delete",
					null,
					"AQAAAPINAAAAAAAA8g0AAAAAAACaAQAACiAgICAgIC8qY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgiL2FwaSIsIHsKICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgIH0sCiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgbWV0YTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICBjcmVkZW50aWFsczogeyBlbWFpbDogZW1haWwsIHBhc3N3b3JkOiBwYXNzd29yZCB9LAogICAgICAgICAgfSksCiAgICAgICAgICBtZXRob2Q6ICJhdXRoZW50aWNhdGVVc2VyIiwgLy8gU3BlY2lmeSB0aGUgbG9naW4gbWV0aG9kCiAgICAgICAgfSksCiAgICAgIH0pOwoKICAgICAgY29uc29sZS5kZWJ1ZyhyZXNwb25zZSk7Ki8",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMDwAAAAAAAPINAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"paste",
					null,
					"AgAAAPIHAAAAAAAAzwsAAAAAAAAAAAAAzwsAAAAAAADPCwAAAAAAAJUEAABhc3luYyBmdW5jdGlvbiBzZW5kQVBJUmVxdWVzdChtZXRob2Q6IHN0cmluZywgbWV0YTogQXBpTWV0YU9iamVjdCk6IGFueSB7CiAgLy8gVE9ETzogY2hhbmdlIHRoZSByZXR1cm4gdHlwZQogIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goIi9hcGkiLCB7CiAgICBtZXRob2Q6ICJQT1NUIiwKICAgIGhlYWRlcnM6IHsKICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgIH0sCiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgIG1ldGE6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBjcmVkZW50aWFsczogewogICAgICAgICAgZW1haWw6IG1ldGEuY3JlZGVudGlhbHMuZW1haWwsCiAgICAgICAgICBwYXNzd29yZDogbWV0YS5jcmVkZW50aWFscy5wYXNzd29yZCwKICAgICAgICAgIHRva2VuOiBtZXRhLmNyZWRlbnRpYWxzLnRva2VuLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgICBtZXRob2Q6IG1ldGhvZCwKICAgIH0pLAogIH0pOwogIGNvbnNvbGUubG9nKHJlc3BvbnNlKTsKICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgaWYgKHJlc3VsdC5yZWZyZXNoKSB7CiAgICBjb25zdCBuZXdSZXNwb25zZSA9IGF3YWl0IGZldGNoKCIvYXBpIiwgewogICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgaGVhZGVyczogewogICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgIH0sCiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBtZXRhOiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICBjcmVkZW50aWFsczogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICBlbWFpbDogbWV0YS5jcmVkZW50aWFscy5lbWFpbCwKICAgICAgICAgICAgcGFzc3dvcmQ6IG1ldGEuY3JlZGVudGlhbHMucGFzc3dvcmQsCiAgICAgICAgICAgIHRva2VuOiBtZXRhLmNyZWRlbnRpYWxzLnRva2VuLAogICAgICAgICAgfSksCiAgICAgICAgfSksCiAgICAgICAgbWV0aG9kOiAicmVmcmVzaCIsCiAgICAgIH0pLAogICAgfSk7CiAgICBjb25zdCBuZXdSZXN1bHQgPSBhd2FpdCBuZXdSZXNwb25zZS5qc29uKCk7CiAgICBhd2FpdCBzdG9yZVRva2VuSW5JbmRleGVkREIobmV3UmVzdWx0LnRva2VuKTsKICAgIHJldHVybiBuZXdSZXN1bHQ7CiAgfQogIHJldHVybiByZXN1bHQ7Cn0",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyBwAAAAAAAIcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"left_delete",
					null,
					"AQAAACgJAAAAAAAAKAkAAAAAAAAPAAAASlNPTi5zdHJpbmdpZnko",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3CQAAAAAAACgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAADgJAAAAAAAAOAkAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5CQAAAAAAADkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"left_delete",
					null,
					"AQAAALkKAAAAAAAAuQoAAAAAAAAPAAAASlNPTi5zdHJpbmdpZnko",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADICgAAAAAAALkKAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					1,
					"left_delete",
					null,
					"AQAAAMkKAAAAAAAAyQoAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKCgAAAAAAAMoKAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAI8BAAAAAAAAkAEAAAAAAAAAAAAAkAEAAAAAAACRAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPAQAAAAAAAI8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"paste",
					null,
					"AQAAAJEBAAAAAAAAPAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAQAAAAAAAJEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"left_delete",
					null,
					"AQAAAC8KAAAAAAAALwoAAAAAAAAZAAAACiAgY29uc29sZS5sb2cocmVzcG9uc2UpOw",
					"AQAAAAAAAAABAAAASAoAAAAAAAAvCgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "app/signup/page.tsx",
			"settings":
			{
				"buffer_size": 7717,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					80,
					1,
					"insert",
					{
						"characters": "response"
					},
					"CQAAANYGAAAAAAAA1wYAAAAAAAAAAAAA2AYAAAAAAADYBgAAAAAAAAIAAAAgINcGAAAAAAAA2AYAAAAAAAAAAAAA2AYAAAAAAADZBgAAAAAAAAAAAADZBgAAAAAAANoGAAAAAAAAAAAAANoGAAAAAAAA2wYAAAAAAAAAAAAA2wYAAAAAAADcBgAAAAAAAAAAAADcBgAAAAAAAN0GAAAAAAAAAAAAAN0GAAAAAAAA3gYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWBgAAAAAAANYGAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": ":any"
					},
					"BAAAANEGAAAAAAAA0gYAAAAAAAAAAAAA0gYAAAAAAADTBgAAAAAAAAAAAADTBgAAAAAAANQGAAAAAAAAAAAAANQGAAAAAAAA1QYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRBgAAAAAAANEGAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " ///"
					},
					"BAAAANcGAAAAAAAA2AYAAAAAAAAAAAAA2AYAAAAAAADZBgAAAAAAAAAAAADZBgAAAAAAANoGAAAAAAAAAAAAANoGAAAAAAAA2wYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXBgAAAAAAANcGAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"left_delete",
					null,
					"AQAAANoGAAAAAAAA2gYAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbBgAAAAAAANsGAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "change"
					},
					"BgAAANoGAAAAAAAA2wYAAAAAAAAAAAAA2wYAAAAAAADcBgAAAAAAAAAAAADcBgAAAAAAAN0GAAAAAAAAAAAAAN0GAAAAAAAA3gYAAAAAAAAAAAAA3gYAAAAAAADfBgAAAAAAAAAAAADfBgAAAAAAAOAGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaBgAAAAAAANoGAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOAGAAAAAAAA4QYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgBgAAAAAAAOAGAAAAAAAAAAAAAAAA8L8"
				],
				[
					92,
					7,
					"left_delete",
					null,
					"BwAAAOAGAAAAAAAA4AYAAAAAAAABAAAAIN8GAAAAAAAA3wYAAAAAAAABAAAAZd4GAAAAAAAA3gYAAAAAAAABAAAAZ90GAAAAAAAA3QYAAAAAAAABAAAAbtwGAAAAAAAA3AYAAAAAAAABAAAAYdsGAAAAAAAA2wYAAAAAAAABAAAAaNoGAAAAAAAA2gYAAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhBgAAAAAAAOEGAAAAAAAAAAAAAAAA8L8"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " TODO:"
					},
					"BgAAANoGAAAAAAAA2wYAAAAAAAAAAAAA2wYAAAAAAADcBgAAAAAAAAAAAADcBgAAAAAAAN0GAAAAAAAAAAAAAN0GAAAAAAAA3gYAAAAAAAAAAAAA3gYAAAAAAADfBgAAAAAAAAAAAADfBgAAAAAAAOAGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaBgAAAAAAANoGAAAAAAAAAAAAAAAA8L8"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": " change"
					},
					"BwAAAOAGAAAAAAAA4QYAAAAAAAAAAAAA4QYAAAAAAADiBgAAAAAAAAAAAADiBgAAAAAAAOMGAAAAAAAAAAAAAOMGAAAAAAAA5AYAAAAAAAAAAAAA5AYAAAAAAADlBgAAAAAAAAAAAADlBgAAAAAAAOYGAAAAAAAAAAAAAOYGAAAAAAAA5wYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgBgAAAAAAAOAGAAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAOcGAAAAAAAA6AYAAAAAAAAAAAAA6AYAAAAAAADpBgAAAAAAAAAAAADpBgAAAAAAAOoGAAAAAAAAAAAAAOoGAAAAAAAA6wYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnBgAAAAAAAOcGAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " return"
					},
					"BwAAAOsGAAAAAAAA7AYAAAAAAAAAAAAA7AYAAAAAAADtBgAAAAAAAAAAAADtBgAAAAAAAO4GAAAAAAAAAAAAAO4GAAAAAAAA7wYAAAAAAAAAAAAA7wYAAAAAAADwBgAAAAAAAAAAAADwBgAAAAAAAPEGAAAAAAAAAAAAAPEGAAAAAAAA8gYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrBgAAAAAAAOsGAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " type"
					},
					"BQAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA8wYAAAAAAAD0BgAAAAAAAAAAAAD0BgAAAAAAAPUGAAAAAAAAAAAAAPUGAAAAAAAA9gYAAAAAAAAAAAAA9gYAAAAAAAD3BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyBgAAAAAAAPIGAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": " await"
					},
					"BgAAAAIHAAAAAAAAAwcAAAAAAAAAAAAAAwcAAAAAAAAEBwAAAAAAAAAAAAAEBwAAAAAAAAUHAAAAAAAAAAAAAAUHAAAAAAAABgcAAAAAAAAAAAAABgcAAAAAAAAHBwAAAAAAAAAAAAAHBwAAAAAAAAgHAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACBwAAAAAAAAIHAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"paste",
					null,
					"AQAAAAgHAAAAAAAAawgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIBwAAAAAAAAgHAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"left_delete",
					null,
					"AQAAAAgHAAAAAAAACAcAAAAAAAAWAAAAY29uc3QgcmVzcG9uc2UgPSBhd2FpdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeBwAAAAAAAAgHAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"left_delete",
					null,
					"AQAAALgHAAAAAAAAuAcAAAAAAABhAAAASlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiB7IGVtYWlsOiBlbWFpbCwgcGFzc3dvcmQ6IHBhc3N3b3JkIH0sCiAgICAgICAgICAgIH0pLA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4BwAAAAAAABkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "meta"
					},
					"BAAAALgHAAAAAAAAuQcAAAAAAAAAAAAAuQcAAAAAAAC6BwAAAAAAAAAAAAC6BwAAAAAAALsHAAAAAAAAAAAAALsHAAAAAAAAvAcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4BwAAAAAAALgHAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALwHAAAAAAAAvQcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8BwAAAAAAALwHAAAAAAAAAAAAAAAA8L8"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "method"
					},
					"BwAAANIHAAAAAAAA0wcAAAAAAAAAAAAA0wcAAAAAAADTBwAAAAAAAAwAAAAiY3JlYXRlVXNlciLTBwAAAAAAANQHAAAAAAAAAAAAANQHAAAAAAAA1QcAAAAAAAAAAAAA1QcAAAAAAADWBwAAAAAAAAAAAADWBwAAAAAAANcHAAAAAAAAAAAAANcHAAAAAAAA2AcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeBwAAAAAAANIHAAAAAAAAAAAAAAAA8L8"
				],
				[
					138,
					1,
					"reindent",
					null,
					"AQAAAPQHAAAAAAAA9gcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0BwAAAAAAAPQHAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAPYHAAAAAAAA9wcAAAAAAAAAAAAA9wcAAAAAAAD4BwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2BwAAAAAAAPYHAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgHAAAAAAAA+QcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4BwAAAAAAAPgHAAAAAAAAAAAAAAAA8L8"
				],
				[
					141,
					1,
					"left_delete",
					null,
					"AQAAAPgHAAAAAAAA+AcAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5BwAAAAAAAPkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					142,
					2,
					"left_delete",
					null,
					"AgAAAPcHAAAAAAAA9wcAAAAAAAABAAAAZvYHAAAAAAAA9gcAAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD4BwAAAAAAAPgHAAAAAAAAAAAAAAAA8L8"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAPYHAAAAAAAA9wcAAAAAAAAAAAAA9wcAAAAAAAD4BwAAAAAAAAAAAAD4BwAAAAAAAPkHAAAAAAAAAAAAAPkHAAAAAAAA+gcAAAAAAAAAAAAA+gcAAAAAAAD7BwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2BwAAAAAAAPYHAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": " res"
					},
					"BAAAAPsHAAAAAAAA/AcAAAAAAAAAAAAA/AcAAAAAAAD9BwAAAAAAAAAAAAD9BwAAAAAAAP4HAAAAAAAAAAAAAP4HAAAAAAAA/wcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7BwAAAAAAAPsHAAAAAAAAAAAAAAAA8L8"
				],
				[
					145,
					1,
					"insert_completion",
					{
						"completion": "result",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "result"
					},
					"AgAAAPwHAAAAAAAA/AcAAAAAAAADAAAAcmVz/AcAAAAAAAACCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/BwAAAAAAAP8HAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAIIAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAAECAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACCAAAAAAAAAIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": " re"
					},
					"AwAAAAQIAAAAAAAABQgAAAAAAAAAAAAABQgAAAAAAAAGCAAAAAAAAAAAAAAGCAAAAAAAAAcIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAECAAAAAAAAAQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert_completion",
					{
						"completion": "result",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "result"
					},
					"AgAAAAUIAAAAAAAABQgAAAAAAAACAAAAcmUFCAAAAAAAAAsIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHCAAAAAAAAAcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					3,
					"left_delete",
					null,
					"AwAAAAoIAAAAAAAACggAAAAAAAABAAAAdAkIAAAAAAAACQgAAAAAAAABAAAAbAgIAAAAAAAACAgAAAAAAAABAAAAdQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALCAAAAAAAAAsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "po"
					},
					"AgAAAAgIAAAAAAAACQgAAAAAAAAAAAAACQgAAAAAAAAKCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAICAAAAAAAAAgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"insert_completion",
					{
						"completion": "response",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "response"
					},
					"AgAAAAUIAAAAAAAABQgAAAAAAAAFAAAAcmVzcG8FCAAAAAAAAA0IAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKCAAAAAAAAAoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": ".jso"
					},
					"BAAAAA0IAAAAAAAADggAAAAAAAAAAAAADggAAAAAAAAPCAAAAAAAAAAAAAAPCAAAAAAAABAIAAAAAAAAAAAAABAIAAAAAAAAEQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANCAAAAAAAAA0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					153,
					1,
					"insert_completion",
					{
						"completion": "json",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "json"
					},
					"AgAAAA4IAAAAAAAADggAAAAAAAADAAAAanNvDggAAAAAAAASCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARCAAAAAAAABEIAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABIIAAAAAAAAFAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASCAAAAAAAABIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAABQIAAAAAAAAFQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUCAAAAAAAABQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"left_delete",
					null,
					"AQAAABQIAAAAAAAAFAgAAAAAAAABAAAAbA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVCAAAAAAAABUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABQIAAAAAAAAFQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUCAAAAAAAABQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BAAAAPYHAAAAAAAA9wcAAAAAAAAAAAAA9wcAAAAAAAD3BwAAAAAAAAUAAABjb25zdPcHAAAAAAAA+AcAAAAAAAAAAAAA+AcAAAAAAAD5BwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7BwAAAAAAAPYHAAAAAAAAAAAAAAAA8L8"
				],
				[
					171,
					3,
					"left_delete",
					null,
					"AwAAAPgHAAAAAAAA+AcAAAAAAAABAAAAdPcHAAAAAAAA9wcAAAAAAAABAAAAZfYHAAAAAAAA9gcAAAAAAAABAAAAbA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5BwAAAAAAAPkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAPYHAAAAAAAA9wcAAAAAAAAAAAAA9wcAAAAAAAD4BwAAAAAAAAAAAAD4BwAAAAAAAPkHAAAAAAAAAAAAAPkHAAAAAAAA+gcAAAAAAAAAAAAA+gcAAAAAAAD7BwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2BwAAAAAAAPYHAAAAAAAAAAAAAAAA8L8"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAABUIAAAAAAAAFggAAAAAAAAAAAAAFggAAAAAAAAYCAAAAAAAAAAAAAAYCAAAAAAAABkIAAAAAAAAAAAAABkIAAAAAAAAGggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVCAAAAAAAABUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					176,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABoIAAAAAAAAHAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaCAAAAAAAABoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "result."
					},
					"BwAAABsIAAAAAAAAHAgAAAAAAAAAAAAAHAgAAAAAAAAdCAAAAAAAAAAAAAAdCAAAAAAAAB4IAAAAAAAAAAAAAB4IAAAAAAAAHwgAAAAAAAAAAAAAHwgAAAAAAAAgCAAAAAAAAAAAAAAgCAAAAAAAACEIAAAAAAAAAAAAACEIAAAAAAAAIggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbCAAAAAAAABsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "aut"
					},
					"AwAAACIIAAAAAAAAIwgAAAAAAAAAAAAAIwgAAAAAAAAkCAAAAAAAAAAAAAAkCAAAAAAAACUIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiCAAAAAAAACIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					179,
					3,
					"left_delete",
					null,
					"AwAAACQIAAAAAAAAJAgAAAAAAAABAAAAdCMIAAAAAAAAIwgAAAAAAAABAAAAdSIIAAAAAAAAIggAAAAAAAABAAAAYQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlCAAAAAAAACUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "refrest"
					},
					"BwAAACIIAAAAAAAAIwgAAAAAAAAAAAAAIwgAAAAAAAAkCAAAAAAAAAAAAAAkCAAAAAAAACUIAAAAAAAAAAAAACUIAAAAAAAAJggAAAAAAAAAAAAAJggAAAAAAAAnCAAAAAAAAAAAAAAnCAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAAKQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiCAAAAAAAACIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"left_delete",
					null,
					"AQAAACgIAAAAAAAAKAgAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApCAAAAAAAACkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAACgIAAAAAAAAKQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAoCAAAAAAAACgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACoIAAAAAAAALAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqCAAAAAAAACoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					185,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAACsIAAAAAAAALAgAAAAAAAAAAAAALAgAAAAAAAAuCAAAAAAAAAAAAAAuCAAAAAAAAC8IAAAAAAAAAAAAAC8IAAAAAAAAMQgAAAAAAAAAAAAALAgAAAAAAAAsCAAAAAAAAAIAAAAgICwIAAAAAAAAMAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAArCAAAAAAAACsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AwAAAAIHAAAAAAAAAwcAAAAAAAAAAAAALQgAAAAAAAAtCAAAAAAAAAQAAAAgICAgAwcAAAAAAAAEBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACBwAAAAAAAAIHAAAAAAAAAAAAAAAA8L8"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAPoGAAAAAAAA+wYAAAAAAAAAAAAA+wYAAAAAAAD8BgAAAAAAAAAAAAD8BgAAAAAAAP0GAAAAAAAAAAAAAP0GAAAAAAAA/gYAAAAAAAAAAAAA/gYAAAAAAAD/BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6BgAAAAAAAPoGAAAAAAAAAAAAAAAA8L8"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP8GAAAAAAAAAAcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/BgAAAAAAAP8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					193,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAA8L8"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAAIIAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAAFCAAAAAAAAAAAAAAFCAAAAAAAAAcIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACCAAAAAAAAAIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					204,
					1,
					"paste",
					null,
					"AQAAAAcIAAAAAAAA0ggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHCAAAAAAAAAcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					205,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSCAAAAAAAANIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAA0IAAAAAAAADggAAAAAAAAAAAAADggAAAAAAAAPCAAAAAAAAAAAAAAPCAAAAAAAABAIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANCAAAAAAAAA0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					210,
					1,
					"left_delete",
					null,
					"AQAAABAIAAAAAAAAEAgAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARCAAAAAAAABEIAAAAAAAAAAAAAAAA8L8"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAABAIAAAAAAAAEQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQCAAAAAAAABAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					216,
					1,
					"insert_snippet",
					{
						"contents": "\"${0:$SELECTION}\""
					},
					"AgAAAM4IAAAAAAAAzggAAAAAAAAGAAAAbWV0aG9kzggAAAAAAADWCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUCAAAAAAAAM4IAAAAAAAAAAAAAAAA8L8"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "refresh"
					},
					"CAAAAM8IAAAAAAAA0AgAAAAAAAAAAAAA0AgAAAAAAADQCAAAAAAAAAYAAABtZXRob2TQCAAAAAAAANEIAAAAAAAAAAAAANEIAAAAAAAA0ggAAAAAAAAAAAAA0ggAAAAAAADTCAAAAAAAAAAAAADTCAAAAAAAANQIAAAAAAAAAAAAANQIAAAAAAAA1QgAAAAAAAAAAAAA1QgAAAAAAADWCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPCAAAAAAAANUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOoIAAAAAAAA6wgAAAAAAAAAAAAA6wgAAAAAAADvCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqCAAAAAAAAOoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					232,
					1,
					"paste",
					null,
					"AQAAAO8IAAAAAAAAGQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvCAAAAAAAAO8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAAsJAAAAAAAADAkAAAAAAAAAAAAADAkAAAAAAAANCQAAAAAAAAAAAAANCQAAAAAAAA4JAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALCQAAAAAAAAsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					237,
					1,
					"left_delete",
					null,
					"AQAAAA4JAAAAAAAADgkAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPCQAAAAAAAA8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAAA4JAAAAAAAADwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOCQAAAAAAAA4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": "\nnew"
					},
					"BQAAAOoIAAAAAAAA6wgAAAAAAAAAAAAA6wgAAAAAAADvCAAAAAAAAAAAAADvCAAAAAAAAPAIAAAAAAAAAAAAAPAIAAAAAAAA8QgAAAAAAAAAAAAA8QgAAAAAAADyCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADqCAAAAAAAAOoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					242,
					1,
					"insert_completion",
					{
						"completion": "newResult",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "newResult"
					},
					"AgAAAO8IAAAAAAAA7wgAAAAAAAADAAAAbmV37wgAAAAAAAD4CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyCAAAAAAAAPIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAAO8IAAAAAAAA8AgAAAAAAAAAAAAA8AgAAAAAAADxCAAAAAAAAAAAAADxCAAAAAAAAPIIAAAAAAAAAAAAAPIIAAAAAAAA8wgAAAAAAAAAAAAA8wgAAAAAAAD0CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvCAAAAAAAAO8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPQIAAAAAAAA9QgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0CAAAAAAAAPQIAAAAAAAAAAAAAAAA8L8"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAP4IAAAAAAAA/wgAAAAAAAAAAAAA/wgAAAAAAAAACQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+CAAAAAAAAP4IAAAAAAAAAAAAAAAA8L8"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAAJAAAAAAAAAQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAAEJAAAAAAAAAgkAAAAAAAAAAAAAAgkAAAAAAAADCQAAAAAAAAAAAAADCQAAAAAAAAQJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABCQAAAAAAAAEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					252,
					1,
					"insert_completion",
					{
						"completion": "newResponse",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "newResponse"
					},
					"AgAAAAEJAAAAAAAAAQkAAAAAAAADAAAAbmV3AQkAAAAAAAAMCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAECQAAAAAAAAQJAAAAAAAAAAAAAAAA8L8"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": ".json"
					},
					"BQAAAAwJAAAAAAAADQkAAAAAAAAAAAAADQkAAAAAAAAOCQAAAAAAAAAAAAAOCQAAAAAAAA8JAAAAAAAAAAAAAA8JAAAAAAAAEAkAAAAAAAAAAAAAEAkAAAAAAAARCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMCQAAAAAAAAwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					254,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABEJAAAAAAAAEwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARCQAAAAAAABEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABMJAAAAAAAAFAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATCQAAAAAAABMJAAAAAAAAAAAAAAAA8L8"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAEYJAAAAAAAARwkAAAAAAAAAAAAARwkAAAAAAABLCQAAAAAAAAAAAABLCQAAAAAAAEwJAAAAAAAAAAAAAEwJAAAAAAAATQkAAAAAAAAAAAAATQkAAAAAAABOCQAAAAAAAAAAAABOCQAAAAAAAE8JAAAAAAAAAAAAAE8JAAAAAAAAUAkAAAAAAAAAAAAAUAkAAAAAAABRCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGCQAAAAAAAEYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					262,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFEJAAAAAAAAUgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRCQAAAAAAAFEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAFIJAAAAAAAAUwkAAAAAAAAAAAAAUwkAAAAAAABUCQAAAAAAAAAAAABUCQAAAAAAAFUJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSCQAAAAAAAFIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					264,
					1,
					"insert_completion",
					{
						"completion": "newResult",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "newResult"
					},
					"AgAAAFIJAAAAAAAAUgkAAAAAAAADAAAAbmV3UgkAAAAAAABbCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVCQAAAAAAAFUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFsJAAAAAAAAXAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbCQAAAAAAAFsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": "\nreutn"
					},
					"BwAAAGAJAAAAAAAAYQkAAAAAAAAAAAAAYQkAAAAAAABjCQAAAAAAAAAAAABjCQAAAAAAAGQJAAAAAAAAAAAAAGQJAAAAAAAAZQkAAAAAAAAAAAAAZQkAAAAAAABmCQAAAAAAAAAAAABmCQAAAAAAAGcJAAAAAAAAAAAAAGcJAAAAAAAAaAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgCQAAAAAAAGAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					271,
					3,
					"left_delete",
					null,
					"AwAAAGcJAAAAAAAAZwkAAAAAAAABAAAAbmYJAAAAAAAAZgkAAAAAAAABAAAAdGUJAAAAAAAAZQkAAAAAAAABAAAAdQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoCQAAAAAAAGgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "turn"
					},
					"BAAAAGUJAAAAAAAAZgkAAAAAAAAAAAAAZgkAAAAAAABnCQAAAAAAAAAAAABnCQAAAAAAAGgJAAAAAAAAAAAAAGgJAAAAAAAAaQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABlCQAAAAAAAGUJAAAAAAAAAAAAAAAA8L8"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": " res"
					},
					"BAAAAGkJAAAAAAAAagkAAAAAAAAAAAAAagkAAAAAAABrCQAAAAAAAAAAAABrCQAAAAAAAGwJAAAAAAAAAAAAAGwJAAAAAAAAbQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABpCQAAAAAAAGkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					274,
					1,
					"insert_completion",
					{
						"completion": "result",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "result"
					},
					"AgAAAGoJAAAAAAAAagkAAAAAAAADAAAAcmVzagkAAAAAAABwCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtCQAAAAAAAG0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHAJAAAAAAAAcQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwCQAAAAAAAHAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKUNAAAAAAAApg0AAAAAAAAAAAAApg0AAAAAAACuDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClDQAAAAAAAKUNAAAAAAAAAAAAAAAA8L8"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AwAAAEIMAAAAAAAAQwwAAAAAAAAAAAAApw0AAAAAAACnDQAAAAAAAAgAAAAgICAgICAgIEMMAAAAAAAARAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCDAAAAAAAAEIMAAAAAAAAAAAAAAAA8L8"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAKcNAAAAAAAAqA0AAAAAAAAAAAAAqA0AAAAAAACpDQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnDQAAAAAAAKcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": "send"
					},
					"BQAAAMINAAAAAAAAww0AAAAAAAAAAAAAww0AAAAAAADDDQAAAAAAABYAAABhd2FpdCByZXNwb25zZS5qc29uKCk7ww0AAAAAAADEDQAAAAAAAAAAAADEDQAAAAAAAMUNAAAAAAAAAAAAAMUNAAAAAAAAxg0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYDQAAAAAAAMINAAAAAAAAAAAAAAAA8L8"
				],
				[
					290,
					1,
					"insert_completion",
					{
						"completion": "sendAPIRequest",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sendAPIRequest"
					},
					"AgAAAMINAAAAAAAAwg0AAAAAAAAEAAAAc2VuZMINAAAAAAAA0A0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGDQAAAAAAAMYNAAAAAAAAAAAAAAAA8L8"
				],
				[
					292,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANANAAAAAAAA0g0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQDQAAAAAAANANAAAAAAAAAAAAAAAA8L8"
				],
				[
					293,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANENAAAAAAAA0w0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRDQAAAAAAANENAAAAAAAAAAAAAAAA8L8"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": "createUse"
					},
					"CQAAANINAAAAAAAA0w0AAAAAAAAAAAAA0w0AAAAAAADUDQAAAAAAAAAAAADUDQAAAAAAANUNAAAAAAAAAAAAANUNAAAAAAAA1g0AAAAAAAAAAAAA1g0AAAAAAADXDQAAAAAAAAAAAADXDQAAAAAAANgNAAAAAAAAAAAAANgNAAAAAAAA2Q0AAAAAAAAAAAAA2Q0AAAAAAADaDQAAAAAAAAAAAADaDQAAAAAAANsNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSDQAAAAAAANINAAAAAAAAAAAAAAAA8L8"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAANsNAAAAAAAA3A0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbDQAAAAAAANsNAAAAAAAAAAAAAAAA8L8"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAN0NAAAAAAAA3g0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdDQAAAAAAAN0NAAAAAAAAAAAAAAAA8L8"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN4NAAAAAAAA3w0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeDQAAAAAAAN4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN4NAAAAAAAA3w0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeDQAAAAAAAN4NAAAAAAAAAAAAAAAA8L8"
				],
				[
					305,
					1,
					"paste",
					null,
					"AQAAAN8NAAAAAAAAQA4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfDQAAAAAAAN8NAAAAAAAAAAAAAAAA8L8"
				],
				[
					308,
					2,
					"left_delete",
					null,
					"AgAAAN8NAAAAAAAA3w0AAAAAAAAPAAAASlNPTi5zdHJpbmdpZnko3g0AAAAAAADeDQAAAAAAAAEAAAAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDQAAAAAAAN8NAAAAAAAAAAAAAAAA8L8"
				],
				[
					313,
					1,
					"left_delete",
					null,
					"AQAAAC4OAAAAAAAALg4AAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvDgAAAAAAAC8OAAAAAAAAAAAAAAAA8L8"
				],
				[
					314,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuDgAAAAAAAC4OAAAAAAAAAAAAAAAA8L8"
				],
				[
					321,
					1,
					"insert",
					{
						"characters": "\nconsole"
					},
					"CQAAAMgHAAAAAAAAyQcAAAAAAAAAAAAAyQcAAAAAAADLBwAAAAAAAAAAAADLBwAAAAAAAMwHAAAAAAAAAAAAAMwHAAAAAAAAzQcAAAAAAAAAAAAAzQcAAAAAAADOBwAAAAAAAAAAAADOBwAAAAAAAM8HAAAAAAAAAAAAAM8HAAAAAAAA0AcAAAAAAAAAAAAA0AcAAAAAAADRBwAAAAAAAAAAAADRBwAAAAAAANIHAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIBwAAAAAAAMgHAAAAAAAAAAAAAAAA8L8"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": ".log*re"
					},
					"BwAAANIHAAAAAAAA0wcAAAAAAAAAAAAA0wcAAAAAAADUBwAAAAAAAAAAAADUBwAAAAAAANUHAAAAAAAAAAAAANUHAAAAAAAA1gcAAAAAAAAAAAAA1gcAAAAAAADXBwAAAAAAAAAAAADXBwAAAAAAANgHAAAAAAAAAAAAANgHAAAAAAAA2QcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSBwAAAAAAANIHAAAAAAAAAAAAAAAA8L8"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": "sponce"
					},
					"BgAAANkHAAAAAAAA2gcAAAAAAAAAAAAA2gcAAAAAAADbBwAAAAAAAAAAAADbBwAAAAAAANwHAAAAAAAAAAAAANwHAAAAAAAA3QcAAAAAAAAAAAAA3QcAAAAAAADeBwAAAAAAAAAAAADeBwAAAAAAAN8HAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADZBwAAAAAAANkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					324,
					2,
					"left_delete",
					null,
					"AgAAAN4HAAAAAAAA3gcAAAAAAAABAAAAZd0HAAAAAAAA3QcAAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfBwAAAAAAAN8HAAAAAAAAAAAAAAAA8L8"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": "se)"
					},
					"AwAAAN0HAAAAAAAA3gcAAAAAAAAAAAAA3gcAAAAAAADfBwAAAAAAAAAAAADfBwAAAAAAAOAHAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdBwAAAAAAAN0HAAAAAAAAAAAAAAAA8L8"
				],
				[
					326,
					1,
					"left_delete",
					null,
					"AQAAAN8HAAAAAAAA3wcAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgBwAAAAAAAOAHAAAAAAAAAAAAAAAA8L8"
				],
				[
					328,
					1,
					"left_delete",
					null,
					"AQAAANYHAAAAAAAA1gcAAAAAAAABAAAAKg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADXBwAAAAAAANcHAAAAAAAAAAAAAAAA8L8"
				],
				[
					329,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAANYHAAAAAAAA1wcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWBwAAAAAAANYHAAAAAAAAAAAAAAAA8L8"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAN8HAAAAAAAA4AcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfBwAAAAAAAN8HAAAAAAAAAAAAAAAA8L8"
				],
				[
					332,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgBwAAAAAAAOAHAAAAAAAAAAAAAAAA8L8"
				],
				[
					337,
					1,
					"insert",
					{
						"characters": "JSON.st"
					},
					"BwAAANEIAAAAAAAA0ggAAAAAAAAAAAAA0ggAAAAAAADTCAAAAAAAAAAAAADTCAAAAAAAANQIAAAAAAAAAAAAANQIAAAAAAAA1QgAAAAAAAAAAAAA1QgAAAAAAADWCAAAAAAAAAAAAADWCAAAAAAAANcIAAAAAAAAAAAAANcIAAAAAAAA2AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRCAAAAAAAANEIAAAAAAAAAAAAAAAA8L8"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": "rin"
					},
					"AwAAANgIAAAAAAAA2QgAAAAAAAAAAAAA2QgAAAAAAADaCAAAAAAAAAAAAADaCAAAAAAAANsIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYCAAAAAAAANgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": "gify("
					},
					"BQAAANsIAAAAAAAA3AgAAAAAAAAAAAAA3AgAAAAAAADdCAAAAAAAAAAAAADdCAAAAAAAAN4IAAAAAAAAAAAAAN4IAAAAAAAA3wgAAAAAAAAAAAAA3wgAAAAAAADgCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbCAAAAAAAANsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAOAIAAAAAAAA4QgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgCAAAAAAAAOAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": "){"
					},
					"AgAAAOUIAAAAAAAA5ggAAAAAAAAAAAAA5ggAAAAAAADnCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlCAAAAAAAAOUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					343,
					1,
					"left_delete",
					null,
					"AQAAAOYIAAAAAAAA5ggAAAAAAAABAAAAew",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnCAAAAAAAAOcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAOYIAAAAAAAA5wgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmCAAAAAAAAOYIAAAAAAAAAAAAAAAA8L8"
				],
				[
					347,
					1,
					"left_delete",
					null,
					"AQAAAOYIAAAAAAAA5ggAAAAAAAABAAAAfQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnCAAAAAAAAOcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAOUIAAAAAAAA5ggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlCAAAAAAAAOUIAAAAAAAAAAAAAAAA8L8"
				],
				[
					350,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmCAAAAAAAAOYIAAAAAAAAAAAAAAAA8L8"
				],
				[
					358,
					1,
					"paste",
					null,
					"AgAAAKsHAAAAAAAAygcAAAAAAAAAAAAAygcAAAAAAADKBwAAAAAAAA8AAABtZXRob2Q6IG1ldGhvZCw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6BwAAAAAAAKsHAAAAAAAAAAAAAAAA8L8"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": ".cre"
					},
					"BAAAAPYIAAAAAAAA9wgAAAAAAAAAAAAA9wgAAAAAAAD4CAAAAAAAAAAAAAD4CAAAAAAAAPkIAAAAAAAAAAAAAPkIAAAAAAAA+ggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2CAAAAAAAAPYIAAAAAAAAAAAAAAAA8L8"
				],
				[
					384,
					1,
					"insert",
					{
						"characters": "de"
					},
					"AgAAAPoIAAAAAAAA+wgAAAAAAAAAAAAA+wgAAAAAAAD8CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6CAAAAAAAAPoIAAAAAAAAAAAAAAAA8L8"
				],
				[
					385,
					1,
					"insert_completion",
					{
						"completion": "credentials",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "credentials"
					},
					"AgAAAPcIAAAAAAAA9wgAAAAAAAAFAAAAY3JlZGX3CAAAAAAAAAIJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8CAAAAAAAAPwIAAAAAAAAAAAAAAAA8L8"
				],
				[
					396,
					1,
					"paste",
					null,
					"AgAAANsIAAAAAAAAQgkAAAAAAAAAAAAAQgkAAAAAAABCCQAAAAAAACsAAABtZXRhOiBKU09OLnN0cmluZ2lmeSh7IG1ldGEuY3JlZGVudGlhbHMgfSks",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGCQAAAAAAANsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					399,
					1,
					"insert",
					{
						"characters": "meta.crede"
					},
					"CgAAAA8JAAAAAAAAEAkAAAAAAAAAAAAAEAkAAAAAAAARCQAAAAAAAAAAAAARCQAAAAAAABIJAAAAAAAAAAAAABIJAAAAAAAAEwkAAAAAAAAAAAAAEwkAAAAAAAAUCQAAAAAAAAAAAAAUCQAAAAAAABUJAAAAAAAAAAAAABUJAAAAAAAAFgkAAAAAAAAAAAAAFgkAAAAAAAAXCQAAAAAAAAAAAAAXCQAAAAAAABgJAAAAAAAAAAAAABgJAAAAAAAAGQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPCQAAAAAAAA8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					400,
					1,
					"insert",
					{
						"characters": "ntials."
					},
					"BwAAABkJAAAAAAAAGgkAAAAAAAAAAAAAGgkAAAAAAAAbCQAAAAAAAAAAAAAbCQAAAAAAABwJAAAAAAAAAAAAABwJAAAAAAAAHQkAAAAAAAAAAAAAHQkAAAAAAAAeCQAAAAAAAAAAAAAeCQAAAAAAAB8JAAAAAAAAAAAAAB8JAAAAAAAAIAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZCQAAAAAAABkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					406,
					1,
					"cut",
					null,
					"AQAAAA8JAAAAAAAADwkAAAAAAAARAAAAbWV0YS5jcmVkZW50aWFscy4",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgCQAAAAAAAA8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					408,
					1,
					"paste",
					null,
					"AQAAABYJAAAAAAAAJwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWCQAAAAAAABYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					411,
					1,
					"paste",
					null,
					"AQAAADgJAAAAAAAASQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4CQAAAAAAADgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFEJAAAAAAAAUgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRCQAAAAAAAFEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					414,
					1,
					"insert",
					{
						"characters": " token"
					},
					"BgAAAFIJAAAAAAAAUwkAAAAAAAAAAAAAUwkAAAAAAABUCQAAAAAAAAAAAABUCQAAAAAAAFUJAAAAAAAAAAAAAFUJAAAAAAAAVgkAAAAAAAAAAAAAVgkAAAAAAABXCQAAAAAAAAAAAABXCQAAAAAAAFgJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSCQAAAAAAAFIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAFgJAAAAAAAAWQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYCQAAAAAAAFgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFkJAAAAAAAAWgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZCQAAAAAAAFkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					417,
					1,
					"paste",
					null,
					"AQAAAFoJAAAAAAAAawkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaCQAAAAAAAFoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					418,
					1,
					"insert",
					{
						"characters": "token"
					},
					"BQAAAGsJAAAAAAAAbAkAAAAAAAAAAAAAbAkAAAAAAABtCQAAAAAAAAAAAABtCQAAAAAAAG4JAAAAAAAAAAAAAG4JAAAAAAAAbwkAAAAAAAAAAAAAbwkAAAAAAABwCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrCQAAAAAAAGsJAAAAAAAAAAAAAAAA8L8"
				],
				[
					419,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwCQAAAAAAAHAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					427,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AQAAAAkJAAAAAAAACgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJCQAAAAAAAAkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					428,
					1,
					"left_delete",
					null,
					"AQAAAAkJAAAAAAAACQkAAAAAAAABAAAASA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKCQAAAAAAAAoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					429,
					1,
					"insert",
					{
						"characters": "JSON"
					},
					"BAAAAAkJAAAAAAAACgkAAAAAAAAAAAAACgkAAAAAAAALCQAAAAAAAAAAAAALCQAAAAAAAAwJAAAAAAAAAAAAAAwJAAAAAAAADQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJCQAAAAAAAAkJAAAAAAAAAAAAAAAA8L8"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAA0JAAAAAAAADgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANCQAAAAAAAA0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					431,
					1,
					"insert_completion",
					{
						"completion": "stringify",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "stringify"
					},
					"AQAAAA4JAAAAAAAAFwkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOCQAAAAAAAA4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAABcJAAAAAAAAGAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXCQAAAAAAABcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					435,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAKwJAAAAAAAArQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsCQAAAAAAAKwJAAAAAAAAAAAAAAAA8L8"
				],
				[
					441,
					1,
					"paste",
					null,
					"AgAAAJkHAAAAAAAAeAgAAAAAAAAAAAAAeAgAAAAAAAB4CAAAAAAAAAsAAABtZXRhOiBtZXRhLA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkBwAAAAAAAJkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					442,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4CAAAAAAAAHgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					445,
					1,
					"left_delete",
					null,
					"AQAAAGwIAAAAAAAAbAgAAAAAAAAmAAAACiAgICAgIG1ldGE6IEpTT04uc3RyaW5naWZ5KHsgbWV0YSB9KSw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSCAAAAAAAAGwIAAAAAAAAAAAAAAAA8L8"
				],
				[
					449,
					1,
					"left_delete",
					null,
					"AQAAAMUHAAAAAAAAxQcAAAAAAAAPAAAASlNPTi5zdHJpbmdpZnko",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUBwAAAAAAAMUHAAAAAAAAAAAAAAAA8L8"
				],
				[
					452,
					1,
					"left_delete",
					null,
					"AQAAAFEIAAAAAAAAUQgAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSCAAAAAAAAFIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAAFEPAAAAAAAAUg8AAAAAAAAAAAAAUg8AAAAAAABTDwAAAAAAAAAAAABTDwAAAAAAAFQPAAAAAAAAAAAAAFQPAAAAAAAAVQ8AAAAAAAAAAAAAVQ8AAAAAAABWDwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRDwAAAAAAAFEPAAAAAAAAAAAAAAAA8L8"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFYPAAAAAAAAVw8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWDwAAAAAAAFYPAAAAAAAAAAAAAAAA8L8"
				],
				[
					514,
					1,
					"left_delete",
					null,
					"AQAAAMsPAAAAAAAAyw8AAAAAAAAPAAAAIXJlc3BvbnNlLm9rIHx8",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaDwAAAAAAAMsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					515,
					1,
					"right_delete",
					null,
					"AQAAAMsPAAAAAAAAyw8AAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLDwAAAAAAAMsPAAAAAAAAAAAAAAAA8L8"
				],
				[
					519,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFIIAAAAAAAAUwgAAAAAAAAAAAAAUwgAAAAAAABbCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSCAAAAAAAAFIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					520,
					1,
					"left_delete",
					null,
					"AQAAAFkIAAAAAAAAWQgAAAAAAAACAAAAICA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbCAAAAAAAAFsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					521,
					1,
					"insert",
					{
						"characters": "me"
					},
					"AgAAAFkIAAAAAAAAWggAAAAAAAAAAAAAWggAAAAAAABbCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZCAAAAAAAAFkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					522,
					1,
					"insert_completion",
					{
						"completion": "method",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "method"
					},
					"AgAAAFkIAAAAAAAAWQgAAAAAAAACAAAAbWVZCAAAAAAAAF8IAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbCAAAAAAAAFsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					523,
					1,
					"insert",
					{
						"characters": ":met"
					},
					"BAAAAF8IAAAAAAAAYAgAAAAAAAAAAAAAYAgAAAAAAABhCAAAAAAAAAAAAABhCAAAAAAAAGIIAAAAAAAAAAAAAGIIAAAAAAAAYwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfCAAAAAAAAF8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					525,
					1,
					"insert_completion",
					{
						"completion": "method",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "method"
					},
					"AgAAAGAIAAAAAAAAYAgAAAAAAAADAAAAbWV0YAgAAAAAAABmCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjCAAAAAAAAGMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGYIAAAAAAAAZwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmCAAAAAAAAGYIAAAAAAAAAAAAAAAA8L8"
				],
				[
					527,
					1,
					"left_delete",
					null,
					"AQAAAGYIAAAAAAAAZggAAAAAAAABAAAAOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnCAAAAAAAAGcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					528,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGYIAAAAAAAAZwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmCAAAAAAAAGYIAAAAAAAAAAAAAAAA8L8"
				],
				[
					529,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnCAAAAAAAAGcIAAAAAAAAAAAAAAAA8L8"
				],
				[
					532,
					1,
					"paste",
					null,
					"AgAAAH8PAAAAAAAAiQ8AAAAAAAAAAAAAiQ8AAAAAAACJDwAAAAAAAAoAAABjcmVhdGVVc2Vy",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACJDwAAAAAAAH8PAAAAAAAAAAAAAAAA8L8"
				],
				[
					544,
					1,
					"cut",
					null,
					"AQAAAFsIAAAAAAAAWwgAAAAAAAAPAAAAbWV0aG9kOiBtZXRob2Qs",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqCAAAAAAAAFsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					545,
					5,
					"left_delete",
					null,
					"BQAAAFkIAAAAAAAAWQgAAAAAAAACAAAAICBXCAAAAAAAAFcIAAAAAAAAAgAAACAgVQgAAAAAAABVCAAAAAAAAAIAAAAgIFMIAAAAAAAAUwgAAAAAAAACAAAAICBSCAAAAAAAAFIIAAAAAAAAAQAAAAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbCAAAAAAAAFsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					547,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFwIAAAAAAAAXQgAAAAAAAAAAAAAXQgAAAAAAABjCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcCAAAAAAAAFwIAAAAAAAAAAAAAACAWUA"
				],
				[
					548,
					1,
					"paste",
					null,
					"AQAAAGMIAAAAAAAAcggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjCAAAAAAAAGMIAAAAAAAAAAAAAAAA8L8"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": "awi"
					},
					"AwAAAKYKAAAAAAAApwoAAAAAAAAAAAAApwoAAAAAAACoCgAAAAAAAAAAAACoCgAAAAAAAKkKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmCgAAAAAAAKYKAAAAAAAAAAAAAAAA8L8"
				],
				[
					557,
					1,
					"left_delete",
					null,
					"AQAAAKgKAAAAAAAAqAoAAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpCgAAAAAAAKkKAAAAAAAAAAAAAAAA8L8"
				],
				[
					558,
					1,
					"insert",
					{
						"characters": "ait"
					},
					"AwAAAKgKAAAAAAAAqQoAAAAAAAAAAAAAqQoAAAAAAACqCgAAAAAAAAAAAACqCgAAAAAAAKsKAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoCgAAAAAAAKgKAAAAAAAAAAAAAAAA8L8"
				],
				[
					559,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKsKAAAAAAAArAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrCgAAAAAAAKsKAAAAAAAAAAAAAAAA8L8"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAAKsIAAAAAAAArAgAAAAAAAAAAAAArAgAAAAAAACtCAAAAAAAAAAAAACtCAAAAAAAAK4IAAAAAAAAAAAAAK4IAAAAAAAArwgAAAAAAAAAAAAArwgAAAAAAACwCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrCAAAAAAAAKsIAAAAAAAAAAAAAAAA8L8"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALAIAAAAAAAAsQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwCAAAAAAAALAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					567,
					1,
					"left_delete",
					null,
					"AQAAAMcNAAAAAAAAxw0AAAAAAACTAQAACiAgICAgICAgLy8gU2VuZCByZXF1ZXN0IHRvIHRoZSBBUEkKICAgICAgICAvKmNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goIi9hcGkiLCB7CiAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgIH0sCiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgIG1ldGE6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICBjcmVkZW50aWFsczogeyBlbWFpbDogZW1haWwsIHBhc3N3b3JkOiBwYXNzd29yZCB9LAogICAgICAgICAgICB9KSwKICAgICAgICAgICAgbWV0aG9kOiAiY3JlYXRlVXNlciIsCiAgICAgICAgICB9KSwKICAgICAgICB9KTsqLw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaDwAAAAAAAMcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					568,
					1,
					"right_delete",
					null,
					"AQAAAMcNAAAAAAAAxw0AAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHDQAAAAAAAMcNAAAAAAAAAAAAAAAA8L8"
				],
				[
					572,
					1,
					"paste",
					null,
					"AgAAAI8GAAAAAAAAJAsAAAAAAAAAAAAAJAsAAAAAAAAkCwAAAAAAAJUEAABhc3luYyBmdW5jdGlvbiBzZW5kQVBJUmVxdWVzdChtZXRob2Q6IHN0cmluZywgbWV0YTogQXBpTWV0YU9iamVjdCk6IGFueSB7CiAgLy8gVE9ETzogY2hhbmdlIHRoZSByZXR1cm4gdHlwZQogIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goIi9hcGkiLCB7CiAgICBtZXRob2Q6ICJQT1NUIiwKICAgIGhlYWRlcnM6IHsKICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgIH0sCiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgIG1ldGE6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBjcmVkZW50aWFsczogewogICAgICAgICAgZW1haWw6IG1ldGEuY3JlZGVudGlhbHMuZW1haWwsCiAgICAgICAgICBwYXNzd29yZDogbWV0YS5jcmVkZW50aWFscy5wYXNzd29yZCwKICAgICAgICAgIHRva2VuOiBtZXRhLmNyZWRlbnRpYWxzLnRva2VuLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgICBtZXRob2Q6IG1ldGhvZCwKICAgIH0pLAogIH0pOwogIGNvbnNvbGUubG9nKHJlc3BvbnNlKTsKICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgaWYgKHJlc3VsdC5yZWZyZXNoKSB7CiAgICBjb25zdCBuZXdSZXNwb25zZSA9IGF3YWl0IGZldGNoKCIvYXBpIiwgewogICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgaGVhZGVyczogewogICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgIH0sCiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBtZXRhOiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICBjcmVkZW50aWFsczogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICBlbWFpbDogbWV0YS5jcmVkZW50aWFscy5lbWFpbCwKICAgICAgICAgICAgcGFzc3dvcmQ6IG1ldGEuY3JlZGVudGlhbHMucGFzc3dvcmQsCiAgICAgICAgICAgIHRva2VuOiBtZXRhLmNyZWRlbnRpYWxzLnRva2VuLAogICAgICAgICAgfSksCiAgICAgICAgfSksCiAgICAgICAgbWV0aG9kOiAicmVmcmVzaCIsCiAgICAgIH0pLAogICAgfSk7CiAgICBjb25zdCBuZXdSZXN1bHQgPSBhd2FpdCBuZXdSZXNwb25zZS5qc29uKCk7CiAgICBhd2FpdCBzdG9yZVRva2VuSW5JbmRleGVkREIobmV3UmVzdWx0LnRva2VuKTsKICAgIHJldHVybiBuZXdSZXN1bHQ7CiAgfQogIHJldHVybiByZXN1bHQ7Cn0",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPBgAAAAAAACQLAAAAAAAAAAAAAAAA8L8"
				],
				[
					576,
					1,
					"paste",
					null,
					"AgAAAI8GAAAAAAAAbAoAAAAAAAAAAAAAbAoAAAAAAABsCgAAAAAAAJYEAABhc3luYyBmdW5jdGlvbiBzZW5kQVBJUmVxdWVzdChtZXRob2Q6IHN0cmluZywgbWV0YTogQXBpTWV0YU9iamVjdCk6IGFueSB7CiAgLy8gVE9ETzogY2hhbmdlIHRoZSByZXR1cm4gdHlwZQogIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goIi9hcGkiLCB7CiAgICBtZXRob2Q6ICJQT1NUIiwKICAgIGhlYWRlcnM6IHsKICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgIH0sCiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgIG1ldGE6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBjcmVkZW50aWFsczogewogICAgICAgICAgZW1haWw6IG1ldGEuY3JlZGVudGlhbHMuZW1haWwsCiAgICAgICAgICBwYXNzd29yZDogbWV0YS5jcmVkZW50aWFscy5wYXNzd29yZCwKICAgICAgICAgIHRva2VuOiBtZXRhLmNyZWRlbnRpYWxzLnRva2VuLAogICAgICAgIH0sCiAgICAgIH0pLAogICAgICBtZXRob2Q6IG1ldGhvZCwKICAgIH0pLAogIH0pOwogIGNvbnNvbGUubG9nKHJlc3BvbnNlKTsKICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7CiAgaWYgKHJlc3VsdC5yZWZyZXNoKSB7CiAgICBjb25zdCBuZXdSZXNwb25zZSA9IGF3YWl0IGZldGNoKCIvYXBpIiwgewogICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgaGVhZGVyczogewogICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgIH0sCiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBtZXRhOiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICBjcmVkZW50aWFsczogSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICBlbWFpbDogbWV0YS5jcmVkZW50aWFscy5lbWFpbCwKICAgICAgICAgICAgcGFzc3dvcmQ6IG1ldGEuY3JlZGVudGlhbHMucGFzc3dvcmQsCiAgICAgICAgICAgIHRva2VuOiBtZXRhLmNyZWRlbnRpYWxzLnRva2VuLAogICAgICAgICAgfSksCiAgICAgICAgfSksCiAgICAgICAgbWV0aG9kOiAicmVmcmVzaCIsCiAgICAgIH0pLAogICAgfSk7CiAgICBjb25zdCBuZXdSZXN1bHQgPSBhd2FpdCBuZXdSZXNwb25zZS5qc29uKCk7CiAgICBhd2FpdCBzdG9yZVRva2VuSW5JbmRleGVkREIobmV3UmVzdWx0LnRva2VuKTsKICAgIHJldHVybiBuZXdSZXN1bHQ7CiAgfQogIHJldHVybiByZXN1bHQ7Cn0K",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlCwAAAAAAAI8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					580,
					1,
					"left_delete",
					null,
					"AQAAAGYJAAAAAAAAZgkAAAAAAAAPAAAASlNPTi5zdHJpbmdpZnko",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1CQAAAAAAAGYJAAAAAAAAAAAAAAAA8L8"
				],
				[
					583,
					1,
					"left_delete",
					null,
					"AQAAAHYJAAAAAAAAdgkAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3CQAAAAAAAHcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					586,
					1,
					"left_delete",
					null,
					"AQAAAMUHAAAAAAAAxQcAAAAAAAAPAAAASlNPTi5zdHJpbmdpZnko",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUBwAAAAAAAMUHAAAAAAAAAAAAAAAA8L8"
				],
				[
					589,
					1,
					"left_delete",
					null,
					"AQAAANUHAAAAAAAA1QcAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWBwAAAAAAANYHAAAAAAAAAAAAAAAA8L8"
				],
				[
					595,
					1,
					"left_delete",
					null,
					"AQAAAB8IAAAAAAAAHwgAAAAAAAAZAAAACiAgY29uc29sZS5sb2cocmVzcG9uc2UpOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4CAAAAAAAAB8IAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "app/help/page.tsx",
			"settings":
			{
				"buffer_size": 8044,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					83,
					1,
					"paste",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAA5h0AAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"left_delete",
					null,
					"AQAAAJQdAAAAAAAAlB0AAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUdAAAAAAAAlR0AAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					5,
					"left_delete",
					null,
					"BQAAAKEBAAAAAAAAoQEAAAAAAAABAAAAKaABAAAAAAAAoAEAAAAAAAABAAAAKJ8BAAAAAAAAnwEAAAAAAAABAAAAIJ4BAAAAAAAAngEAAAAAAAABAAAAPZ0BAAAAAAAAnQEAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIBAAAAAAAAogEAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ0BAAAAAAAAnwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0BAAAAAAAAnQEAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					5,
					"left_delete",
					null,
					"BQAAAJMBAAAAAAAAkwEAAAAAAAABAAAAdJIBAAAAAAAAkgEAAAAAAAABAAAAc5EBAAAAAAAAkQEAAAAAAAABAAAAbpABAAAAAAAAkAEAAAAAAAABAAAAb48BAAAAAAAAjwEAAAAAAAABAAAAYw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQBAAAAAAAAlAEAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "function"
					},
					"CAAAAI8BAAAAAAAAkAEAAAAAAAAAAAAAkAEAAAAAAACRAQAAAAAAAAAAAACRAQAAAAAAAJIBAAAAAAAAAAAAAJIBAAAAAAAAkwEAAAAAAAAAAAAAkwEAAAAAAACUAQAAAAAAAAAAAACUAQAAAAAAAJUBAAAAAAAAAAAAAJUBAAAAAAAAlgEAAAAAAAAAAAAAlgEAAAAAAACXAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8BAAAAAAAAjwEAAAAAAAAAAAAAAADwvw"
				],
				[
					99,
					3,
					"left_delete",
					null,
					"AwAAAKQBAAAAAAAApAEAAAAAAAABAAAAPqMBAAAAAAAAowEAAAAAAAABAAAAPaIBAAAAAAAAogEAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUBAAAAAAAApQEAAAAAAAAAAAAAAADwvw"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "export"
					},
					"BgAAAI8BAAAAAAAAkAEAAAAAAAAAAAAAkAEAAAAAAACRAQAAAAAAAAAAAACRAQAAAAAAAJIBAAAAAAAAAAAAAJIBAAAAAAAAkwEAAAAAAAAAAAAAkwEAAAAAAACUAQAAAAAAAAAAAACUAQAAAAAAAJUBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8BAAAAAAAAjwEAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJUBAAAAAAAAlgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUBAAAAAAAAlQEAAAAAAAAAAAAAAADwvw"
				],
				[
					105,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYBAAAAAAAAlgEAAAAAAAAAAAAAAADwvw"
				],
				[
					110,
					2,
					"left_delete",
					null,
					"AgAAAJYBAAAAAAAAlgEAAAAAAAABAAAAZpUBAAAAAAAAlQEAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcBAAAAAAAAlwEAAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAJUBAAAAAAAAlgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUBAAAAAAAAlQEAAAAAAAAAAAAAAADwvw"
				],
				[
					112,
					1,
					"left_delete",
					null,
					"AQAAAJUBAAAAAAAAlQEAAAAAAAABAAAAZg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYBAAAAAAAAlgEAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAJUBAAAAAAAAlgEAAAAAAAAAAAAAlgEAAAAAAACXAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUBAAAAAAAAlQEAAAAAAAAAAAAAAADwvw"
				],
				[
					144,
					1,
					"left_delete",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAACSAAAAAAAAAAAAAAAADwvw"
				],
				[
					145,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAcRsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					146,
					1,
					"left_delete",
					null,
					"AQAAAHAbAAAAAAAAcBsAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHEbAAAAAAAAcRsAAAAAAAAAAAAAAADwvw"
				],
				[
					147,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAbAAAAAAAAcBsAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAC+HQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"AgAAAAAAAAAAAAAAeR8AAAAAAAAgGwAAInVzZSBjbGllbnQiOwoKaW1wb3J0IEltYWdlIGZyb20gIm5leHQvaW1hZ2UiOwppbXBvcnQgTGluayBmcm9tICJuZXh0L2xpbmsiOwppbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZEhlYWRlciwgQ2FyZFRpdGxlIH0gZnJvbSAiQC9jb21wb25lbnRzL3VpL2NhcmQiOwppbXBvcnQgeyBCdXR0b24gfSBmcm9tICJAL2NvbXBvbmVudHMvdWkvYnV0dG9uIjsKaW1wb3J0IHsgTW9kZVRvZ2dsZSB9IGZyb20gIkAvY29tcG9uZW50cy91aS9tb2RldG9nZ2xlIjsKaW1wb3J0IHsgQWNjb3JkaW9uLCBBY2NvcmRpb25Db250ZW50LCBBY2NvcmRpb25JdGVtLCBBY2NvcmRpb25UcmlnZ2VyIH0gZnJvbSAiQC9jb21wb25lbnRzL3VpL2FjY29yZGlvbiI7CmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gIm5leHQvbmF2aWdhdGlvbiI7Cgpjb25zdCBIZWxwUGFnZTogUmVhY3QuRkMgPSAoKSA9PiB7CiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7CgogIGNvbnN0IGhhbmRsZUJhY2tUb0hvbWUgPSAoKSA9PiB7CiAgICByb3V0ZXIucHVzaCgiLyIpOwogIH07CgogIHJldHVybiAoCiAgICA8ZGl2IGNsYXNzTmFtZT0ibWluLWgtc2NyZWVuIGgtc2NyZWVuIG92ZXJmbG93LXktYXV0byBmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gcC02IHNwYWNlLXktNiI+CiAgICAgIHsvKiBIZWFkZXIgU2VjdGlvbiAqL30KICAgICAgPGhlYWRlciBjbGFzc05hbWU9InctZnVsbCBtYXgtdy03eGwgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIHNwYWNlLXgtNiBweS00Ij4KICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC00Ij4KICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSJiZy1ibGFjayB0ZXh0LXdoaXRlIHAtMSByb3VuZGVkIj4KICAgICAgICAgICAgPEltYWdlIHNyYz0iL2ltYWdlcy9sb2dvLnBuZyIgYWx0PSJBaXlvdSBMb2dvIiB3aWR0aD17NDB9IGhlaWdodD17NDB9IC8+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxoMSBjbGFzc05hbWU9InRleHQtMnhsIGZvbnQtc2VtaWJvbGQiPkFpeW91IEhlbHAgJiBTdXBwb3J0PC9oMT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC00IHN0aWNreSB0b3AtMCB6LTEwIj4KICAgICAgICAgIDxCdXR0b24gdmFyaWFudD0iZGVmYXVsdCIgb25DbGljaz17aGFuZGxlQmFja1RvSG9tZX0gY2xhc3NOYW1lPSJmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTIiPgogICAgICAgICAgICA8c3Bhbj5CYWNrIHRvIEhvbWU8L3NwYW4+CiAgICAgICAgICA8L0J1dHRvbj4KICAgICAgICAgIDxNb2RlVG9nZ2xlIC8+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvaGVhZGVyPgoKICAgICAgPGhyIGNsYXNzTmFtZT0idy1mdWxsIG1heC13LTd4bCBib3JkZXItZ3JheS0zMDAiIC8+CgogICAgICB7LyogV2VsY29tZSBTZWN0aW9uICovfQogICAgICA8c2VjdGlvbiBjbGFzc05hbWU9InctZnVsbCBtYXgtdy03eGwgdGV4dC1jZW50ZXIgc3BhY2UteS00Ij4KICAgICAgICA8aDIgY2xhc3NOYW1lPSJ0ZXh0LTN4bCBmb250LXNlbWlib2xkIj5XZWxjb21lIHRvIEFpeW91IFN1cHBvcnQ8L2gyPgogICAgICAgIDxwIGNsYXNzTmFtZT0idGV4dC1sZyI+CiAgICAgICAgICBGaW5kIGFsbCB0aGUgcmVzb3VyY2VzIHlvdSBuZWVkIHRvIG1ha2UgdGhlIG1vc3Qgb3V0IG9mIHlvdXIgZXhwZXJpZW5jZSB3aXRoIEFpeW91LgogICAgICAgIDwvcD4KICAgICAgICA8ZGl2IGNsYXNzTmFtZT0iZmxleCBqdXN0aWZ5LWNlbnRlciBzcGFjZS14LTQiPgogICAgICAgICAgPExpbmsgaHJlZj0iL3JlZ2lzdGVyIj4KICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9ImJnLWJsdWUtNjAwIGhvdmVyOmJnLWJsdWUtNzAwIHRleHQtd2hpdGUiPlJlZ2lzdGVyPC9CdXR0b24+CiAgICAgICAgICA8L0xpbms+CiAgICAgICAgICA8TGluayBocmVmPSIvbG9naW4iPgogICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT0iYmctZ3JlZW4tNjAwIGhvdmVyOmJnLWdyZWVuLTcwMCB0ZXh0LXdoaXRlIj5Mb2dpbjwvQnV0dG9uPgogICAgICAgICAgPC9MaW5rPgogICAgICAgIDwvZGl2PgogICAgICA8L3NlY3Rpb24+CgogICAgICB7LyogSGVscCBDb250ZW50ICovfQogICAgICA8bWFpbiBjbGFzc05hbWU9ImZsZXggZmxleC1jb2wgdy1mdWxsIG1heC13LTd4bCBzcGFjZS15LTYiPgogICAgICAgIHsvKiBGQVEgU2VjdGlvbiAqL30KICAgICAgICA8Q2FyZCBjbGFzc05hbWU9InAtNiBzcGFjZS15LTQgc2hhZG93LWxnIHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCB0cmFuc2l0aW9uLXRyYW5zZm9ybSBkdXJhdGlvbi0zMDAgaG92ZXI6c2NhbGUtMTA1Ij4KICAgICAgICAgIDxDYXJkSGVhZGVyIGNsYXNzTmFtZT0iZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0zIGJvcmRlci1iIGJvcmRlci1ncmF5LTMwMCBwYi0zIj4KICAgICAgICAgICAgPENhcmRUaXRsZSBjbGFzc05hbWU9InRleHQtMnhsIj5GcmVxdWVudGx5IEFza2VkIFF1ZXN0aW9uczwvQ2FyZFRpdGxlPgogICAgICAgICAgPC9DYXJkSGVhZGVyPgogICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT0iYm9yZGVyLXQgYm9yZGVyLWdyYXktMzAwIHB0LTMiPgogICAgICAgICAgICA8QWNjb3JkaW9uIHR5cGU9InNpbmdsZSIgY29sbGFwc2libGU+CiAgICAgICAgICAgICAge1sKICAgICAgICAgICAgICAgIHsgcXVlc3Rpb246ICJIb3cgZG8gSSBnZXQgc3RhcnRlZD8iLCBhbnN3ZXI6ICJGb2xsb3cgb3VyIHNldHVwIGd1aWRlIGluIHRoZSBkb2N1bWVudGF0aW9uLiIgfSwKICAgICAgICAgICAgICAgIHsgcXVlc3Rpb246ICJJIGRvbuKAmXQgaGF2ZSBhbiBhY2NvdW50LiBIb3cgY2FuIEkgcmVnaXN0ZXI/IiwgYW5zd2VyOiAiVmlzaXQgdGhlIHJlZ2lzdHJhdGlvbiBwYWdlIHRvIGNyZWF0ZSBhbiBhY2NvdW50LiIgfSwKICAgICAgICAgICAgICAgIHsgcXVlc3Rpb246ICJIb3cgY2FuIEkgY29udGFjdCBzdXBwb3J0PyIsIGFuc3dlcjogIlJlYWNoIG91dCB2aWEgZW1haWwgYXQgc3VwcG9ydEBhaXlvdS5jb20gb3IgY2FsbCAxLTgwMC0xMjMtNDU2Ny4iIH0sCiAgICAgICAgICAgICAgICB7IHF1ZXN0aW9uOiAiSG93IGRvIEkgY2hhdCB3aXRoIGEgbW9kZWw/IiwgYW5zd2VyOiAiTmF2aWdhdGUgdG8gdGhlICdDaGF0JyBzZWN0aW9uIGluIHRoZSBhcHBsaWNhdGlvbiBhbmQgc3RhcnQgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgbW9kZWwuIiB9LAogICAgICAgICAgICAgICAgeyBxdWVzdGlvbjogIldoYXQgZW5kcG9pbnRzIGFyZSBzdXBwb3J0ZWQ/IiwgYW5zd2VyOiAiUmVmZXIgdG8gb3VyIEFQSSBkb2N1bWVudGF0aW9uIGZvciB0aGUgbGlzdCBvZiBzdXBwb3J0ZWQgZW5kcG9pbnRzLiIgfSwKICAgICAgICAgICAgICAgIHsgcXVlc3Rpb246ICJEbyBJIG5lZWQgaW50ZXJuZXQgYWNjZXNzPyIsIGFuc3dlcjogIlllcywgaW50ZXJuZXQgYWNjZXNzIGlzIHJlcXVpcmVkIHRvIHVzZSB0aGUgc2VydmljZSBhbmQgY29ubmVjdCB0byB0aGUgbW9kZWxzLiIgfSwKICAgICAgICAgICAgICAgIHsgcXVlc3Rpb246ICJIb3cgZG8gSSBhZGQgYSBmaWxlIHRvIHRoZSBSQUcgU3RvcmU/IiwgYW5zd2VyOiAiR28gdG8gdGhlICdGaWxlIFVwbG9hZCcgc2VjdGlvbiBhbmQgdXBsb2FkIHlvdXIgZmlsZSB0aHJvdWdoIHRoZSBwcm92aWRlZCBpbnRlcmZhY2UuIiB9LAogICAgICAgICAgICAgICAgeyBxdWVzdGlvbjogIldoYXQgZmlsZSB0eXBlcyBhcmUgc3VwcG9ydGVkPyIsIGFuc3dlcjogIkNvbW1vbiBmaWxlIHR5cGVzIHN1Y2ggYXMgLnR4dCwgLnBkZiwgYW5kIC5kb2N4IGFyZSBzdXBwb3J0ZWQuIENoZWNrIHRoZSBkb2N1bWVudGF0aW9uIGZvciBhIGZ1bGwgbGlzdC4iIH0sCiAgICAgICAgICAgICAgICB7IHF1ZXN0aW9uOiAiV2hhdCBpcyB0aGUgbWV0aG9kIHVzZWQgZm9yIGNodW5raW5nPyIsIGFuc3dlcjogIlRoZSBzeXN0ZW0gdXNlcyBhIHNtYXJ0IGNodW5raW5nIGFsZ29yaXRobSB0aGF0IGRpdmlkZXMgdGV4dCBpbnRvIG1hbmFnZWFibGUgc2VnbWVudHMgd2hpbGUgcHJlc2VydmluZyBjb250ZXh0LiIgfSwKICAgICAgICAgICAgICAgIHsgcXVlc3Rpb246ICJXaGF0IHNob3VsZCBJIGRvIGlmIGNodW5raW5nIGZhaWxzIGZvciBteSB0ZXh0IGZpbGU/IiwgYW5zd2VyOiAiRW5zdXJlIHRoZSBmaWxlIGZvcm1hdCBpcyBjb3JyZWN0IGFuZCBub3QgY29ycnVwdGVkLiBSZWZlciB0byB0aGUgdHJvdWJsZXNob290aW5nIGd1aWRlIGluIHRoZSBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGRldGFpbHMuIiB9LAogICAgICAgICAgICAgIF0ubWFwKChmYXEsIGluZGV4KSA9PiAoCiAgICAgICAgICAgICAgICA8QWNjb3JkaW9uSXRlbSBrZXk9e2luZGV4fSB2YWx1ZT17YGl0ZW0tJHtpbmRleH1gfT4KICAgICAgICAgICAgICAgICAgPEFjY29yZGlvblRyaWdnZXI+e2ZhcS5xdWVzdGlvbn08L0FjY29yZGlvblRyaWdnZXI+CiAgICAgICAgICAgICAgICAgIDxBY2NvcmRpb25Db250ZW50PntmYXEuYW5zd2VyfTwvQWNjb3JkaW9uQ29udGVudD4KICAgICAgICAgICAgICAgIDwvQWNjb3JkaW9uSXRlbT4KICAgICAgICAgICAgICApKX0KICAgICAgICAgICAgPC9BY2NvcmRpb24+CiAgICAgICAgICA8L0NhcmRDb250ZW50PgogICAgICAgIDwvQ2FyZD4KCiAgICAgICAgey8qIENvbnRhY3QgU3VwcG9ydCBTZWN0aW9uICovfQogICAgICAgIDxDYXJkIGNsYXNzTmFtZT0icC02IHNwYWNlLXktNCBzaGFkb3ctbGcgcm91bmRlZC1sZyBib3JkZXIgYm9yZGVyLWdyYXktMzAwIHRyYW5zaXRpb24tdHJhbnNmb3JtIGR1cmF0aW9uLTMwMCBob3ZlcjpzY2FsZS0xMDUiPgogICAgICAgICAgPENhcmRIZWFkZXIgY2xhc3NOYW1lPSJmbGV4IGl0ZW1zLWNlbnRlciBzcGFjZS14LTMgYm9yZGVyLWIgYm9yZGVyLWdyYXktMzAwIHBiLTMiPgogICAgICAgICAgICA8Q2FyZFRpdGxlIGNsYXNzTmFtZT0idGV4dC0yeGwiPkNvbnRhY3QgU3VwcG9ydDwvQ2FyZFRpdGxlPgogICAgICAgICAgPC9DYXJkSGVhZGVyPgogICAgICAgICAgPENhcmRDb250ZW50IGNsYXNzTmFtZT0iYm9yZGVyLXQgYm9yZGVyLWdyYXktMzAwIHB0LTMiPgogICAgICAgICAgICA8cD5JZiB5b3UgbmVlZCBmdXJ0aGVyIGFzc2lzdGFuY2UsIHBsZWFzZSBjb250YWN0IG91ciBzdXBwb3J0IHRlYW06PC9wPgogICAgICAgICAgICA8dWwgY2xhc3NOYW1lPSJsaXN0LWRpc2MgbWwtNiBzcGFjZS15LTIiPgogICAgICAgICAgICAgIDxsaT5FbWFpbDogPGEgaHJlZj0ibWFpbHRvOnN1cHBvcnRAYWl5b3UuY29tIiBjbGFzc05hbWU9InVuZGVybGluZSI+c3VwcG9ydEBhaXlvdS5jb208L2E+PC9saT4KICAgICAgICAgICAgPC91bD4KICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+CiAgICAgICAgPC9DYXJkPgoKICAgICAgICB7LyogRmVhdHVyZXMgU2VjdGlvbiAqL30KICAgICAgICA8Q2FyZCBjbGFzc05hbWU9InAtNiBzcGFjZS15LTQgc2hhZG93LWxnIHJvdW5kZWQtbGcgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCB0cmFuc2l0aW9uLXRyYW5zZm9ybSBkdXJhdGlvbi0zMDAgaG92ZXI6c2NhbGUtMTA1Ij4KICAgICAgICAgIDxDYXJkSGVhZGVyIGNsYXNzTmFtZT0iYm9yZGVyLWIgYm9yZGVyLWdyYXktMzAwIHBiLTQiPgogICAgICAgICAgICA8Q2FyZFRpdGxlIGNsYXNzTmFtZT0idGV4dC0yeGwiPkZlYXR1cmVzICYgUmVzb3VyY2VzPC9DYXJkVGl0bGU+CiAgICAgICAgICA8L0NhcmRIZWFkZXI+CiAgICAgICAgICA8Q2FyZENvbnRlbnQgY2xhc3NOYW1lPSJzcGFjZS15LTQgYm9yZGVyLXQgYm9yZGVyLWdyYXktMzAwIHB0LTQiPgogICAgICAgICAgICA8dWwgY2xhc3NOYW1lPSJsaXN0LWRpc2MgbWwtNiBzcGFjZS15LTIiPgogICAgICAgICAgICAgIDxsaT5TdGVwLWJ5LXN0ZXAgZ3VpZGVzIGZvciBuZXcgdXNlcnM8L2xpPgogICAgICAgICAgICAgIDxsaT5JbnRlcmFjdGl2ZSB0dXRvcmlhbHMgdG8gbWF4aW1pemUgcHJvZHVjdGl2aXR5PC9saT4KICAgICAgICAgICAgICA8bGk+RkFRcyB0byBxdWlja2x5IHJlc29sdmUgY29tbW9uIGlzc3VlczwvbGk+CiAgICAgICAgICAgICAgPGxpPkNvbnRhY3Qgc3VwcG9ydCBmb3IgcGVyc29uYWxpemVkIGFzc2lzdGFuY2U8L2xpPgogICAgICAgICAgICAgIDxsaT5Eb2N1bWVudGF0aW9uIGZvciBhZHZhbmNlZCB1c2VyczwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICA8L0NhcmRDb250ZW50PgogICAgICAgIDwvQ2FyZD4KICAgICAgPC9tYWluPgoKICAgICAgPGhyIGNsYXNzTmFtZT0idy1mdWxsIG1heC13LTd4bCBib3JkZXItZ3JheS0zMDAiIC8+CgogICAgICB7LyogRm9vdGVyICovfQogICAgICA8Zm9vdGVyIGNsYXNzTmFtZT0idy1mdWxsIG1heC13LTd4bCBmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIgdGV4dC1zbSB0ZXh0LWdyYXktNTAwIG10LTYiPgogICAgICAgIDxwPgogICAgICAgICAgwqkgMjAyNCBBaXlvdS4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4gPGJyIC8+CiAgICAgICAgICBDb250YWN0OiBvcGVuaW5ib3hAbWFpbGluYXRvci5jb20KICAgICAgICA8L3A+CiAgICAgICAgPGRpdiBjbGFzc05hbWU9ImZsZXggc3BhY2UteC00Ij4KICAgICAgICAgIDxMaW5rIGhyZWY9Ii90ZXJtc19hbmRfY29uZGl0aW9uIiBjbGFzc05hbWU9InVuZGVybGluZSI+VGVybXMgb2YgU2VydmljZTwvTGluaz4KICAgICAgICAgIDxMaW5rIGhyZWY9Ii9wcml2YWN5IiBjbGFzc05hbWU9InVuZGVybGluZSI+UHJpdmFjeSBQb2xpY3k8L0xpbms+CiAgICAgICAgICA8TGluayBocmVmPSJodHRwczovL2dpdGh1Yi5jb20iIGNsYXNzTmFtZT0idW5kZXJsaW5lIj5HaXRodWI8L0xpbms+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZm9vdGVyPgogICAgPC9kaXY+CiAgKTsKfTsKCmV4cG9ydCBkZWZhdWx0IEhlbHBQYWdlOwp5HwAAAAAAAHofAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHRsAAAAAAAAdGwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAA4eAAAAAAAADh4AAAAAAAAOAAAAX2FuZF9jb25kaXRpb24",
					"AQAAAAAAAAABAAAAHB4AAAAAAAAOHgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"paste",
					null,
					"AgAAAM8AAAAAAAAABwEAAAAAAAAAAAAABwEAAAAAAAAHAQAAAAAAADgAAABpbXBvcnQgeyBNb2RlVG9nZ2xlIH0gZnJvbSAiQC9jb21wb25lbnRzL3VpL21vZGV0b2dnbGUiOw",
					"AQAAAAAAAAABAAAABwEAAAAAAADPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"paste",
					null,
					"AgAAAL0FAAAAAAAAKQYAAAAAAAAAAAAAKQYAAAAAAAApBgAAAAAAAA4AAAA8TW9kZVRvZ2dsZSAvPg",
					"AQAAAAAAAAABAAAAywUAAAAAAAC9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AQAAAAAAAAABAAAAKQYAAAAAAAApBgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					2,
					"left_delete",
					null,
					"AgAAAMIFAAAAAAAAwgUAAAAAAAAiAAAAY2xhc3NOYW1lPSJhYnNvbHV0ZSB0b3AtNCByaWdodC00IsEFAAAAAAAAwQUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA5AUAAAAAAADCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					3,
					"left_delete",
					null,
					"AwAAANwFAAAAAAAA3AUAAAAAAAAeAAAAbGFzc05hbWU9InNwYWNlLXgtNCBzcGFjZS15LTYi2wUAAAAAAADbBQAAAAAAAAEAAABj2gUAAAAAAADaBQAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAA+gUAAAAAAADcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"left_delete",
					null,
					"AQAAALIFAAAAAAAAsgUAAAAAAAAQAAAACiAgICAgICAgICA8ZGl2Pg",
					"AQAAAAAAAAABAAAAwgUAAAAAAACyBQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"left_delete",
					null,
					"AQAAAM0FAAAAAAAAzQUAAAAAAAARAAAACiAgICAgICAgICA8L2Rpdj4",
					"AQAAAAAAAAABAAAA3gUAAAAAAADNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AQAAAAAAAAABAAAAzQUAAAAAAADNBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "app/privacy/page.tsx",
			"settings":
			{
				"buffer_size": 9725,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAADsJAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"js_prettier",
					{
						"auto_format_prettier_config_path": null,
						"save_file": true
					},
					"",
					"AQAAAAAAAAABAAAAXyMAAAAAAABfIwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/db.ts",
			"settings":
			{
				"buffer_size": 1135,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					""
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Automatic"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Run"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Run (with args)..."
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Check"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Test"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Test (with args)..."
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Bench"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Clean"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Document"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Clippy"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Script"
				]
			],
			[
				"Packages/Rust Enhanced/RustEnhanced.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"prettier",
				"Preferences: Settings – Distraction Free"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"termi",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"term",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"termina",
				"Preferences: Terminus Command Palette"
			],
			[
				"package cont",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"termin",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"new tab",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"terminal",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"Terminal",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"Termainal",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"package control inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install package",
				"Install Package Control"
			],
			[
				"inst",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/praky/Documents/GitHub/aiyou",
		"/C/Users/praky/Documents/GitHub/aiyou/.next",
		"/C/Users/praky/Documents/GitHub/aiyou/app",
		"/C/Users/praky/Documents/GitHub/aiyou/app/api",
		"/C/Users/praky/Documents/GitHub/aiyou/app/fcku",
		"/C/Users/praky/Documents/GitHub/aiyou/app/help",
		"/C/Users/praky/Documents/GitHub/aiyou/app/login",
		"/C/Users/praky/Documents/GitHub/aiyou/app/main",
		"/C/Users/praky/Documents/GitHub/aiyou/app/privacy",
		"/C/Users/praky/Documents/GitHub/aiyou/app/signup",
		"/C/Users/praky/Documents/GitHub/aiyou/components",
		"/C/Users/praky/Documents/GitHub/aiyou/components/ui",
		"/C/Users/praky/Documents/GitHub/aiyou/hooks",
		"/C/Users/praky/Documents/GitHub/aiyou/lib",
		"/C/Users/praky/Documents/GitHub/aiyou/public",
		"/C/Users/praky/Documents/GitHub/aiyou/public/images"
	],
	"file_history":
	[
		"/C/Users/praky/Documents/GitHub/aiyou/app/main/page.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/app/login/page.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/lib/llmcall.ts",
		"/C/Users/praky/Documents/Python stuff/lambda_ply.py",
		"/C/Users/praky/Documents/GitHub/aiyou/app/page.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/app/signup/page.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/components/ui/modetoggle.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/lib/userModel.ts",
		"/C/Users/praky/Documents/GitHub/aiyou/app/fuck-you/page.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/lib/userDB.ts",
		"/C/Users/praky/Documents/GitHub/aiyou/app/main/validateUser.ts",
		"/C/Users/praky/Documents/GitHub/aiyou/components/ui/toggle.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/lib/utils.ts",
		"/C/Users/praky/Documents/GitHub/aiyou/lib/model.ts",
		"/C/Users/praky/Documents/GitHub/aiyou/components/ui/command.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/components/ui/newcommand.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/components/ui/dialog.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/components/ui/textarea.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/next.config.mjs",
		"/C/Users/praky/Documents/GitHub/aiyou/app/userModel.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/components/ui/scroll-area.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/components/ui/tooltip.tsx",
		"/C/Users/praky/Documents/GitHub/aiyou/components/ui/avatar.tsx",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/fow.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/scenes/convo.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/scenes/campaign.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/unit.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/utils.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/display.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/enemyai/priort.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/main.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/scenes/encounter.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/trigger.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/scenes/movement.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/scenes/mod.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/scenes/battle.rs",
		"/C/Users/nikhi/OneDrive/Documents/NodeProjects/aiyou/lib/utils.ts",
		"/?wsl$/Debian/home/user/C2024/DSA/Tree/threaded_binary_tree.h",
		"/C/Users/nikhi/OneDrive/Documents/DenoJS/test/test8.html",
		"/C/Users/nikhi/OneDrive/Documents/DenoJS/test/test7.html",
		"/?wsl.localhost/Debian/home/user/C2024/DSA/Tree/binary_search_tree.h",
		"/C/Users/nikhi/OneDrive/Documents/DenoJS/test/test5.html",
		"/C/Users/nikhi/OneDrive/Documents/DenoJS/test/test6.html",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/enemyai/mod.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/plane.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/map.rs",
		"/C/Users/nikhi/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/enemyai/basic.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/scenes/prepbattle.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/tileset/overworld.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/data.rs",
		"/C/Users/nikhi/OneDrive/Documents/Zig/ziglings/exercises/084_async.zig",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/astar.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/ReadMe.md",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/ui.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/units/oliver.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/units/sonya.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/combat.rs",
		"/C/Users/nikhi/.cargo/registry/src/index.crates.io-6f17d22bba15001f/egui-0.28.1/src/containers/window.rs",
		"/C/Users/nikhi/.cargo/registry/src/index.crates.io-6f17d22bba15001f/egui-0.28.1/src/containers/frame.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/campaigns/test/level1.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/.gitignore",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/rustfmt.toml",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/saves/test.sav",
		"/C/Users/nikhi/.cargo/registry/src/index.crates.io-6f17d22bba15001f/raylib-5.0.1/src/core/math.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/campaigns/test.ron",
		"/C/Users/nikhi/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/CREDITS.md",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/Cargo.toml",
		"/C/Users/nikhi/.cargo/registry/src/index.crates.io-6f17d22bba15001f/raylib-5.0.1/src/core/drawing.rs",
		"/C/Users/nikhi/.cargo/git/checkouts/egui-raylib-6526e567d30088aa/bffb43f/src/lib.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/drawing.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/enemyai/rush.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/scenes/textintro.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/fog.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/enemyai.rs",
		"/C/Users/nikhi/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.204/src/de/mod.rs",
		"/C/Users/nikhi/.cargo/registry/src/index.crates.io-6f17d22bba15001f/raylib-5.0.1/src/core/text.rs",
		"/C/Users/nikhi/OneDrive/Documents/DenoJS/retrolog/postapi.ts",
		"/C/Users/nikhi/OneDrive/Documents/DenoJS/retrolog/server.ts",
		"/C/Users/nikhi/OneDrive/Documents/DenoJS/retrolog/client.js",
		"/C/Users/nikhi/OneDrive/Documents/DenoJS/retrolog/index.html",
		"/C/Users/nikhi/OneDrive/Documents/DenoJS/retrolog/css/style.css",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/units/carl.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/uf_wind/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/scripts/pasteframes.py",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/scripts/alphacol.py",
		"/C/Users/nikhi/OneDrive/Documents/New folder/first-contributions/Contributors.md",
		"/C/Users/nikhi/OneDrive/Documents/Python/toyscheme/parser.py",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/units/benedict.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/units/louhel.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/units/einar.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/units/dorothy.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/units/daniel.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/scripts/recolour.py",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/maps/level2_lake_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/enemyai/microprior.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/maps/level2_lake_units.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/maps/level1_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/LICENCE.md",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/mf_bow/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/mm_staff/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/mm_bow/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/mm_axe/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/mf_axe/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/mf_lance/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/mm_sword/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/mm_lance/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/mf_sword/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/um_refresh/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/scripts/animanal.py",
		"/C/Users/nikhi/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-1.0.171/src/de/mod.rs",
		"/C/Users/nikhi/OneDrive/Documents/Paradox Interactive/Crusader Kings II/WTWSMS/save games/Chrocus/Alamannia591_04_21.ck2",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/uf_staff/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/um_staff/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/um_bow/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/uf_axe/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/um_axe/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/scripts/spacker.py",
		"/C/Users/nikhi/.cargo/registry/src/github.com-1ecc6299db9ec823/raylib-3.7.0/src/core/math.rs",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/um_lance/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/uf_lance/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/uf_sword/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/scripts/mapgen.py",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/maps/level1_units.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/src/enemyai",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/res/um_sword/anim_data.ron",
		"/C/Users/nikhi/OneDrive/Documents/RustGround/proelium/data/maps/level1.json"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 119.2,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"github",
			"privacy",
			"localsto",
			"getfromin",
			"getfrom",
			"getFromIndexedDB",
			"getfrominde",
			"localStorage",
			"getItem",
			"localstorage",
			"console.log",
			"handleSendMessage",
			"onSendMessage",
			"input",
			"fetch(\"/api\"",
			"api",
			"sendAPIRequest",
			"retr",
			"ret",
			"validateUserToken",
			"console.debug(\"token:",
			"console.debug",
			"console.",
			"refreshToken",
			"token",
			"chunk_source",
			"ApiMetaObject",
			"api",
			"console.log",
			"401",
			"api",
			");\n",
			"validateMetaObject",
			"api",
			"validateUserToken",
			"jwt",
			"lucid",
			"meta_object",
			"AiOutlineArrowLeft",
			"localSto",
			"local",
			"queryVectorStore",
			"api",
			"sidepanel",
			"fuck-you",
			"dev",
			"{e}",
			"{exp}",
			"{ exp }",
			"exp",
			"handleSubmit",
			"EndpointSelect",
			"IngestItem",
			"topbar",
			"pointer",
			"TopBar",
			"SidePanel",
			"console.log",
			"storeTokenInIndexedDB",
			"meta_object",
			"salt",
			"data",
			"meta_object",
			"JSON.stringify",
			"300",
			"bg",
			"sidepan",
			"sideoane",
			"thread",
			"sidepa",
			"402",
			"exp",
			"handlese",
			"token",
			"handleSendMessage",
			"onSendMessage",
			"InputArea",
			"console.log",
			"handleSend",
			"chat",
			"chatpanel",
			"exp",
			"User.save",
			"user",
			"TopBar",
			"indexed",
			"post",
			"toast",
			"useToast",
			"route",
			"post",
			"copy",
			"input",
			"topbar",
			"addEndpoint",
			"side",
			"CommandItem",
			"selectedEndpoint",
			"setSelectedEndpoint",
			"setOpen",
			"endpoint",
			"setSelectedEndpoint",
			"TopBarProps",
			"endpointse",
			"NewEndpointDialog",
			"DialogTitle",
			"NewEndpointDialog",
			"ingestitem",
			"NewEndpointDialog",
			"ingest",
			"NewEndpointDialog",
			"IngestItem",
			"NewEndpointDialog",
			"IngestItem",
			"NewEndpointDialog",
			"IngestItem",
			"DropdownMenuTrigger",
			"sidepanel",
			"Thread",
			"Textarea",
			"ScrollArea",
			"TooltipContent",
			"chatpanel",
			"MarkdownRenderer"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1987,
						"regions":
						{
						},
						"selection":
						[
							[
								1987,
								1987
							]
						],
						"settings":
						{
							"auto_complete": false,
							"auto_indent": false,
							"gutter": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 858.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/praky/AppData/Roaming/Sublime Text/Packages/JsPrettier/JsPrettier.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22874,
						"regions":
						{
						},
						"selection":
						[
							[
								3811,
								3811
							]
						],
						"settings":
						{
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1848.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "hooks/use-toast.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4007,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TypeScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "app/api/route.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10778,
						"regions":
						{
						},
						"selection":
						[
							[
								840,
								840
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TypeScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "app/main/page.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29116,
						"regions":
						{
						},
						"selection":
						[
							[
								8411,
								8413
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18763.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "app/page.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5581,
						"regions":
						{
						},
						"selection":
						[
							[
								5170,
								5170
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2197.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/llmcall.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16959,
						"regions":
						{
						},
						"selection":
						[
							[
								4961,
								4961
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TypeScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3240.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "app/login/page.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7448,
						"regions":
						{
						},
						"selection":
						[
							[
								4766,
								4658
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2715.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "app/signup/page.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7717,
						"regions":
						{
						},
						"selection":
						[
							[
								2079,
								2079
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 84.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "app/help/page.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8044,
						"regions":
						{
						},
						"selection":
						[
							[
								1483,
								1483
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 756.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "app/privacy/page.tsx",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9725,
						"regions":
						{
						},
						"selection":
						[
							[
								9724,
								9724
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3323.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/db.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1135,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TypeScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 780.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 44.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 98.4000015259
	},
	"output.diagnostics":
	{
		"height": 98.4000015259
	},
	"output.exec":
	{
		"height": 138.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Rust Enhanced/RustEnhanced.sublime-build",
	"project": "aiyou.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\nikhi\\OneDrive\\Documents\\Python\\ml-experiments\\ml-experiments.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 264.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
